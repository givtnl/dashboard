{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar objectutils_1 = require(\"../utils/objectutils\");\nvar forms_1 = require(\"@angular/forms\");\nexports.SELECTBUTTON_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return SelectButton;\n  }),\n  multi: true\n};\nvar SelectButton = function () {\n  function SelectButton(objectUtils) {\n    this.objectUtils = objectUtils;\n    this.onOptionClick = new core_1.EventEmitter();\n    this.onChange = new core_1.EventEmitter();\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n  }\n  Object.defineProperty(SelectButton.prototype, \"options\", {\n    get: function () {\n      return this._options;\n    },\n    set: function (val) {\n      var opts = this.optionLabel ? this.objectUtils.generateSelectItems(val, this.optionLabel) : val;\n      this._options = opts;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SelectButton.prototype.writeValue = function (value) {\n    this.value = value;\n  };\n  SelectButton.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  SelectButton.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  SelectButton.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  SelectButton.prototype.onItemClick = function (event, option, checkbox, index) {\n    if (this.disabled) {\n      return;\n    }\n    checkbox.focus();\n    if (this.multiple) {\n      var itemIndex_1 = this.findItemIndex(option);\n      if (itemIndex_1 != -1) this.value = this.value.filter(function (val, i) {\n        return i != itemIndex_1;\n      });else this.value = (this.value || []).concat([option.value]);\n    } else {\n      this.value = option.value;\n    }\n    this.onOptionClick.emit({\n      originalEvent: event,\n      option: option,\n      index: index\n    });\n    this.onModelChange(this.value);\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.value\n    });\n  };\n  SelectButton.prototype.onFocus = function (event) {\n    this.focusedItem = event.target;\n  };\n  SelectButton.prototype.onBlur = function (event) {\n    this.focusedItem = null;\n    this.onModelTouched();\n  };\n  SelectButton.prototype.isSelected = function (option) {\n    if (this.multiple) return this.findItemIndex(option) != -1;else return option.value == this.value;\n  };\n  SelectButton.prototype.findItemIndex = function (option) {\n    var index = -1;\n    if (this.value) {\n      for (var i = 0; i < this.value.length; i++) {\n        if (this.value[i] == option.value) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  };\n  return SelectButton;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], SelectButton.prototype, \"tabindex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], SelectButton.prototype, \"multiple\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], SelectButton.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], SelectButton.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], SelectButton.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], SelectButton.prototype, \"optionLabel\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], SelectButton.prototype, \"onOptionClick\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], SelectButton.prototype, \"onChange\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], SelectButton.prototype, \"options\", null);\nSelectButton = __decorate([core_1.Component({\n  selector: 'p-selectButton',\n  template: \"\\n        <div [ngClass]=\\\"'ui-selectbutton ui-buttonset ui-widget ui-corner-all ui-buttonset-' + options.length\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <div *ngFor=\\\"let option of options; let i = index\\\" class=\\\"ui-button ui-widget ui-state-default ui-button-text-only {{option.styleClass}}\\\"\\n                [ngClass]=\\\"{'ui-state-active':isSelected(option), 'ui-state-disabled':disabled, 'ui-state-focus': cbox == focusedItem}\\\" (click)=\\\"onItemClick($event,option,cbox,i)\\\">\\n                <span class=\\\"ui-button-text ui-clickable\\\">{{option.label}}</span>\\n                <div class=\\\"ui-helper-hidden-accessible\\\">\\n                    <input #cbox type=\\\"checkbox\\\" [checked]=\\\"isSelected(option)\\\" (focus)=\\\"onFocus($event)\\\" (blur)=\\\"onBlur($event)\\\" [attr.tabindex]=\\\"tabindex\\\" [attr.disabled]=\\\"disabled\\\">\\n                </div>\\n            </div>\\n        </div>\\n    \",\n  providers: [objectutils_1.ObjectUtils, exports.SELECTBUTTON_VALUE_ACCESSOR]\n}), __metadata(\"design:paramtypes\", [objectutils_1.ObjectUtils])], SelectButton);\nexports.SelectButton = SelectButton;\nvar SelectButtonModule = function () {\n  function SelectButtonModule() {}\n  return SelectButtonModule;\n}();\nSelectButtonModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [SelectButton],\n  declarations: [SelectButton]\n})], SelectButtonModule);\nexports.SelectButtonModule = SelectButtonModule;\n//# sourceMappingURL=selectbutton.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}