{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar objectutils_1 = require(\"../utils/objectutils\");\nvar forms_1 = require(\"@angular/forms\");\nexports.DROPDOWN_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return Dropdown;\n  }),\n  multi: true\n};\nvar Dropdown = function () {\n  function Dropdown(el, domHandler, renderer, cd, objectUtils, zone) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.cd = cd;\n    this.objectUtils = objectUtils;\n    this.zone = zone;\n    this.scrollHeight = '200px';\n    this.autoWidth = true;\n    this.filterBy = 'label';\n    this.lazy = true;\n    this.resetFilterOnHide = false;\n    this.dropdownIcon = 'fa fa-fw fa-caret-down';\n    this.onChange = new core_1.EventEmitter();\n    this.onFocus = new core_1.EventEmitter();\n    this.onBlur = new core_1.EventEmitter();\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n    this.panelVisible = false;\n  }\n  Dropdown.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    this.templates.forEach(function (item) {\n      switch (item.getType()) {\n        case 'item':\n          _this.itemTemplate = item.template;\n          break;\n        default:\n          _this.itemTemplate = item.template;\n          break;\n      }\n    });\n  };\n  Dropdown.prototype.ngOnInit = function () {\n    this.optionsToDisplay = this.options;\n    this.updateSelectedOption(null);\n  };\n  Object.defineProperty(Dropdown.prototype, \"options\", {\n    get: function () {\n      return this._options;\n    },\n    set: function (val) {\n      var opts = this.optionLabel ? this.objectUtils.generateSelectItems(val, this.optionLabel) : val;\n      this._options = opts;\n      this.optionsToDisplay = this._options;\n      this.updateSelectedOption(this.value);\n      this.optionsChanged = true;\n      if (this.filterValue && this.filterValue.length) {\n        this.activateFilter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Dropdown.prototype.ngAfterViewInit = function () {\n    this.container = this.containerViewChild.nativeElement;\n    this.panel = this.panelViewChild.nativeElement;\n    this.itemsWrapper = this.itemsWrapperViewChild.nativeElement;\n    if (this.editable) {\n      this.updateEditableLabel();\n    }\n    this.updateDimensions();\n    this.initialized = true;\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.panel);else this.domHandler.appendChild(this.panel, this.appendTo);\n    }\n  };\n  Object.defineProperty(Dropdown.prototype, \"label\", {\n    get: function () {\n      return this.selectedOption ? this.selectedOption.label : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Dropdown.prototype.updateEditableLabel = function () {\n    if (this.editableInputViewChild && this.editableInputViewChild.nativeElement) {\n      this.editableInputViewChild.nativeElement.value = this.selectedOption ? this.selectedOption.label : this.value || '';\n    }\n  };\n  Dropdown.prototype.onItemClick = function (event, option) {\n    this.itemClick = true;\n    this.selectItem(event, option);\n    this.focusViewChild.nativeElement.focus();\n    this.hide();\n  };\n  Dropdown.prototype.selectItem = function (event, option) {\n    if (this.selectedOption != option) {\n      this.selectedOption = option;\n      this.value = option.value;\n      this.onModelChange(this.value);\n      this.updateEditableLabel();\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n  };\n  Dropdown.prototype.ngAfterViewChecked = function () {\n    var _this = this;\n    if (this.shown) {\n      this.onShow();\n      this.shown = false;\n    }\n    if (this.optionsChanged && this.panelVisible) {\n      this.optionsChanged = false;\n      this.zone.runOutsideAngular(function () {\n        setTimeout(function () {\n          _this.updateDimensions();\n          _this.alignPanel();\n        }, 1);\n      });\n    }\n    if (this.selectedOptionUpdated && this.itemsWrapper) {\n      var selectedItem = this.domHandler.findSingle(this.panel, 'li.ui-state-highlight');\n      if (selectedItem) {\n        this.domHandler.scrollInView(this.itemsWrapper, this.domHandler.findSingle(this.panel, 'li.ui-state-highlight'));\n      }\n      this.selectedOptionUpdated = false;\n    }\n  };\n  Dropdown.prototype.writeValue = function (value) {\n    if (this.filter) {\n      this.resetFilter();\n    }\n    this.value = value;\n    this.updateSelectedOption(value);\n    this.updateEditableLabel();\n    this.cd.markForCheck();\n  };\n  Dropdown.prototype.resetFilter = function () {\n    if (this.filterViewChild && this.filterViewChild.nativeElement) {\n      this.filterViewChild.nativeElement.value = '';\n    }\n    this.optionsToDisplay = this.options;\n  };\n  Dropdown.prototype.updateSelectedOption = function (val) {\n    this.selectedOption = this.findOption(val, this.optionsToDisplay);\n    if (!this.placeholder && !this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {\n      this.selectedOption = this.optionsToDisplay[0];\n    }\n    this.selectedOptionUpdated = true;\n  };\n  Dropdown.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  Dropdown.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  Dropdown.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  Dropdown.prototype.updateDimensions = function () {\n    if (this.autoWidth) {\n      var select = this.domHandler.findSingle(this.el.nativeElement, 'select');\n      if (!this.style || !this.style['width'] && !this.style['min-width']) {\n        this.el.nativeElement.children[0].style.width = select.offsetWidth + 30 + 'px';\n      }\n    }\n  };\n  Dropdown.prototype.onMouseclick = function (event) {\n    var _this = this;\n    if (this.disabled || this.readonly) {\n      return;\n    }\n    this.selfClick = true;\n    if (!this.itemClick) {\n      this.focusViewChild.nativeElement.focus();\n      if (this.panelVisible) this.hide();else {\n        this.show();\n        if (this.filterViewChild != undefined) {\n          setTimeout(function () {\n            _this.filterViewChild.nativeElement.focus();\n          }, 200);\n        }\n      }\n    }\n  };\n  Dropdown.prototype.onEditableInputClick = function (event) {\n    this.itemClick = true;\n    this.bindDocumentClickListener();\n  };\n  Dropdown.prototype.onEditableInputFocus = function (event) {\n    this.focus = true;\n    this.hide();\n  };\n  Dropdown.prototype.onEditableInputChange = function (event) {\n    this.value = event.target.value;\n    this.updateSelectedOption(this.value);\n    this.onModelChange(this.value);\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.value\n    });\n  };\n  Dropdown.prototype.onShow = function () {\n    if (this.options && this.options.length) {\n      this.alignPanel();\n      this.bindDocumentClickListener();\n      var selectedListItem = this.domHandler.findSingle(this.itemsWrapper, '.ui-dropdown-item.ui-state-highlight');\n      if (selectedListItem) {\n        this.domHandler.scrollInView(this.itemsWrapper, selectedListItem);\n      }\n    }\n  };\n  Dropdown.prototype.show = function () {\n    if (this.appendTo) {\n      this.panel.style.minWidth = this.domHandler.getWidth(this.container) + 'px';\n    }\n    this.panel.style.zIndex = String(++domhandler_1.DomHandler.zindex);\n    this.panelVisible = true;\n    this.shown = true;\n  };\n  Dropdown.prototype.hide = function () {\n    this.panelVisible = false;\n    if (this.filter && this.resetFilterOnHide) {\n      this.resetFilter();\n    }\n  };\n  Dropdown.prototype.alignPanel = function () {\n    if (this.appendTo) this.domHandler.absolutePosition(this.panel, this.container);else this.domHandler.relativePosition(this.panel, this.container);\n  };\n  Dropdown.prototype.onInputFocus = function (event) {\n    this.focus = true;\n    this.onFocus.emit(event);\n  };\n  Dropdown.prototype.onInputBlur = function (event) {\n    this.focus = false;\n    this.onModelTouched();\n    this.onBlur.emit(event);\n  };\n  Dropdown.prototype.onKeydown = function (event) {\n    if (this.readonly) {\n      return;\n    }\n    var selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n    switch (event.which) {\n      //down\n      case 40:\n        if (!this.panelVisible && event.altKey) {\n          this.show();\n        } else {\n          if (selectedItemIndex !== -1) {\n            var nextItemIndex = selectedItemIndex + 1;\n            if (nextItemIndex != this.optionsToDisplay.length) {\n              this.selectItem(event, this.optionsToDisplay[nextItemIndex]);\n              this.selectedOptionUpdated = true;\n            }\n          } else if (this.optionsToDisplay) {\n            this.selectItem(event, this.optionsToDisplay[0]);\n          }\n        }\n        event.preventDefault();\n        break;\n      //up\n      case 38:\n        if (selectedItemIndex > 0) {\n          var prevItemIndex = selectedItemIndex - 1;\n          this.selectItem(event, this.optionsToDisplay[prevItemIndex]);\n          this.selectedOptionUpdated = true;\n        }\n        event.preventDefault();\n        break;\n      //space\n      case 32:\n      case 32:\n        if (!this.panelVisible) {\n          this.show();\n          event.preventDefault();\n        }\n        break;\n      //enter\n      case 13:\n        this.hide();\n        event.preventDefault();\n        break;\n      //escape and tab\n      case 27:\n      case 9:\n        this.hide();\n        break;\n    }\n  };\n  Dropdown.prototype.findOptionIndex = function (val, opts) {\n    var index = -1;\n    if (opts) {\n      for (var i = 0; i < opts.length; i++) {\n        if (val == null && opts[i].value == null || this.objectUtils.equals(val, opts[i].value, this.dataKey)) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  };\n  Dropdown.prototype.findOption = function (val, opts) {\n    var index = this.findOptionIndex(val, opts);\n    return index != -1 ? opts[index] : null;\n  };\n  Dropdown.prototype.onFilter = function (event) {\n    var inputValue = event.target.value.toLowerCase();\n    if (inputValue && inputValue.length) {\n      this.filterValue = inputValue;\n      this.activateFilter();\n    } else {\n      this.filterValue = null;\n      this.optionsToDisplay = this.options;\n    }\n    this.optionsChanged = true;\n  };\n  Dropdown.prototype.activateFilter = function () {\n    var searchFields = this.filterBy.split(',');\n    if (this.options && this.options.length) {\n      this.optionsToDisplay = this.objectUtils.filter(this.options, searchFields, this.filterValue);\n      this.optionsChanged = true;\n    }\n  };\n  Dropdown.prototype.applyFocus = function () {\n    if (this.editable) this.domHandler.findSingle(this.el.nativeElement, '.ui-dropdown-label.ui-inputtext').focus();else this.domHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();\n  };\n  Dropdown.prototype.bindDocumentClickListener = function () {\n    var _this = this;\n    if (!this.documentClickListener) {\n      this.documentClickListener = this.renderer.listen('document', 'click', function () {\n        if (!_this.selfClick && !_this.itemClick) {\n          _this.panelVisible = false;\n          _this.unbindDocumentClickListener();\n        }\n        _this.selfClick = false;\n        _this.itemClick = false;\n        _this.cd.markForCheck();\n      });\n    }\n  };\n  Dropdown.prototype.unbindDocumentClickListener = function () {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n      this.documentClickListener = null;\n    }\n  };\n  Dropdown.prototype.ngOnDestroy = function () {\n    this.initialized = false;\n    this.unbindDocumentClickListener();\n    if (this.appendTo) {\n      this.el.nativeElement.appendChild(this.panel);\n    }\n  };\n  return Dropdown;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"scrollHeight\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"filter\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"name\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Dropdown.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Dropdown.prototype, \"panelStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"panelStyleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"readonly\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"autoWidth\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"required\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"editable\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Dropdown.prototype, \"appendTo\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Dropdown.prototype, \"tabindex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"placeholder\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"filterPlaceholder\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"inputId\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"dataKey\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"filterBy\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"lazy\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"autofocus\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dropdown.prototype, \"resetFilterOnHide\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"dropdownIcon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dropdown.prototype, \"optionLabel\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Dropdown.prototype, \"onChange\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Dropdown.prototype, \"onFocus\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Dropdown.prototype, \"onBlur\", void 0);\n__decorate([core_1.ViewChild('container'), __metadata(\"design:type\", core_1.ElementRef)], Dropdown.prototype, \"containerViewChild\", void 0);\n__decorate([core_1.ViewChild('panel'), __metadata(\"design:type\", core_1.ElementRef)], Dropdown.prototype, \"panelViewChild\", void 0);\n__decorate([core_1.ViewChild('itemswrapper'), __metadata(\"design:type\", core_1.ElementRef)], Dropdown.prototype, \"itemsWrapperViewChild\", void 0);\n__decorate([core_1.ViewChild('filter'), __metadata(\"design:type\", core_1.ElementRef)], Dropdown.prototype, \"filterViewChild\", void 0);\n__decorate([core_1.ViewChild('in'), __metadata(\"design:type\", core_1.ElementRef)], Dropdown.prototype, \"focusViewChild\", void 0);\n__decorate([core_1.ViewChild('editableInput'), __metadata(\"design:type\", core_1.ElementRef)], Dropdown.prototype, \"editableInputViewChild\", void 0);\n__decorate([core_1.ContentChildren(shared_1.PrimeTemplate), __metadata(\"design:type\", core_1.QueryList)], Dropdown.prototype, \"templates\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], Dropdown.prototype, \"options\", null);\nDropdown = __decorate([core_1.Component({\n  selector: 'p-dropdown',\n  template: \"\\n         <div #container [ngClass]=\\\"{'ui-dropdown ui-widget ui-state-default ui-corner-all ui-helper-clearfix':true,\\n            'ui-state-disabled':disabled,'ui-dropdown-open':panelVisible,'ui-state-focus':focus}\\\"\\n            (click)=\\\"onMouseclick($event)\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <div class=\\\"ui-helper-hidden-accessible\\\" *ngIf=\\\"autoWidth\\\">\\n                <select [required]=\\\"required\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"selectedOption ? selectedOption.label : ' '\\\" tabindex=\\\"-1\\\" aria-hidden=\\\"true\\\">\\n                    <option *ngIf=\\\"placeholder\\\">{{placeholder}}</option>\\n                    <option *ngFor=\\\"let option of options\\\" [value]=\\\"option.value\\\" [selected]=\\\"selectedOption == option\\\">{{option.label}}</option>\\n                </select>\\n            </div>\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input #in [attr.id]=\\\"inputId\\\" type=\\\"text\\\" [attr.aria-label]=\\\"selectedOption ? selectedOption.label : ' '\\\" readonly (focus)=\\\"onInputFocus($event)\\\" role=\\\"listbox\\\"\\n                    (blur)=\\\"onInputBlur($event)\\\" (keydown)=\\\"onKeydown($event)\\\" [disabled]=\\\"disabled\\\" [attr.tabindex]=\\\"tabindex\\\" [attr.autofocus]=\\\"autofocus\\\">\\n            </div>\\n            <label [ngClass]=\\\"{'ui-dropdown-label ui-inputtext ui-corner-all':true,'ui-dropdown-label-empty':(label == null || label.length === 0)}\\\" *ngIf=\\\"!editable && (label != null)\\\">{{label||'empty'}}</label>\\n            <label [ngClass]=\\\"{'ui-dropdown-label ui-inputtext ui-corner-all ui-placeholder':true,'ui-dropdown-label-empty': (placeholder == null || placeholder.length === 0)}\\\" *ngIf=\\\"!editable && (label == null)\\\">{{placeholder||'empty'}}</label>\\n            <input #editableInput type=\\\"text\\\" [attr.aria-label]=\\\"selectedOption ? selectedOption.label : ' '\\\" class=\\\"ui-dropdown-label ui-inputtext ui-corner-all\\\" *ngIf=\\\"editable\\\" [disabled]=\\\"disabled\\\" [attr.placeholder]=\\\"placeholder\\\"\\n                        (click)=\\\"onEditableInputClick($event)\\\" (input)=\\\"onEditableInputChange($event)\\\" (focus)=\\\"onEditableInputFocus($event)\\\" (blur)=\\\"onInputBlur($event)\\\">\\n            <div class=\\\"ui-dropdown-trigger ui-state-default ui-corner-right\\\">\\n                <span class=\\\"ui-clickable\\\" [ngClass]=\\\"dropdownIcon\\\"></span>\\n            </div>\\n            <div #panel [ngClass]=\\\"'ui-dropdown-panel ui-widget-content ui-corner-all ui-shadow'\\\" [@panelState]=\\\"panelVisible ? 'visible' : 'hidden'\\\"\\n                [style.display]=\\\"panelVisible ? 'block' : 'none'\\\" [ngStyle]=\\\"panelStyle\\\" [class]=\\\"panelStyleClass\\\">\\n                <div *ngIf=\\\"filter\\\" class=\\\"ui-dropdown-filter-container\\\" (input)=\\\"onFilter($event)\\\" (click)=\\\"$event.stopPropagation()\\\">\\n                    <input #filter type=\\\"text\\\" autocomplete=\\\"off\\\" class=\\\"ui-dropdown-filter ui-inputtext ui-widget ui-state-default ui-corner-all\\\" [attr.placeholder]=\\\"filterPlaceholder\\\"\\n                    (keydown.enter)=\\\"$event.preventDefault()\\\" (keydown)=\\\"onKeydown($event)\\\">\\n                    <span class=\\\"fa fa-search\\\"></span>\\n                </div>\\n                <div #itemswrapper class=\\\"ui-dropdown-items-wrapper\\\" [style.max-height]=\\\"scrollHeight||'auto'\\\">\\n                    <ul class=\\\"ui-dropdown-items ui-dropdown-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\\\" *ngIf=\\\"lazy ? panelVisible : true\\\">\\n                        <li *ngFor=\\\"let option of optionsToDisplay;let i=index\\\"\\n                            [ngClass]=\\\"{'ui-dropdown-item ui-corner-all':true, 'ui-state-highlight':(selectedOption == option),\\n                            'ui-dropdown-item-empty':!option.label||option.label.length === 0}\\\"\\n                            (click)=\\\"onItemClick($event, option)\\\">\\n                            <span *ngIf=\\\"!itemTemplate\\\">{{option.label||'empty'}}</span>\\n                            <ng-template [pTemplateWrapper]=\\\"itemTemplate\\\" [item]=\\\"option\\\" *ngIf=\\\"itemTemplate\\\"></ng-template>\\n                        </li>\\n                    </ul>\\n                </div>\\n            </div>\\n        </div>\\n    \",\n  animations: [animations_1.trigger('panelState', [animations_1.state('hidden', animations_1.style({\n    opacity: 0\n  })), animations_1.state('visible', animations_1.style({\n    opacity: 1\n  })), animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')), animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))])],\n  providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, exports.DROPDOWN_VALUE_ACCESSOR]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ChangeDetectorRef, objectutils_1.ObjectUtils, core_1.NgZone])], Dropdown);\nexports.Dropdown = Dropdown;\nvar DropdownModule = function () {\n  function DropdownModule() {}\n  return DropdownModule;\n}();\nDropdownModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, shared_1.SharedModule],\n  exports: [Dropdown, shared_1.SharedModule],\n  declarations: [Dropdown]\n})], DropdownModule);\nexports.DropdownModule = DropdownModule;\n//# sourceMappingURL=dropdown.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}