{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar BlockUI = function () {\n  function BlockUI(el, domHandler) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n  }\n  Object.defineProperty(BlockUI.prototype, \"blocked\", {\n    get: function () {\n      return this._blocked;\n    },\n    set: function (val) {\n      this._blocked = val;\n      if (this.mask.nativeElement) {\n        if (this._blocked) this.block();else this.unblock();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BlockUI.prototype.ngAfterViewInit = function () {\n    if (this.target && !this.target.getBlockableElement) {\n      throw 'Target of BlockUI must implement BlockableUI interface';\n    }\n  };\n  BlockUI.prototype.block = function () {\n    if (this.target) {\n      this.target.getBlockableElement().appendChild(this.mask.nativeElement);\n      var style = this.target.style || {};\n      style.position = 'relative';\n      this.target.style = style;\n    } else {\n      document.body.appendChild(this.mask.nativeElement);\n    }\n    if (this.autoZIndex) {\n      this.mask.nativeElement.style.zIndex = String(this.baseZIndex + ++domhandler_1.DomHandler.zindex);\n    }\n  };\n  BlockUI.prototype.unblock = function () {\n    this.el.nativeElement.appendChild(this.mask.nativeElement);\n  };\n  BlockUI.prototype.ngOnDestroy = function () {\n    this.unblock();\n  };\n  return BlockUI;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], BlockUI.prototype, \"target\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], BlockUI.prototype, \"autoZIndex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], BlockUI.prototype, \"baseZIndex\", void 0);\n__decorate([core_1.ViewChild('mask'), __metadata(\"design:type\", core_1.ElementRef)], BlockUI.prototype, \"mask\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], BlockUI.prototype, \"blocked\", null);\nBlockUI = __decorate([core_1.Component({\n  selector: 'p-blockUI',\n  template: \"\\n        <div #mask class=\\\"ui-blockui ui-widget-overlay\\\" [ngClass]=\\\"{'ui-blockui-document':!target}\\\" [ngStyle]=\\\"{display: blocked ? 'block' : 'none'}\\\">\\n            <ng-content></ng-content>\\n        </div>\\n    \",\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler])], BlockUI);\nexports.BlockUI = BlockUI;\nvar BlockUIModule = function () {\n  function BlockUIModule() {}\n  return BlockUIModule;\n}();\nBlockUIModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [BlockUI],\n  declarations: [BlockUI]\n})], BlockUIModule);\nexports.BlockUIModule = BlockUIModule;\n//# sourceMappingURL=blockui.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}