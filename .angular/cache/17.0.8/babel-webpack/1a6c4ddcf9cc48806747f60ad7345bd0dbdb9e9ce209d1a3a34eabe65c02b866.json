{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar Tooltip = function () {\n  function Tooltip(el, domHandler, renderer) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.tooltipPosition = 'right';\n    this.tooltipEvent = 'hover';\n    this.appendTo = 'body';\n    this.tooltipZIndex = 'auto';\n    this.escape = true;\n  }\n  Tooltip.prototype.onMouseEnter = function (e) {\n    if (this.tooltipEvent === 'hover') {\n      if (this.hideTimeout) {\n        clearTimeout(this.hideTimeout);\n        this.destroy();\n      }\n      this.activate();\n    }\n  };\n  Tooltip.prototype.onMouseLeave = function (e) {\n    if (this.tooltipEvent === 'hover') {\n      this.deactivate(true);\n    }\n  };\n  Tooltip.prototype.onFocus = function (e) {\n    if (this.tooltipEvent === 'focus') {\n      this.activate();\n    }\n  };\n  Tooltip.prototype.onBlur = function (e) {\n    if (this.tooltipEvent === 'focus') {\n      this.deactivate(true);\n    }\n  };\n  Tooltip.prototype.onClick = function (e) {\n    if (this.tooltipEvent === 'hover') {\n      this.deactivate(true);\n    }\n  };\n  Tooltip.prototype.activate = function () {\n    var _this = this;\n    this.active = true;\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n    if (this.showDelay) this.showTimeout = setTimeout(function () {\n      _this.show();\n    }, this.showDelay);else this.show();\n    if (this.life) {\n      this.lifeTimeout = setTimeout(function () {\n        _this.deactivate(false);\n      }, this.life);\n    }\n  };\n  Tooltip.prototype.deactivate = function (useDelay) {\n    var _this = this;\n    this.active = false;\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout);\n    }\n    if (this.lifeTimeout) {\n      clearTimeout(this.lifeTimeout);\n    }\n    if (this.hideDelay && useDelay) this.hideTimeout = setTimeout(function () {\n      _this.hide();\n    }, this.hideDelay);else this.hide();\n  };\n  Object.defineProperty(Tooltip.prototype, \"text\", {\n    get: function () {\n      return this._text;\n    },\n    set: function (text) {\n      this._text = text;\n      if (this.active) {\n        if (this._text) {\n          if (this.container && this.container.offsetParent) this.updateText();else this.show();\n        } else {\n          this.hide();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Tooltip.prototype.create = function () {\n    this.container = document.createElement('div');\n    var tooltipArrow = document.createElement('div');\n    tooltipArrow.className = 'ui-tooltip-arrow';\n    this.container.appendChild(tooltipArrow);\n    this.tooltipText = document.createElement('div');\n    this.tooltipText.className = 'ui-tooltip-text ui-shadow ui-corner-all';\n    this.updateText();\n    if (this.positionStyle) {\n      this.container.style.position = this.positionStyle;\n    }\n    this.container.appendChild(this.tooltipText);\n    if (this.appendTo === 'body') document.body.appendChild(this.container);else if (this.appendTo === 'target') this.domHandler.appendChild(this.container, this.el.nativeElement);else this.domHandler.appendChild(this.container, this.appendTo);\n    this.container.style.display = 'inline-block';\n  };\n  Tooltip.prototype.show = function () {\n    if (!this.text || this.disabled) {\n      return;\n    }\n    this.create();\n    this.align();\n    if (this.tooltipStyleClass) {\n      this.container.className = this.container.className + ' ' + this.tooltipStyleClass;\n    }\n    this.domHandler.fadeIn(this.container, 250);\n    if (this.tooltipZIndex === 'auto') this.container.style.zIndex = ++domhandler_1.DomHandler.zindex;else this.container.style.zIndex = this.tooltipZIndex;\n    this.bindDocumentResizeListener();\n  };\n  Tooltip.prototype.hide = function () {\n    this.destroy();\n  };\n  Tooltip.prototype.updateText = function () {\n    if (this.escape) {\n      this.tooltipText.innerHTML = '';\n      this.tooltipText.appendChild(document.createTextNode(this._text));\n    } else {\n      this.tooltipText.innerHTML = this._text;\n    }\n  };\n  Tooltip.prototype.align = function () {\n    var position = this.tooltipPosition;\n    switch (position) {\n      case 'top':\n        this.alignTop();\n        if (this.isOutOfBounds()) {\n          this.alignBottom();\n        }\n        break;\n      case 'bottom':\n        this.alignBottom();\n        if (this.isOutOfBounds()) {\n          this.alignTop();\n        }\n        break;\n      case 'left':\n        this.alignLeft();\n        if (this.isOutOfBounds()) {\n          this.alignRight();\n          if (this.isOutOfBounds()) {\n            this.alignTop();\n            if (this.isOutOfBounds()) {\n              this.alignBottom();\n            }\n          }\n        }\n        break;\n      case 'right':\n        this.alignRight();\n        if (this.isOutOfBounds()) {\n          this.alignLeft();\n          if (this.isOutOfBounds()) {\n            this.alignTop();\n            if (this.isOutOfBounds()) {\n              this.alignBottom();\n            }\n          }\n        }\n        break;\n    }\n  };\n  Tooltip.prototype.getHostOffset = function () {\n    var offset = this.el.nativeElement.getBoundingClientRect();\n    var targetLeft = offset.left + this.domHandler.getWindowScrollLeft();\n    var targetTop = offset.top + this.domHandler.getWindowScrollTop();\n    return {\n      left: targetLeft,\n      top: targetTop\n    };\n  };\n  Tooltip.prototype.alignRight = function () {\n    this.preAlign();\n    this.container.className = 'ui-tooltip ui-widget ui-tooltip-right';\n    var hostOffset = this.getHostOffset();\n    var left = hostOffset.left + this.domHandler.getOuterWidth(this.el.nativeElement);\n    var top = hostOffset.top + (this.domHandler.getOuterHeight(this.el.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;\n    this.container.style.left = left + 'px';\n    this.container.style.top = top + 'px';\n  };\n  Tooltip.prototype.alignLeft = function () {\n    this.preAlign();\n    this.container.className = 'ui-tooltip ui-widget ui-tooltip-left';\n    var hostOffset = this.getHostOffset();\n    var left = hostOffset.left - this.domHandler.getOuterWidth(this.container);\n    var top = hostOffset.top + (this.domHandler.getOuterHeight(this.el.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;\n    this.container.style.left = left + 'px';\n    this.container.style.top = top + 'px';\n  };\n  Tooltip.prototype.alignTop = function () {\n    this.preAlign();\n    this.container.className = 'ui-tooltip ui-widget ui-tooltip-top';\n    var hostOffset = this.getHostOffset();\n    var left = hostOffset.left + (this.domHandler.getOuterWidth(this.el.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;\n    var top = hostOffset.top - this.domHandler.getOuterHeight(this.container);\n    this.container.style.left = left + 'px';\n    this.container.style.top = top + 'px';\n  };\n  Tooltip.prototype.alignBottom = function () {\n    this.preAlign();\n    this.container.className = 'ui-tooltip ui-widget ui-tooltip-bottom';\n    var hostOffset = this.getHostOffset();\n    var left = hostOffset.left + (this.domHandler.getOuterWidth(this.el.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;\n    var top = hostOffset.top + this.domHandler.getOuterHeight(this.el.nativeElement);\n    this.container.style.left = left + 'px';\n    this.container.style.top = top + 'px';\n  };\n  Tooltip.prototype.preAlign = function () {\n    this.container.style.left = -999 + 'px';\n    this.container.style.top = -999 + 'px';\n  };\n  Tooltip.prototype.isOutOfBounds = function () {\n    var offset = this.container.getBoundingClientRect();\n    var targetTop = offset.top;\n    var targetLeft = offset.left;\n    var width = this.domHandler.getOuterWidth(this.container);\n    var height = this.domHandler.getOuterHeight(this.container);\n    var viewport = this.domHandler.getViewport();\n    return targetLeft + width > viewport.width || targetLeft < 0 || targetTop < 0 || targetTop + height > viewport.height;\n  };\n  Tooltip.prototype.bindDocumentResizeListener = function () {\n    var _this = this;\n    this.documentResizeListener = this.renderer.listen('window', 'resize', function (event) {\n      _this.hide();\n    });\n  };\n  Tooltip.prototype.unbindDocumentResizeListener = function () {\n    if (this.documentResizeListener) {\n      this.documentResizeListener();\n      this.documentResizeListener = null;\n    }\n  };\n  Tooltip.prototype.destroy = function () {\n    this.unbindDocumentResizeListener();\n    if (this.container && this.container.parentElement) {\n      if (this.appendTo === 'body') document.body.removeChild(this.container);else if (this.appendTo === 'target') this.el.nativeElement.removeChild(this.container);else this.domHandler.removeChild(this.container, this.appendTo);\n    }\n    this.container = null;\n  };\n  Tooltip.prototype.ngOnDestroy = function () {\n    this.destroy();\n  };\n  return Tooltip;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tooltip.prototype, \"tooltipPosition\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tooltip.prototype, \"tooltipEvent\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Tooltip.prototype, \"appendTo\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tooltip.prototype, \"positionStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tooltip.prototype, \"tooltipStyleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tooltip.prototype, \"tooltipZIndex\", void 0);\n__decorate([core_1.Input(\"tooltipDisabled\"), __metadata(\"design:type\", Boolean)], Tooltip.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Tooltip.prototype, \"escape\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Tooltip.prototype, \"showDelay\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Tooltip.prototype, \"hideDelay\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Tooltip.prototype, \"life\", void 0);\n__decorate([core_1.HostListener('mouseenter', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Event]), __metadata(\"design:returntype\", void 0)], Tooltip.prototype, \"onMouseEnter\", null);\n__decorate([core_1.HostListener('mouseleave', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Event]), __metadata(\"design:returntype\", void 0)], Tooltip.prototype, \"onMouseLeave\", null);\n__decorate([core_1.HostListener('focus', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Event]), __metadata(\"design:returntype\", void 0)], Tooltip.prototype, \"onFocus\", null);\n__decorate([core_1.HostListener('blur', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Event]), __metadata(\"design:returntype\", void 0)], Tooltip.prototype, \"onBlur\", null);\n__decorate([core_1.HostListener('click', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Event]), __metadata(\"design:returntype\", void 0)], Tooltip.prototype, \"onClick\", null);\n__decorate([core_1.Input('pTooltip'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], Tooltip.prototype, \"text\", null);\nTooltip = __decorate([core_1.Directive({\n  selector: '[pTooltip]',\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])], Tooltip);\nexports.Tooltip = Tooltip;\nvar TooltipModule = function () {\n  function TooltipModule() {}\n  return TooltipModule;\n}();\nTooltipModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Tooltip],\n  declarations: [Tooltip]\n})], TooltipModule);\nexports.TooltipModule = TooltipModule;\n//# sourceMappingURL=tooltip.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}