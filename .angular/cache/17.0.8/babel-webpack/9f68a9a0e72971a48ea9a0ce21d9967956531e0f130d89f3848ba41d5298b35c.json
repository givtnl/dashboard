{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/observable/forkJoin';\nimport { Card } from '../models/card';\nimport { sprintf } from 'sprintf-js';\nlet DashboardComponent = class DashboardComponent {\n  get currencySymbol() {\n    return this.userService.currencySymbol;\n  }\n  constructor(apiService, translate, datePipe, userService) {\n    this.apiService = apiService;\n    this.datePipe = datePipe;\n    this.userService = userService;\n    this.daysOfWeek = [\"Text_LastSunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    this.cards = [];\n    this.lastSundayCard = new Card();\n    this.thisMonthCard = new Card();\n    this.thisMonthGiversCard = new Card();\n    this.todaysCard = new Card();\n    this.todaysGiversCard = new Card();\n    this.averageGiversCard = new Card();\n    this.ShowLoadingAnimation = false;\n    this.translate = translate;\n    this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    this.ShowLoadingAnimation = true;\n    this.userService.collectGroupChanged.subscribe(() => {\n      this.ShowLoadingAnimation = true;\n      this.ngOnInit();\n    });\n    this.userService.userLoggedOut.subscribe(() => {\n      clearInterval(this.continuousData);\n    });\n  }\n  ngOnDestroy() {\n    clearInterval(this.continuousData);\n  }\n  ngOnInit() {\n    let f0 = this.fetchAverageGivers();\n    let f1 = this.fetchThisMonthGivts();\n    let f2 = this.fetchThisMonthGivers();\n    let f3 = this.fetchLastDayGivts();\n    let f4 = this.fetchTodayGivts();\n    let f5 = this.fetchTodayGivers();\n    Promise.all([f0, f1, f2, f3, f4, f5]).then(() => {\n      if (this.ShowLoadingAnimation) this.ShowLoadingAnimation = false;\n    });\n    this.continuousData = setInterval(() => {\n      let f1 = this.fetchThisMonthGivts();\n      let f2 = this.fetchThisMonthGivers();\n      let f3 = this.fetchLastDayGivts();\n      let f4 = this.fetchTodayGivts();\n      let f5 = this.fetchTodayGivers();\n    }, 15000);\n  }\n  fetchTodayGivers() {\n    let dtEnd = this.datePipe.transform(new Date().setDate(new Date().getDate()), \"yyyy-MM-ddT23:59:59.999\" + this.datePipe.getLocalTimeZoneISOString());\n    let dtBegin = this.datePipe.transform(new Date().setDate(new Date().getDate()), \"yyyy-MM-ddT00:00:00.000\" + this.datePipe.getLocalTimeZoneISOString());\n    let params = \"DateBegin=\" + this.datePipe.toISODateUTC(new Date(dtBegin)) + \"&DateEnd=\" + this.datePipe.toISODateUTC(new Date(dtEnd));\n    return this.apiService.getData(\"Cards/Users/?\" + params).then(resp => {\n      this.todaysGiversCard.value = \"<span class='fat-emphasis'>\" + resp + \"</span>\";\n      this.translate.get(\"Text_Today_Givers\").subscribe(value => {\n        this.todaysGiversCard.title = value;\n      });\n      let cardIsInCards = false;\n      for (let i in this.cards) {\n        if (this.cards[i].title === this.todaysGiversCard.title) {\n          cardIsInCards = true;\n        }\n      }\n      if (!cardIsInCards) {\n        this.cards.push(this.todaysGiversCard);\n      }\n    });\n  }\n  fetchTodayGivts() {\n    let dtEnd = this.datePipe.transform(new Date().setDate(new Date().getDate()), \"yyyy-MM-ddT23:59:59.999\" + this.datePipe.getLocalTimeZoneISOString());\n    let dtBegin = this.datePipe.transform(new Date().setDate(new Date().getDate()), \"yyyy-MM-ddT00:00:00.000\" + this.datePipe.getLocalTimeZoneISOString());\n    let params = \"DateBegin=\" + this.datePipe.toISODateUTC(new Date(dtBegin)) + \"&DateEnd=\" + this.datePipe.toISODateUTC(new Date(dtEnd));\n    return this.apiService.getData(\"Cards/Givts/?\" + params).then(resp => {\n      if (resp) {\n        let collectSum = resp.TotalAmount;\n        let average = 0;\n        if (collectSum != 0) {\n          average = collectSum / resp.TransactionCount;\n        }\n        this.todaysCard.value = this.currencySymbol + \"<span class='fat-emphasis'>\" + (this.isSafari ? collectSum.toFixed(2) : collectSum.toLocaleString(navigator.language, {\n          minimumFractionDigits: 2\n        })) + \"</span>\";\n        this.translate.get(\"Text_Today\").subscribe(value => {\n          this.todaysCard.title = value;\n        });\n        var donation = \"\";\n        this.translate.get(\"Text_Donation\").subscribe(value => {\n          donation = value;\n        });\n        this.translate.get(\"Text_Given\").subscribe(value => {\n          this.todaysCard.footer = value + \" per \" + donation;\n        });\n        this.translate.get(\"Card_Average\").subscribe(value => {\n          this.todaysCard.average = value + \" \" + this.currencySymbol + average.toLocaleString(navigator.language, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          });\n        });\n        let cardIsInCards = false;\n        for (let i in this.cards) {\n          if (this.cards[i].title === this.todaysCard.title) {\n            cardIsInCards = true;\n          }\n        }\n        if (!cardIsInCards) {\n          this.cards.push(this.todaysCard);\n        }\n      }\n    });\n  }\n  fetchThisMonthGivers() {\n    let date = new Date();\n    let month = date.getUTCMonth() + 1;\n    let year = date.getFullYear();\n    let secondYear = date.getFullYear();\n    let nextMonth = month + 1;\n    if (month == 12) {\n      secondYear = date.getFullYear() + 1;\n      nextMonth = 1;\n    }\n    let dateBegin = new Date(sprintf(\"%4i-%02i-01T00:00:00.000%s\", year, month, this.datePipe.getLocalTimeZoneISOString()));\n    let dateEnd = new Date(sprintf(\"%4i-%02i-01T00:00:00.000%s\", secondYear, nextMonth, this.datePipe.getLocalTimeZoneISOString()));\n    let params = \"DateBegin=\" + this.datePipe.toISODateUTC(new Date(dateBegin)) + \"&DateEnd=\" + this.datePipe.toISODateUTC(new Date(dateEnd));\n    return this.apiService.getData(\"Cards/Users/?\" + params).then(resp => {\n      this.thisMonthGiversCard.value = \"<span class='fat-emphasis'>\" + resp + \"</span>\";\n      this.translate.get(\"Text_Givers\").subscribe(value => {\n        this.thisMonthGiversCard.title = value;\n      });\n      this.thisMonthGiversCard.subtitle = new Date().toLocaleDateString(navigator.language, {\n        year: 'numeric',\n        month: 'long'\n      });\n      this.translate.get(\"Text_GiversLowercase\").subscribe(value => {\n        this.thisMonthGiversCard.footer = value;\n      });\n      let cardIsInCards = false;\n      for (let i in this.cards) {\n        if (this.cards[i].title === this.thisMonthGiversCard.title) {\n          cardIsInCards = true;\n        }\n      }\n      if (!cardIsInCards) {\n        this.cards.push(this.thisMonthGiversCard);\n      }\n    });\n  }\n  fetchAverageGivers() {\n    return this.apiService.getData(\"v2/collectgroups/\" + this.userService.CurrentCollectGroup.GUID + \"/cards/user-average\").then(resp => {\n      this.averageGiversCard.value = \"<span class='fat-emphasis'>\" + resp + \"</span>\";\n      //this.averageGiversCard.subtitle = new Date().toLocaleDateString(navigator.language, { year: 'numeric', month: 'long'});\n      this.translate.get(\"Card_AverageGivers\").subscribe(value => {\n        this.averageGiversCard.title = value;\n      });\n      this.translate.get(\"Card_Weekly\").subscribe(value => {\n        this.averageGiversCard.footer = value;\n      });\n      let cardIsInCards = false;\n      for (let i in this.cards) {\n        if (this.cards[i].title === this.averageGiversCard.title) {\n          cardIsInCards = true;\n        }\n      }\n      if (!cardIsInCards) {\n        this.cards.push(this.averageGiversCard);\n      }\n    });\n  }\n  fetchThisMonthGivts() {\n    let date = new Date();\n    let month = date.getUTCMonth() + 1;\n    let year = date.getFullYear();\n    let secondYear = date.getFullYear();\n    let nextMonth = month + 1;\n    if (month == 12) {\n      secondYear = date.getFullYear() + 1;\n      nextMonth = 1;\n    }\n    let dateBegin = new Date(sprintf(\"%4i-%02i-01T00:00:00.000%s\", year, month, this.datePipe.getLocalTimeZoneISOString()));\n    let dateEnd = new Date(sprintf(\"%4i-%02i-01T00:00:00.000%s\", secondYear, nextMonth, this.datePipe.getLocalTimeZoneISOString()));\n    let params = \"DateBegin=\" + this.datePipe.toISODateUTC(new Date(dateBegin)) + \"&DateEnd=\" + this.datePipe.toISODateUTC(new Date(dateEnd));\n    return this.apiService.getData(\"Cards/Givts/?\" + params).then(resp => {\n      if (resp) {\n        let collectSum = resp.TotalAmount;\n        let average = 0;\n        if (collectSum != 0) {\n          average = collectSum / resp.TransactionCount;\n        }\n        this.thisMonthCard.value = this.currencySymbol + \"<span class='fat-emphasis'>\" + (this.isSafari ? collectSum.toFixed(2) : collectSum.toLocaleString(navigator.language, {\n          minimumFractionDigits: 2\n        })) + \"</span>\";\n        this.translate.get(\"Text_ThisMonth\").subscribe(value => {\n          this.thisMonthCard.title = value;\n        });\n        var donation = \"\";\n        this.translate.get(\"Text_Donation\").subscribe(value => {\n          donation = value;\n        });\n        this.translate.get(\"Text_Given\").subscribe(value => {\n          this.thisMonthCard.footer = value + \" per \" + donation;\n        });\n        this.thisMonthCard.subtitle = new Date().toLocaleDateString(navigator.language, {\n          year: 'numeric',\n          month: 'long'\n        });\n        this.translate.get(\"Card_Average\").subscribe(value => {\n          this.thisMonthCard.average = value + \" \" + this.currencySymbol + average.toLocaleString(navigator.language, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          });\n        });\n        let cardIsInCards = false;\n        for (let i in this.cards) {\n          if (this.cards[i].title === this.thisMonthCard.title) {\n            cardIsInCards = true;\n          }\n        }\n        if (!cardIsInCards) {\n          this.cards.push(this.thisMonthCard);\n        }\n      }\n    });\n  }\n  fetchLastDayGivts() {\n    let dtEnd = this.datePipe.transform(new Date(), \"yyyy-MM-ddT23:59:59.999\" + this.datePipe.getLocalTimeZoneISOString());\n    let dtBegin = this.datePipe.transform(new Date().setDate(new Date().getDate() - 6), \"yyyy-MM-ddT00:00:00.000\" + this.datePipe.getLocalTimeZoneISOString());\n    let dateEnd = new Date(dtEnd);\n    let dateBegin = new Date(dtBegin);\n    return this.apiService.getData(\"v2/collectgroups/\" + this.userService.CurrentCollectGroup.GUID + \"/givts/view/search?dtBegin=\" + this.datePipe.toISODateUTC(dateBegin) + \"&dtEnd=\" + this.datePipe.toISODateUTC(dateEnd)).then(resp => {\n      if (resp.statusCode == 500) return;\n      let highest = resp.reduce((rv, x) => {\n        if (rv && rv.length > 0) {\n          let idx = rv.findIndex(rvx => rvx.Date == x.Date);\n          if (idx > -1) {\n            rv[idx] = {\n              Sum: rv[idx].Sum + x.Sum,\n              Count: rv[idx].Count + x.Count,\n              Date: rv[idx].Date\n            };\n          } else rv.push(x);\n        } else {\n          rv = [];\n          rv.push(x);\n        }\n        return rv;\n      }, []).reduce((rv, x) => {\n        if (rv && x.Count > rv.Count) return x;else return rv;\n      }, {\n        Sum: 0,\n        Count: 0,\n        Date: new Date()\n      });\n      let displayDate = new Date(highest.Date);\n      let collectSum = highest.Sum;\n      let average = 0;\n      if (collectSum != 0) {\n        average = collectSum / highest.Count;\n      }\n      this.lastSundaySum = collectSum;\n      this.lastSundayCard.value = this.currencySymbol + \"<span class='fat-emphasis'>\" + (this.isSafari ? collectSum.toFixed(2) : collectSum.toLocaleString(navigator.language, {\n        minimumFractionDigits: 2\n      })) + \"</span>\";\n      var donation = \"\";\n      this.translate.get(\"Text_Donation\").subscribe(value => {\n        donation = value;\n      });\n      this.translate.get(\"Text_Given\").subscribe(value => {\n        this.lastSundayCard.footer = value + \" per \" + donation;\n      });\n      this.translate.get([\"LastCollectDay\", this.daysOfWeek[displayDate.getDay()]]).subscribe(val => {\n        this.lastSundayCard.title = val[\"LastCollectDay\"];\n        this.lastSundayCard.subtitle = val[this.daysOfWeek[displayDate.getDay()]] + \" \" + displayDate.toLocaleDateString(navigator.language, {\n          day: 'numeric',\n          year: 'numeric',\n          month: 'long'\n        });\n      });\n      this.translate.get(\"Card_Average\").subscribe(value => {\n        this.lastSundayCard.average = value + \" \" + this.currencySymbol + average.toLocaleString(navigator.language, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        });\n      });\n      let cardIsInCards = false;\n      for (let i in this.cards) {\n        if (this.cards[i].title === this.lastSundayCard.title) {\n          cardIsInCards = true;\n        }\n      }\n      if (!cardIsInCards) {\n        this.cards.push(this.lastSundayCard);\n      }\n    });\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'my-dashboard',\n  templateUrl: '../html/dashboard.component.html',\n  styleUrls: ['../css/dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}