{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { ViewEncapsulation } from '@angular/core';\nimport { PaymentType } from '../../models/paymentType';\nimport { isNullOrUndefined } from 'util';\nlet PayoutComponent = class PayoutComponent {\n  ngOnInit() {\n    this.calculateCosts(this.paymentType);\n  }\n  displayValue(x) {\n    let currencySymbol = this.userService.currencySymbol;\n    if (!navigator.language.includes('en')) currencySymbol += ' ';\n    return currencySymbol + (this.isSafari ? x.toFixed(2) : x.toLocaleString(navigator.language, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }));\n  }\n  constructor(apiClient, translate, datePipe, userService) {\n    this.apiClient = apiClient;\n    this.translate = translate;\n    this.datePipe = datePipe;\n    this.userService = userService;\n    this.name = '';\n    this.paymentTypeEnum = PaymentType;\n    this.paymentType = PaymentType.Undefined;\n    this.giftAid = false;\n    this.showCosts = false;\n    this.giftAid = this.userService.CurrentCollectGroup.TaxDeductionType == 'GiftAid';\n    this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    this.name = 'Testen';\n    this.paymentType = this.userService.CurrentCollectGroup.PaymentType;\n    this.translate.get((() => {\n      switch (this.paymentType) {\n        case PaymentType.SEPA:\n          return 'Text_TransactionCost_MoreInfo';\n        case PaymentType.BACS:\n          return 'Text_TransactionCost_MoreInfo_GB';\n        case PaymentType.CreditCard:\n        default:\n          return 'Text_TransactionCost_MoreInfo_US';\n      }\n    })()).subscribe(res => {\n      this.moreInfoToolTip = res;\n    });\n    this.translate.get('Text_Stornos_MoreInfo').subscribe(res => {\n      this.moreInfoStornos = res;\n    });\n    if (this.paymentType === PaymentType.BACS) {\n      this.moreInfoStornos = this.moreInfoStornos.replace('SlimPay', 'Access PaySuite');\n    } else {\n      console.log('Undefined payment type');\n    }\n  }\n  calculateCosts(paymentType) {\n    this.dtBegin = new Date(this.childData.BeginDate);\n    this.dtEnd = new Date(this.childData.EndDate);\n    this.dtExecuted = new Date(this.childData.dtExecuted);\n    let x = this.childData;\n    x.BeginDate = this.datePipe.transform(new Date(this.childData.BeginDate), 'd MMMM y');\n    x.EndDate = this.datePipe.transform(new Date(this.childData.EndDate), 'd MMMM y');\n    x.dtExecuted = this.datePipe.transform(new Date(this.childData.dtExecuted), 'd MMMM y');\n    if (!isNullOrUndefined(x.PaymentProviderExecutionDate)) x.PaymentProviderExecutionDate = this.datePipe.transform(new Date(this.childData.PaymentProviderExecutionDate), 'd MMMM y');\n    paymentType === PaymentType.SEPA ? x.Mandaatkosten = x.MandateCost : x.Mandaatkosten = 0;\n    x.Transactiekosten = x.TransactionCost;\n    x.Uitbetalingskosten = x.PayoutCost;\n    x.T_Total_Excl = x.Mandaatkosten + x.Transactiekosten + x.Uitbetalingskosten;\n    x.T_BTW = x.MandateTaxes + x.TransactionTaxes + x.PayoutCostTaxes;\n    x.T_Total_Incl = x.T_Total_Excl + x.T_BTW;\n    x.SK_Total_Incl = x.RTransactionT1Cost + x.RTransactionT2Cost + x.RTransactionTaxes;\n    x.G_Total_Incl = x.GivtServiceFee + x.GivtServiceFeeTaxes;\n    //tr fee + storno fee + givt fee + storno bedragen\n    x.TotaalKosten = x.T_Total_Incl + x.SK_Total_Incl + x.G_Total_Incl;\n    x.TotaalInhoudingen = x.TotaalKosten + x.RTransactionAmount;\n    x.ToegezegdBedrag = x.TotaalInhoudingen + x.TotalPaid;\n    this.pledgedAmount = x.ToegezegdBedrag;\n    paymentType === PaymentType.SEPA ? x.Mandaatkosten = this.displayValue(x.Mandaatkosten) : x.Mandaatkosten = 0;\n    x.Transactiekosten = this.displayValue(x.Transactiekosten);\n    x.UitbetalingskostenIncl = this.displayValue(x.PayoutCost + x.PayoutCostTaxes);\n    x.UitbetalingskostenFormatted = this.displayValue(x.Uitbetalingskosten);\n    x.T_Total_Excl = this.displayValue(x.T_Total_Excl);\n    x.T_BTW = this.displayValue(x.T_BTW);\n    x.T_Total_Incl = this.displayValue(x.T_Total_Incl);\n    // storno kost\n    x.StorneringsKostenT1 = this.displayValue(x.RTransactionT1Cost);\n    paymentType === PaymentType.SEPA ? x.StorneringsKostenT2 = this.displayValue(x.RTransactionT2Cost) : x.StorneringsKostenT2 = 0;\n    paymentType === PaymentType.SEPA ? x.SK_Total_Excl = this.displayValue(x.RTransactionT1Cost + x.RTransactionT2Cost) : x.SK_Total_Excl = this.displayValue(x.RTransactionT1Cost);\n    x.SK_BTW = this.displayValue(x.RTransactionTaxes);\n    x.SK_Total_Incl = this.displayValue(x.SK_Total_Incl);\n    x.G_Total_Excl = this.displayValue(x.GivtServiceFee);\n    x.G_BTW = this.displayValue(x.GivtServiceFeeTaxes);\n    x.G_Total_Incl = this.displayValue(x.G_Total_Incl);\n    x.GestorneerdeBedragen = this.displayValue(x.RTransactionAmount);\n    x.TotaalKosten = this.displayValue(x.TotaalKosten);\n    x.TotaalInhoudingen = this.displayValue(x.TotaalInhoudingen);\n    x.ToegezegdBedrag = this.displayValue(x.ToegezegdBedrag);\n    x.hiddenOverview = true;\n    x.hiddenAllocations = true;\n    x.TotalPaidText = this.displayValue(x.TotalPaid);\n    let transactionCost = 0.0;\n    let RTransactionT1Cost = 0.0;\n    if (paymentType === PaymentType.SEPA) {\n      let mandateCost = x.MandateCostCount > 0 ? x.MandateCost / x.MandateCostCount : 0.125;\n      this.translate.get('Text_Info_Mandate', {\n        0: x.MandateCostCount,\n        2: this.isSafari ? mandateCost.toFixed(3) : mandateCost.toLocaleString(navigator.language, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3\n        }),\n        1: this.userService.currencySymbol\n      }).subscribe(res => {\n        x.Text_Info_Mandate = res;\n      });\n      let RTransactionT2Cost = x.RTransactionT2Count > 0 ? x.RTransactionT2Cost / x.RTransactionT2Count : 0;\n      this.translate.get('Text_Info_Type2', {\n        0: x.RTransactionT2Count,\n        2: this.isSafari ? RTransactionT2Cost.toFixed(2) : RTransactionT2Cost.toLocaleString(navigator.language, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        }),\n        1: this.userService.currencySymbol\n      }).subscribe(res => {\n        x.Text_Info_Type2 = res;\n      });\n      RTransactionT1Cost = x.RTransactionT1Count > 0 ? x.RTransactionT1Cost / x.RTransactionT1Count : 0;\n      transactionCost = x.TransactionCount > 0 ? x.TransactionCost / x.TransactionCount : 0.6;\n    } else if (paymentType == PaymentType.BACS) {\n      RTransactionT1Cost = x.RTransactionT1Count > 0 ? x.RTransactionT1Cost / x.RTransactionT1Count : 0;\n      transactionCost = x.TransactionCount > 0 ? x.TransactionCost / x.TransactionCount : 0.14;\n      if (this.giftAid) {\n        // extra amount through giftaid\n        x.extraGiftAidAmount = isNullOrUndefined(x.GiftAidAmountPayedByGovernment) ? 0 : x.GiftAidAmountPayedByGovernment;\n        x.extraGiftAidedByGovernment = this.displayValue(x.GiftAidAmountPayedByGovernment);\n        // gift aided more info\n        this.translate.get('GiftAidPayoutMoreInfo').subscribe(res => {\n          x.moreInfoGiftAid = res;\n        });\n        x.TotalText = this.displayValue(x.extraGiftAidAmount + x.TotalPaid);\n        x.GiftAidAmountText = this.displayValue(x.extraGiftAidAmount);\n        x.GASDSAmount = this.displayValue(x.GASDSAmount);\n      }\n    } else if (paymentType == PaymentType.CreditCard) {\n      transactionCost = x.TransactionCount > 0 ? x.TransactionCost / x.TransactionCount : 0.15;\n    }\n    this.translate.get('Text_Info_Transaction', {\n      0: x.TransactionCount,\n      2: this.isSafari ? transactionCost.toFixed(2) : transactionCost.toLocaleString(navigator.language, {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      }),\n      1: this.userService.currencySymbol\n    }).subscribe(res => {\n      x.Text_Info_Transaction = res;\n    });\n    this.translate.get('Text_Info_Type1', {\n      0: x.RTransactionT1Count,\n      1: this.userService.currencySymbol,\n      2: this.isSafari ? RTransactionT1Cost.toFixed(2) : RTransactionT1Cost.toLocaleString(navigator.language, {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      })\n    }).subscribe(res => {\n      x.Text_Info_Type1 = res;\n    });\n    x.activeRow = 1;\n  }\n  openPayout() {\n    this.childData.hiddenAllocations = true;\n    this.childData.hiddenOverview = !this.childData.hiddenOverview;\n  }\n  openAllocations() {\n    this.fetchPayoutDetail();\n    this.childData.hiddenOverview = true;\n    this.childData.hiddenAllocations = !this.childData.hiddenAllocations;\n  }\n  closeOverview() {\n    this.childData.hiddenOverview = true;\n  }\n  closeAllocations() {\n    this.childData.hiddenAllocations = true;\n  }\n  selectRow(x, y) {\n    x.activeRow = y;\n  }\n  fetchPayoutDetail() {\n    this.translate.get('NonAllocatedCollect').subscribe(res => {\n      this.apiClient.getData(`Payments/PayoutDetail?payoutID=${this.childData.Id}`).then(resp => {\n        let allocsCount = resp.Details.length;\n        let stornoDetails = [];\n        let paidDetails = [];\n        for (let i = 0; i < allocsCount; i++) {\n          let detail = resp.Details[i];\n          detail.Date = this.datePipe.transform(new Date(detail.Date), 'dd-MM-yyyy');\n          detail.Status = 1;\n          // PAID details\n          if ((detail.Amount !== 0 || detail.GiftAidClaimAmount !== 0) && detail.StornoAmount == 0) {\n            if (isNullOrUndefined(detail.GiftAidClaimAmountFromGovernment)) detail.GiftAidClaimAmountFromGovernment = 0.00;\n            detail.Total = detail.GiftAidClaimAmountFromGovernment + detail.Amount;\n            detail.Amount = this.displayValue(detail.Amount);\n            detail.GiftAidClaimAmountFromGovernment = this.displayValue(detail.GiftAidClaimAmountFromGovernment);\n            detail.Total = this.displayValue(detail.Total);\n            detail.GASDSClaimAmount = this.displayValue(detail.GASDSClaimAmount);\n            if (detail.Name.includes('_ERRNAC')) {\n              if (detail.Name.includes('1')) detail.Name = res + ' 1';\n              if (detail.Name.includes('2')) detail.Name = res + ' 2';\n              if (detail.Name.includes('3')) detail.Name = res + ' 3';\n              detail.Status = 2;\n            }\n            paidDetails.push(detail);\n          } else if (detail.GASDSClaimAmount > 0) {\n            detail.GASDSClaimAmount = this.displayValue(detail.GASDSClaimAmount);\n            detail.Amount = this.displayValue(0);\n            detail.GiftAidClaimAmountFromGovernment = this.displayValue(0);\n            detail.Total = this.displayValue(0);\n            if (detail.Name.includes('_ERRNAC')) {\n              if (detail.Name.includes('1')) detail.Name = res + ' 1';\n              if (detail.Name.includes('2')) detail.Name = res + ' 2';\n              if (detail.Name.includes('3')) detail.Name = res + ' 3';\n              detail.Status = 2;\n            }\n            paidDetails.push(detail);\n          }\n          // STORNO details\n          if (detail.Amount !== 0 && detail.StornoAmount !== 0) {\n            if (isNullOrUndefined(detail.GiftAidClaimAmountFromGovernment)) detail.GiftAidClaimAmountFromGovernment = 0.00;\n            if (!isNullOrUndefined(detail.GiftAidClaimReturnedAmountFromGovernment)) detail.GiftAidClaimAmountFromGovernment = detail.GiftAidClaimAmountFromGovernment - detail.GiftAidClaimReturnedAmountFromGovernment;\n            detail.Total = detail.GiftAidClaimAmountFromGovernment + detail.Amount;\n            detail.Amount = this.displayValue(detail.Amount);\n            detail.GiftAidClaimAmountFromGovernment = this.displayValue(detail.GiftAidClaimAmountFromGovernment);\n            detail.Total = this.displayValue(detail.Total);\n            detail.GASDSClaimAmount = this.displayValue(detail.GASDSClaimAmount);\n            if (detail.Name.includes('_ERRNAC')) {\n              if (detail.Name.includes('1')) detail.Name = res + ' 1';\n              if (detail.Name.includes('2')) detail.Name = res + ' 2';\n              if (detail.Name.includes('3')) detail.Name = res + ' 3';\n              detail.Status = 2;\n            }\n            stornoDetails.push(detail);\n          }\n        }\n        let costDetails = [];\n        this.translate.get('Stornos').subscribe(resStorno => {\n          for (let i = 0; i < allocsCount; i++) {\n            if (resp.Details[i].StornoAmount == 0 && resp.Details[i].GiftAidClaimReturnedAmountFromGovernment == 0) continue;\n            let copy = JSON.parse(JSON.stringify(resp.Details[i])); //copy object\n            if (copy.Name.includes(\"_ERRNAC\")) {\n              copy.Name = copy.Name.replace(\"_ERRNAC\", res);\n            }\n            copy.Name += ': ' + resStorno;\n            copy.Amount = '- ' + this.displayValue(resp.Details[i].StornoAmount);\n            if (isNullOrUndefined(copy.GiftAidClaimReturnedAmountFromGovernment)) copy.GiftAidClaimReturnedAmountFromGovernment = 0.00;\n            copy.Total = copy.GiftAidClaimReturnedAmountFromGovernment + resp.Details[i].StornoAmount;\n            copy.GiftAidClaimAmountFromGovernment = '- ' + this.displayValue(copy.GiftAidClaimReturnedAmountFromGovernment);\n            copy.Total = '- ' + this.displayValue(copy.Total);\n            copy.GASDSClaimAmount = this.displayValue(0);\n            copy.Status = 0;\n            costDetails.push(copy);\n          }\n        });\n        this.childData.details = paidDetails.concat(stornoDetails, costDetails);\n      });\n    });\n  }\n  getPosition(string, subString, index) {\n    return string.split(subString, index).join(subString).length;\n  }\n  exportCSV() {\n    this.loader['show'] = true;\n    let dtStart = new Date(this.dtExecuted);\n    let dtEnd = new Date(this.dtExecuted);\n    dtStart.setDate(dtStart.getDate() - 1);\n    dtEnd.setDate(dtEnd.getDate() + 1);\n    let start = this.datePipe.toISODateUTC(dtStart);\n    let end = this.datePipe.toISODateUTC(dtEnd);\n    let apiUrl = 'v2/organisations/' + this.userService.CurrentCollectGroup.OrgId + '/collectgroups/' + this.userService.CurrentCollectGroup.GUID + '/payments/' + this.childData.Id + '/export';\n    this.apiClient.getData(apiUrl).then(resp => {\n      this.loader['show'] = false;\n      var csvContent = '';\n      if (!navigator.userAgent.match(/Edge/g)) {\n        csvContent += 'data:text/csv;charset=utf-8,';\n      }\n      csvContent += resp;\n      var encodedUri = encodeURI(csvContent);\n      var link = document.createElement('a');\n      link.setAttribute('href', encodedUri);\n      let fileDate = this.datePipe.transform(new Date(this.dtExecuted), 'dd-MM-yyyy');\n      let fileName = `${this.userService.CurrentCollectGroup.Name}_${fileDate}.csv`;\n      link.setAttribute('download', fileName);\n      document.body.appendChild(link); // Required for FF\n      if (window.navigator.msSaveOrOpenBlob && navigator.userAgent.match(/Edge/g)) {\n        // for IE and Edge\n        var csvData = new Blob([resp], {\n          type: 'text/csv;charset=utf-8;'\n        });\n        window.navigator.msSaveBlob(csvData, fileName);\n      } else {\n        link.click(); // This will download the data file named \"my_data.csv\".\n      }\n    });\n  }\n};\n\n__decorate([Input()], PayoutComponent.prototype, \"childData\", void 0);\n__decorate([Input()], PayoutComponent.prototype, \"loader\", void 0);\nPayoutComponent = __decorate([Component({\n  selector: 'payout',\n  templateUrl: '../../html/children/payout.html',\n  encapsulation: ViewEncapsulation.None\n})], PayoutComponent);\nexport { PayoutComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}