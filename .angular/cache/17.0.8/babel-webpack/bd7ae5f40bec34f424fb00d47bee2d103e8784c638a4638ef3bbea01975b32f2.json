{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n    Port of jQuery MaskedInput by DigitalBush as a Native Angular2 Component in Typescript without jQuery\n    https://github.com/digitalBush/jquery.maskedinput/\n    \n    Copyright (c) 2007-2014 Josh Bush (digitalbush.com)\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar inputtext_1 = require(\"../inputtext/inputtext\");\nvar forms_1 = require(\"@angular/forms\");\nexports.INPUTMASK_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return InputMask;\n  }),\n  multi: true\n};\nvar InputMask = function () {\n  function InputMask(el, domHandler) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.type = 'text';\n    this.slotChar = '_';\n    this.autoClear = true;\n    this.onComplete = new core_1.EventEmitter();\n    this.onFocus = new core_1.EventEmitter();\n    this.onBlur = new core_1.EventEmitter();\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n  }\n  InputMask.prototype.ngOnInit = function () {\n    var ua = this.domHandler.getUserAgent();\n    this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);\n    this.initMask();\n  };\n  Object.defineProperty(InputMask.prototype, \"mask\", {\n    get: function () {\n      return this._mask;\n    },\n    set: function (val) {\n      this._mask = val;\n      this.initMask();\n      this.writeValue('');\n      this.onModelChange(this.value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  InputMask.prototype.initMask = function () {\n    this.tests = [];\n    this.partialPosition = this.mask.length;\n    this.len = this.mask.length;\n    this.firstNonMaskPos = null;\n    this.defs = {\n      '9': '[0-9]',\n      'a': '[A-Za-z]',\n      '*': '[A-Za-z0-9]'\n    };\n    var maskTokens = this.mask.split('');\n    for (var i = 0; i < maskTokens.length; i++) {\n      var c = maskTokens[i];\n      if (c == '?') {\n        this.len--;\n        this.partialPosition = i;\n      } else if (this.defs[c]) {\n        this.tests.push(new RegExp(this.defs[c]));\n        if (this.firstNonMaskPos === null) {\n          this.firstNonMaskPos = this.tests.length - 1;\n        }\n        if (i < this.partialPosition) {\n          this.lastRequiredNonMaskPos = this.tests.length - 1;\n        }\n      } else {\n        this.tests.push(null);\n      }\n    }\n    this.buffer = [];\n    for (var i = 0; i < maskTokens.length; i++) {\n      var c = maskTokens[i];\n      if (c != '?') {\n        if (this.defs[c]) this.buffer.push(this.getPlaceholder(i));else this.buffer.push(c);\n      }\n    }\n    this.defaultBuffer = this.buffer.join('');\n  };\n  InputMask.prototype.writeValue = function (value) {\n    this.value = value;\n    if (this.inputViewChild.nativeElement) {\n      if (this.value == undefined || this.value == null) this.inputViewChild.nativeElement.value = '';else this.inputViewChild.nativeElement.value = this.value;\n      this.checkVal();\n      this.focusText = this.inputViewChild.nativeElement.value;\n      this.updateFilledState();\n    }\n  };\n  InputMask.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  InputMask.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  InputMask.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  InputMask.prototype.caret = function (first, last) {\n    var range, begin, end;\n    if (!this.inputViewChild.nativeElement.offsetParent || this.inputViewChild.nativeElement !== document.activeElement) {\n      return;\n    }\n    if (typeof first == 'number') {\n      begin = first;\n      end = typeof last === 'number' ? last : begin;\n      if (this.inputViewChild.nativeElement.setSelectionRange) {\n        this.inputViewChild.nativeElement.setSelectionRange(begin, end);\n      } else if (this.inputViewChild.nativeElement['createTextRange']) {\n        range = this.inputViewChild.nativeElement['createTextRange']();\n        range.collapse(true);\n        range.moveEnd('character', end);\n        range.moveStart('character', begin);\n        range.select();\n      }\n    } else {\n      if (this.inputViewChild.nativeElement.setSelectionRange) {\n        begin = this.inputViewChild.nativeElement.selectionStart;\n        end = this.inputViewChild.nativeElement.selectionEnd;\n      } else if (document['selection'] && document['selection'].createRange) {\n        range = document['selection'].createRange();\n        begin = 0 - range.duplicate().moveStart('character', -100000);\n        end = begin + range.text.length;\n      }\n      return {\n        begin: begin,\n        end: end\n      };\n    }\n  };\n  InputMask.prototype.isCompleted = function () {\n    var completed;\n    for (var i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {\n      if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  InputMask.prototype.getPlaceholder = function (i) {\n    if (i < this.slotChar.length) {\n      return this.slotChar.charAt(i);\n    }\n    return this.slotChar.charAt(0);\n  };\n  InputMask.prototype.seekNext = function (pos) {\n    while (++pos < this.len && !this.tests[pos]);\n    return pos;\n  };\n  InputMask.prototype.seekPrev = function (pos) {\n    while (--pos >= 0 && !this.tests[pos]);\n    return pos;\n  };\n  InputMask.prototype.shiftL = function (begin, end) {\n    var i, j;\n    if (begin < 0) {\n      return;\n    }\n    for (i = begin, j = this.seekNext(end); i < this.len; i++) {\n      if (this.tests[i]) {\n        if (j < this.len && this.tests[i].test(this.buffer[j])) {\n          this.buffer[i] = this.buffer[j];\n          this.buffer[j] = this.getPlaceholder(j);\n        } else {\n          break;\n        }\n        j = this.seekNext(j);\n      }\n    }\n    this.writeBuffer();\n    this.caret(Math.max(this.firstNonMaskPos, begin));\n  };\n  InputMask.prototype.shiftR = function (pos) {\n    var i, c, j, t;\n    for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\n      if (this.tests[i]) {\n        j = this.seekNext(i);\n        t = this.buffer[i];\n        this.buffer[i] = c;\n        if (j < this.len && this.tests[j].test(t)) {\n          c = t;\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  InputMask.prototype.handleAndroidInput = function (e) {\n    var _this = this;\n    var curVal = this.inputViewChild.nativeElement.value;\n    var pos = this.caret();\n    if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\n      // a deletion or backspace happened\n      this.checkVal(true);\n      while (pos.begin > 0 && !this.tests[pos.begin - 1]) pos.begin--;\n      if (pos.begin === 0) {\n        while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin]) pos.begin++;\n      }\n      this.caret(pos.begin, pos.begin);\n    } else {\n      this.checkVal(true);\n      while (pos.begin < this.len && !this.tests[pos.begin - 1]) pos.begin++;\n      setTimeout(function () {\n        return _this.caret(pos.begin, pos.begin);\n      });\n    }\n    if (this.isCompleted()) {\n      this.onComplete.emit();\n    }\n  };\n  InputMask.prototype.onInputBlur = function (e) {\n    this.focus = false;\n    this.onModelTouched();\n    this.checkVal();\n    this.updateModel(e);\n    this.updateFilledState();\n    this.onBlur.emit(e);\n    if (this.inputViewChild.nativeElement.value != this.focusText) {\n      var event_1 = document.createEvent('HTMLEvents');\n      event_1.initEvent('change', true, false);\n      this.inputViewChild.nativeElement.dispatchEvent(event_1);\n    }\n  };\n  InputMask.prototype.onKeyDown = function (e) {\n    if (this.readonly) {\n      return;\n    }\n    var k = e.which || e.keyCode,\n      pos,\n      begin,\n      end;\n    var iPhone = /iphone/i.test(this.domHandler.getUserAgent());\n    this.oldVal = this.inputViewChild.nativeElement.value;\n    //backspace, delete, and escape get special treatment\n    if (k === 8 || k === 46 || iPhone && k === 127) {\n      pos = this.caret();\n      begin = pos.begin;\n      end = pos.end;\n      if (end - begin === 0) {\n        begin = k !== 46 ? this.seekPrev(begin) : end = this.seekNext(begin - 1);\n        end = k === 46 ? this.seekNext(end) : end;\n      }\n      this.clearBuffer(begin, end);\n      this.shiftL(begin, end - 1);\n      this.updateModel(e);\n      e.preventDefault();\n    } else if (k === 13) {\n      this.onInputBlur(e);\n      this.updateModel(e);\n    } else if (k === 27) {\n      this.inputViewChild.nativeElement.value = this.focusText;\n      this.caret(0, this.checkVal());\n      this.updateModel(e);\n      e.preventDefault();\n    }\n  };\n  InputMask.prototype.onKeyPress = function (e) {\n    var _this = this;\n    if (this.readonly) {\n      return;\n    }\n    var k = e.which || e.keyCode,\n      pos = this.caret(),\n      p,\n      c,\n      next,\n      completed;\n    if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {\n      return;\n    } else if (k && k !== 13) {\n      if (pos.end - pos.begin !== 0) {\n        this.clearBuffer(pos.begin, pos.end);\n        this.shiftL(pos.begin, pos.end - 1);\n      }\n      p = this.seekNext(pos.begin - 1);\n      if (p < this.len) {\n        c = String.fromCharCode(k);\n        if (this.tests[p].test(c)) {\n          this.shiftR(p);\n          this.buffer[p] = c;\n          this.writeBuffer();\n          next = this.seekNext(p);\n          if (/android/i.test(this.domHandler.getUserAgent())) {\n            //Path for CSP Violation on FireFox OS 1.1\n            var proxy = function () {\n              _this.caret(next);\n            };\n            setTimeout(proxy, 0);\n          } else {\n            this.caret(next);\n          }\n          if (pos.begin <= this.lastRequiredNonMaskPos) {\n            completed = this.isCompleted();\n          }\n        }\n      }\n      e.preventDefault();\n    }\n    this.updateModel(e);\n    this.updateFilledState();\n    if (completed) {\n      this.onComplete.emit();\n    }\n  };\n  InputMask.prototype.clearBuffer = function (start, end) {\n    var i;\n    for (i = start; i < end && i < this.len; i++) {\n      if (this.tests[i]) {\n        this.buffer[i] = this.getPlaceholder(i);\n      }\n    }\n  };\n  InputMask.prototype.writeBuffer = function () {\n    this.inputViewChild.nativeElement.value = this.buffer.join('');\n  };\n  InputMask.prototype.checkVal = function (allow) {\n    //try to place characters where they belong\n    var test = this.inputViewChild.nativeElement.value,\n      lastMatch = -1,\n      i,\n      c,\n      pos;\n    for (i = 0, pos = 0; i < this.len; i++) {\n      if (this.tests[i]) {\n        this.buffer[i] = this.getPlaceholder(i);\n        while (pos++ < test.length) {\n          c = test.charAt(pos - 1);\n          if (this.tests[i].test(c)) {\n            this.buffer[i] = c;\n            lastMatch = i;\n            break;\n          }\n        }\n        if (pos > test.length) {\n          this.clearBuffer(i + 1, this.len);\n          break;\n        }\n      } else {\n        if (this.buffer[i] === test.charAt(pos)) {\n          pos++;\n        }\n        if (i < this.partialPosition) {\n          lastMatch = i;\n        }\n      }\n    }\n    if (allow) {\n      this.writeBuffer();\n    } else if (lastMatch + 1 < this.partialPosition) {\n      if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\n        // Invalid value. Remove it and replace it with the\n        // mask, which is the default behavior.\n        if (this.inputViewChild.nativeElement.value) this.inputViewChild.nativeElement.value = '';\n        this.clearBuffer(0, this.len);\n      } else {\n        // Invalid value, but we opt to show the value to the\n        // user and allow them to correct their mistake.\n        this.writeBuffer();\n      }\n    } else {\n      this.writeBuffer();\n      this.inputViewChild.nativeElement.value = this.inputViewChild.nativeElement.value.substring(0, lastMatch + 1);\n    }\n    return this.partialPosition ? i : this.firstNonMaskPos;\n  };\n  InputMask.prototype.onInputFocus = function (event) {\n    var _this = this;\n    if (this.readonly) {\n      return;\n    }\n    this.focus = true;\n    clearTimeout(this.caretTimeoutId);\n    var pos;\n    this.focusText = this.inputViewChild.nativeElement.value;\n    pos = this.checkVal();\n    this.caretTimeoutId = setTimeout(function () {\n      if (_this.inputViewChild.nativeElement !== document.activeElement) {\n        return;\n      }\n      _this.writeBuffer();\n      if (pos == _this.mask.replace(\"?\", \"\").length) {\n        _this.caret(0, pos);\n      } else {\n        _this.caret(pos);\n      }\n    }, 10);\n    this.onFocus.emit(event);\n  };\n  InputMask.prototype.onInput = function (event) {\n    if (this.androidChrome) this.handleAndroidInput(event);else this.handleInputChange(event);\n  };\n  InputMask.prototype.handleInputChange = function (event) {\n    var _this = this;\n    if (this.readonly) {\n      return;\n    }\n    setTimeout(function () {\n      var pos = _this.checkVal(true);\n      _this.caret(pos);\n      _this.updateModel(event);\n      if (_this.isCompleted()) {\n        _this.onComplete.emit();\n      }\n    }, 0);\n  };\n  InputMask.prototype.getUnmaskedValue = function () {\n    var unmaskedBuffer = [];\n    for (var i = 0; i < this.buffer.length; i++) {\n      var c = this.buffer[i];\n      if (this.tests[i] && c != this.getPlaceholder(i)) {\n        unmaskedBuffer.push(c);\n      }\n    }\n    return unmaskedBuffer.join('');\n  };\n  InputMask.prototype.updateModel = function (e) {\n    this.onModelChange(this.unmask ? this.getUnmaskedValue() : e.target.value);\n  };\n  InputMask.prototype.updateFilledState = function () {\n    this.filled = this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '';\n  };\n  InputMask.prototype.ngOnDestroy = function () {};\n  return InputMask;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputMask.prototype, \"type\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputMask.prototype, \"slotChar\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], InputMask.prototype, \"autoClear\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputMask.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputMask.prototype, \"inputId\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputMask.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputMask.prototype, \"placeholder\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], InputMask.prototype, \"size\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], InputMask.prototype, \"maxlength\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputMask.prototype, \"tabindex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], InputMask.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], InputMask.prototype, \"readonly\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], InputMask.prototype, \"unmask\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputMask.prototype, \"name\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], InputMask.prototype, \"required\", void 0);\n__decorate([core_1.ViewChild('input'), __metadata(\"design:type\", core_1.ElementRef)], InputMask.prototype, \"inputViewChild\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], InputMask.prototype, \"onComplete\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], InputMask.prototype, \"onFocus\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], InputMask.prototype, \"onBlur\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], InputMask.prototype, \"mask\", null);\nInputMask = __decorate([core_1.Component({\n  selector: 'p-inputMask',\n  template: \"<input #input pInputText [attr.id]=\\\"inputId\\\" [attr.type]=\\\"type\\\" [attr.name]=\\\"name\\\" [ngStyle]=\\\"style\\\" [ngClass]=\\\"styleClass\\\" [attr.placeholder]=\\\"placeholder\\\"\\n        [attr.size]=\\\"size\\\" [attr.maxlength]=\\\"maxlength\\\" [attr.tabindex]=\\\"tabindex\\\" [disabled]=\\\"disabled\\\" [readonly]=\\\"readonly\\\" [attr.required]=\\\"required\\\"\\n        (focus)=\\\"onInputFocus($event)\\\" (blur)=\\\"onInputBlur($event)\\\" (keydown)=\\\"onKeyDown($event)\\\" (keypress)=\\\"onKeyPress($event)\\\"\\n        (input)=\\\"onInput($event)\\\" (paste)=\\\"handleInputChange($event)\\\">\",\n  host: {\n    '[class.ui-inputwrapper-filled]': 'filled',\n    '[class.ui-inputwrapper-focus]': 'focus'\n  },\n  providers: [exports.INPUTMASK_VALUE_ACCESSOR, domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler])], InputMask);\nexports.InputMask = InputMask;\nvar InputMaskModule = function () {\n  function InputMaskModule() {}\n  return InputMaskModule;\n}();\nInputMaskModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, inputtext_1.InputTextModule],\n  exports: [InputMask],\n  declarations: [InputMask]\n})], InputMaskModule);\nexports.InputMaskModule = InputMaskModule;\n//# sourceMappingURL=inputmask.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}