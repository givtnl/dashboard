{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ViewEncapsulation } from '@angular/core';\nimport { from } from 'rxjs/observable/from';\nimport { delay } from 'rxjs/operators';\nlet PayoutsComponent = class PayoutsComponent {\n  constructor(route, apiService, dataService, translate, datePipe, userService) {\n    this.route = route;\n    this.apiService = apiService;\n    this.dataService = dataService;\n    this.datePipe = datePipe;\n    this.userService = userService;\n    this.openAllocations = false;\n    this.loading = false;\n    this.payouts = [];\n    this.dateBegin = null;\n    this.dateEnd = null;\n    this.loader = {\n      show: false\n    };\n    this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    this.translate = translate;\n    this.dateBegin = new Date();\n    this.dateEnd = new Date();\n    this.dateBegin.setDate(this.dateBegin.getDate() - 7);\n    this.userService.collectGroupChanged.subscribe(() => {\n      this.ngOnInit();\n    });\n    if (!!this.dataService.getData('payoutDateBegin') && !!this.dataService.getData('payoutDateEnd')) {\n      this.dateBegin = new Date(Number(this.dataService.getData('payoutDateBegin')) * 1000);\n      this.dateEnd = new Date(Number(this.dataService.getData('payoutDateEnd')) * 1000);\n    }\n  }\n  checkAllocations() {\n    let apiUrl = 'v2/collectgroups/' + this.userService.CurrentCollectGroup.GUID + '/allocations/non-allocated/date-bounds';\n    this.apiService.getData(apiUrl).then(resp => {\n      if (resp) {\n        if (resp.length === 2) {\n          this.openAllocations = true;\n          let dtBegin = new Date(resp[0].dt_Confirmed);\n          let dtEnd = new Date(resp[1].dt_Confirmed);\n          this.openAllocationsMessage = this.translate.instant('MultipleOpenAllocationsMessage');\n          this.openAllocationsMessage = this.openAllocationsMessage.replace('{0}', dtBegin.toLocaleDateString(navigator.language, {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric'\n          }));\n          this.openAllocationsMessage = this.openAllocationsMessage.replace('{1}', dtEnd.toLocaleDateString(navigator.language, {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric'\n          }));\n        } else if (resp.length === 1) {\n          this.openAllocations = true;\n          let dtBegin = new Date(resp[0].dt_Confirmed);\n          this.openAllocationsMessage = this.translate.instant('SingleOpenAllocationMessage');\n          this.openAllocationsMessage = this.openAllocationsMessage.replace('{0}', dtBegin.toLocaleDateString(navigator.language, {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric'\n          }));\n        }\n      }\n    });\n  }\n  ngOnInit() {\n    this.checkAllocations();\n    this.loading = true;\n    from(this.apiService.getData('Payments/Payouts')).pipe(delay(500)).subscribe(resp => {\n      this.payouts = [];\n      if (resp.length > 0) {\n        this.payouts = resp;\n      }\n    }).add(() => this.loading = false);\n  }\n  displayValue(x) {\n    let currencySymbol = this.userService.currencySymbol;\n    if (!navigator.language.includes('en')) currencySymbol += ' ';\n    return currencySymbol + (this.isSafari ? x.toFixed(2) : x.toLocaleString(navigator.language, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }));\n  }\n  exportCSV() {\n    this.loader['show'] = true;\n    let start = this.datePipe.toISODateUTC(this.dateBegin);\n    let end = this.datePipe.toISODateUTC(this.dateEnd);\n    this.dataService.writeData('payoutDateBegin', Math.round(this.dateBegin.getTime() / 1000));\n    this.dataService.writeData('payoutDateEnd', Math.round(this.dateEnd.getTime() / 1000));\n    let apiUrl = 'v2/organisations/' + this.userService.CurrentCollectGroup.OrgId + '/collectgroups/' + this.userService.CurrentCollectGroup.GUID + '/payments/export?startDate=' + start + '&endDate=' + end;\n    this.apiService.getData(apiUrl).then(resp => {\n      this.loader['show'] = false;\n      var csvContent = '';\n      if (!navigator.userAgent.match(/Edge/g)) {\n        csvContent += 'data:text/csv;charset=utf-8,';\n      }\n      csvContent += resp;\n      var encodedUri = encodeURI(csvContent.replace('#', ''));\n      var link = document.createElement('a');\n      link.setAttribute('href', encodedUri);\n      let beginDate = this.datePipe.transform(new Date(this.dateBegin), 'dd-MM-yyyy');\n      let endDate = this.datePipe.transform(new Date(this.dateEnd), 'dd-MM-yyyy');\n      let fileName = this.userService.CurrentCollectGroup.Name + ' - ' + beginDate + ' - ' + endDate + '.csv';\n      link.setAttribute('download', fileName);\n      document.body.appendChild(link); // Required for FF\n      if (window.navigator.msSaveOrOpenBlob && navigator.userAgent.match(/Edge/g)) {\n        // for IE and Edge\n        var csvData = new Blob([resp], {\n          type: 'text/csv;charset=utf-8;'\n        });\n        window.navigator.msSaveBlob(csvData, fileName);\n      } else {\n        link.click(); // This will download the data file named \"my_data.csv\".\n      }\n    });\n  }\n};\n\nPayoutsComponent = __decorate([Component({\n  selector: 'my-collects',\n  templateUrl: '../html/payouts.component.html',\n  styleUrls: ['../css/payouts.component.css'],\n  encapsulation: ViewEncapsulation.None\n})], PayoutsComponent);\nexport { PayoutsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}