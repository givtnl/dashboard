{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { of } from 'rxjs/observable/of';\nimport 'rxjs/add/operator/switchMap';\nlet LoginComponent = class LoginComponent {\n  constructor(userService, router, translate, dataService, activatedRoute) {\n    this.userService = userService;\n    this.router = router;\n    this.translate = translate;\n    this.dataService = dataService;\n    this.activatedRoute = activatedRoute;\n    this.ShowLoadingAnimation = false;\n    this.passwordHidden = true;\n    this.eyeColor = \"#BCB9C9\";\n  }\n  ngOnInit() {\n    var access_token = this.activatedRoute.snapshot.queryParams.access_token;\n    var refresh_token = this.activatedRoute.snapshot.queryParams.refresh_token;\n    if (access_token !== null && refresh_token !== null) {\n      this.ShowLoadingAnimation = true;\n      this.userService.loginWithRefreshtoken(access_token, refresh_token).then(result => result ? this.router.navigate(['/dashboard']) : this.ShowLoadingAnimation = false).catch(result => this.ShowLoadingAnimation = false);\n    }\n    let is_safari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    if (is_safari) {\n      document.getElementById(\"pass-eye\").addEventListener(\"mousedown\", event => {\n        let hasFocus = $('#pass').is(':focus');\n        if (hasFocus) {\n          event.preventDefault(); //prevent dismissal of keyboard\n        }\n\n        ;\n      });\n    } else {\n      $('#pass-eye').click(event => {\n        event.preventDefault(); //prevent dismissal of keyboard\n        $('#pass').focus();\n      });\n    }\n  }\n  updateUserExtensionIfRequired() {\n    const currentLanguage = this.translate.getBrowserLang();\n    // get the current user\n    this.userService.getCurrentUser().switchMap(result => result.AppLanguage && result.AppLanguage.length > 0 ? of({}) : this.userService.patchLanguage(result.GUID, currentLanguage)).subscribe();\n  }\n  login() {\n    this.error_message = \"\";\n    if (!this.userName || !this.password) {\n      this.translate.get(\"Error_FillAllFieldsIn\").subscribe(value => {\n        this.error_message = value;\n      });\n      return;\n    }\n    this.ShowLoadingAnimation = true;\n    this.userService.login(this.userName, this.password).then(resp => {\n      this.ShowLoadingAnimation = false;\n      if (resp) {\n        if (this.userService.GivtOperations) this.router.navigate(['/mandate']);else {\n          this.updateUserExtensionIfRequired();\n          this.router.navigate(['/dashboard']);\n        }\n      } else {\n        this.router.navigate(['/unauthorized']);\n      }\n    }, error => {\n      this.ShowLoadingAnimation = false;\n      if (JSON.parse(error._body).error_description == \"LockedOut\") {\n        this.translate.get(\"Error_LockedOut\").subscribe(value => {\n          this.error_message = value;\n        });\n      } else {\n        this.translate.get(\"Error_WrongEmailOrPassword\").subscribe(value => {\n          this.error_message = value;\n        });\n      }\n    });\n  }\n  showPass() {\n    if (this.passwordHidden) {\n      this.passwordHidden = false;\n      document.getElementById(\"pass\").type = \"text\";\n      this.eyeColor = \"#41C98E\";\n    } else {\n      this.passwordHidden = true;\n      document.getElementById(\"pass\").type = \"password\";\n      this.eyeColor = \"#BCB9C9\";\n    }\n  }\n  forgotPW() {\n    this.router.navigate(['/forgotpassword'], {\n      queryParams: {\n        e: this.userName\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'login',\n  templateUrl: '../html/login.component.html',\n  styleUrls: ['../css/login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}