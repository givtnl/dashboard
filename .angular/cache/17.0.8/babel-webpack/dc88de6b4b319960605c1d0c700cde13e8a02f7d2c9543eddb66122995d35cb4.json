{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar forms_1 = require(\"@angular/forms\");\nexports.TOGGLEBUTTON_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return ToggleButton;\n  }),\n  multi: true\n};\nvar ToggleButton = function () {\n  function ToggleButton() {\n    this.onLabel = 'Yes';\n    this.offLabel = 'No';\n    this.onChange = new core_1.EventEmitter();\n    this.checked = false;\n    this.focus = false;\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n  }\n  ToggleButton.prototype.ngAfterViewInit = function () {\n    this.checkbox = this.checkboxViewChild.nativeElement;\n  };\n  ToggleButton.prototype.getIconClass = function () {\n    var baseClass = 'ui-button-icon-left fa fa-fw';\n    return baseClass + ' ' + (this.checked ? this.onIcon : this.offIcon);\n  };\n  ToggleButton.prototype.toggle = function (event) {\n    if (!this.disabled) {\n      this.checked = !this.checked;\n      this.onModelChange(this.checked);\n      this.onModelTouched();\n      this.onChange.emit({\n        originalEvent: event,\n        checked: this.checked\n      });\n      this.checkbox.focus();\n    }\n  };\n  ToggleButton.prototype.onFocus = function () {\n    this.focus = true;\n  };\n  ToggleButton.prototype.onBlur = function () {\n    this.focus = false;\n    this.onModelTouched();\n  };\n  ToggleButton.prototype.writeValue = function (value) {\n    this.checked = value;\n  };\n  ToggleButton.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  ToggleButton.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  ToggleButton.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  Object.defineProperty(ToggleButton.prototype, \"hasOnLabel\", {\n    get: function () {\n      return this.onLabel && this.onLabel.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToggleButton.prototype, \"hasOffLabel\", {\n    get: function () {\n      return this.onLabel && this.onLabel.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ToggleButton;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ToggleButton.prototype, \"onLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ToggleButton.prototype, \"offLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ToggleButton.prototype, \"onIcon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ToggleButton.prototype, \"offIcon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], ToggleButton.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], ToggleButton.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ToggleButton.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ToggleButton.prototype, \"inputId\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], ToggleButton.prototype, \"tabindex\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], ToggleButton.prototype, \"onChange\", void 0);\n__decorate([core_1.ViewChild('checkbox'), __metadata(\"design:type\", core_1.ElementRef)], ToggleButton.prototype, \"checkboxViewChild\", void 0);\nToggleButton = __decorate([core_1.Component({\n  selector: 'p-toggleButton',\n  template: \"\\n        <div [ngClass]=\\\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon&&!offIcon), \\n                'ui-button-text-icon-left': (onIcon&&offIcon&&hasOnLabel&&hasOffLabel), 'ui-button-icon-only': (onIcon&&offIcon&&!hasOnLabel&&!hasOffLabel),\\n                'ui-state-active': checked,'ui-state-focus':focus,'ui-state-disabled':disabled}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" \\n                (click)=\\\"toggle($event)\\\">\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input #checkbox type=\\\"checkbox\\\" [attr.id]=\\\"inputId\\\" [checked]=\\\"checked\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\" [attr.tabindex]=\\\"tabindex\\\">\\n            </div>\\n            <span *ngIf=\\\"onIcon||offIcon\\\" [class]=\\\"getIconClass()\\\"></span>\\n            <span class=\\\"ui-button-text ui-unselectable-text\\\">{{checked ? hasOnLabel ? onLabel : 'ui-btn' : hasOffLabel ? offLabel : 'ui-btn'}}</span>\\n        </div>\\n    \",\n  providers: [exports.TOGGLEBUTTON_VALUE_ACCESSOR]\n})], ToggleButton);\nexports.ToggleButton = ToggleButton;\nvar ToggleButtonModule = function () {\n  function ToggleButtonModule() {}\n  return ToggleButtonModule;\n}();\nToggleButtonModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [ToggleButton],\n  declarations: [ToggleButton]\n})], ToggleButtonModule);\nexports.ToggleButtonModule = ToggleButtonModule;\n//# sourceMappingURL=togglebutton.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}