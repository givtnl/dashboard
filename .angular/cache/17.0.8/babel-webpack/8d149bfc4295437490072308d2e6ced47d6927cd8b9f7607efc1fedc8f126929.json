{"ast":null,"code":"import _asyncToGenerator from \"/Users/maikel/Projects/givt/dashboard/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\n/* tslint:disable:indent */\nimport { Component } from \"@angular/core\";\nimport { QrCodeType } from \"../models/qr-code-type.enum\";\nimport { CollectionMediumType } from \"../models/collectionMediumType\";\nlet QRCodeComponent = class QRCodeComponent {\n  constructor(translateService, apiService, dataService, userService, logginService) {\n    this.translateService = translateService;\n    this.apiService = apiService;\n    this.dataService = dataService;\n    this.userService = userService;\n    this.logginService = logginService;\n    this.loading = false;\n    this.name = \"\";\n    this.GenericQR = false;\n    this.currentQuestionId = 0;\n    this.fieldArray = [\"\"];\n    this.giftPurposes = [];\n    this.isEmailValid = true;\n    this.allQrCodes = [];\n    this.qrCodes = [];\n    this.email = this.dataService.getData('UserEmail');\n    this.phonenumber = \"\";\n    this.comments = \"\";\n  }\n  ngOnInit() {\n    this.loading = true;\n    this.apiService.getData(`v2/organisations/${this.userService.CurrentCollectGroup.OrgId}/collectgroups/${this.userService.CurrentCollectGroup.GUID}/collectionmediums?collectionMediumTypes=${CollectionMediumType.QrCodeDefault}`).then(resp => {\n      this.logginService.info(\"Succesfully fetched qr code list\");\n      this.allQrCodes = resp;\n      this.qrCodes = this.allQrCodes.filter(code => code.Active === true);\n      this.loading = false;\n    }).catch(error => this.handleError(error));\n    let savedLanguage = this.dataService.getData(\"SelectedQRCodeLanguage\");\n    if (!savedLanguage || savedLanguage.length === 0) {\n      let currentCollectGroupCountry = this.userService.CurrentCollectGroup.Country;\n      savedLanguage = currentCollectGroupCountry === \"NL\" || currentCollectGroupCountry == \"BE\" ? \"NL\" : \"EN\";\n    }\n    if (!this.isNullOrUndefined(savedLanguage) && savedLanguage.length == 2) {\n      this.selectedLanguage = savedLanguage;\n      this.logginService.info(\"Set language in QR component from Local storage\");\n    } else if (!this.isNullOrUndefined(navigator.language)) {\n      this.selectedLanguage = navigator.language.substring(0, 2);\n      this.logginService.info(\"Set language in QR component from navigator\");\n    }\n    this.userService.collectGroupChanged.subscribe(() => {\n      this.ngOnInit();\n    });\n  }\n  submitBatch() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.logginService.info(\"Submitting batch QR Request\");\n      _this.loading = true;\n      let body = {\n        commands: []\n      };\n      body.commands = _this.fieldArray.map(x => {\n        return {\n          allocationName: x,\n          CollectionMediumType: QrCodeType.Default\n        };\n      });\n      yield _this.apiService.postData(`v2/organisations/${_this.userService.CurrentCollectGroup.OrgId}/collectgroups/${_this.userService.CurrentCollectGroup.GUID}/collectionmediums/${_this.selectedLanguage.toLowerCase()}/batch`, body).then(response => {\n        if (!_this.isNullOrUndefined(response)) _this.downloadZip(response.Base64Result, \"\");else _this.handleError(`Batch: couldnt get qr codes bacause response was null or undefined.`);\n      }).catch(error => {\n        _this.handleError(error);\n      });\n    })();\n  }\n  submitGeneric() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.logginService.info(\"Submitting generic QR Request\");\n      _this2.loading = true;\n      let body = {\n        AllocationName: null,\n        CollectionMediumType: QrCodeType.Default\n      };\n      yield _this2.apiService.postData(`v2/organisations/${_this2.userService.CurrentCollectGroup.OrgId}/collectgroups/${_this2.userService.CurrentCollectGroup.GUID}/collectionmediums`, body).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (response) {\n          let mediumId = response.Result;\n          if (!_this2.isNullOrUndefined(mediumId)) {\n            _this2.apiService.getData(`v2/organisations/${_this2.userService.CurrentCollectGroup.OrgId}/collectgroups/${_this2.userService.CurrentCollectGroup.GUID}/collectionmediums/${mediumId}/export/${_this2.selectedLanguage.toLowerCase()}`).then(response2 => {\n              if (!_this2.isNullOrUndefined(response2)) _this2.downloadZip(response2.Base64Result);else _this2.handleError(`Couldnt get QR code from response because response is null or undefined`);\n            }).catch(error => {\n              _this2.handleError(error);\n            });\n          } else {\n            _this2.handleError(`Couldn't get medium id from response: ${response}`);\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(error => {\n        _this2.handleError(error);\n      });\n    })();\n  }\n  showModalForDelete(qrcode) {\n    this.currentQuestionId = -1;\n    this.qrCodeToDelete = qrcode;\n  }\n  cancelDelete() {\n    this.currentQuestionId = 0;\n    this.qrCodeToDelete = null;\n  }\n  deleteQrcode() {\n    this.loading = true;\n    let body = {\n      MediumId: this.qrCodeToDelete.MediumId,\n      Active: false\n    };\n    this.apiService.putData(`v2/organisations/${this.userService.CurrentCollectGroup.OrgId}/collectgroups/${this.userService.CurrentCollectGroup.GUID}/collectionmediums`, body).then(response => {\n      if (!this.isNullOrUndefined(response)) {\n        this.qrCodes = this.qrCodes.filter(code => {\n          return code.MediumId !== this.qrCodeToDelete.MediumId;\n        });\n        this.qrCodeToDelete = null;\n        this.loading = false;\n      } else this.handleError(`Couldn't delete qrCode because response was null`);\n    });\n    this.currentQuestionId = 0;\n  }\n  flowGeneric() {\n    this.GenericQR = true;\n    let respsonse;\n    this.translateService.get(\"QRCodeREQ_generic\").subscribe(res => respsonse = res);\n    this.fieldArray = [String(respsonse)];\n    this.submitGeneric();\n    this.showNextQuestion(2);\n  }\n  saveLanguageAndContinue() {\n    this.dataService.writeData(\"SelectedQRCodeLanguage\", this.selectedLanguage, true);\n    this.showNextQuestion(1);\n  }\n  flowSpecific() {\n    this.GenericQR = false;\n    this.showNextQuestion(1);\n  }\n  undoProces() {\n    if (this.GenericQR) {\n      this.showPreviousQuestion(2);\n      this.fieldArray = [\"\"];\n    } else {\n      this.showPreviousQuestion(1);\n    }\n  }\n  showNextQuestion(value) {\n    switch (this.currentQuestionId) {\n      case 2:\n        if (this.fieldArray[0] == null) {\n          this.fieldArray.push(\"\");\n        }\n        this.currentQuestionId += value;\n        break;\n      case 3:\n        this.fieldArray = this.fieldArray.filter(element => !this.isNullOrUndefined(element) && element.trim() !== \"\");\n        this.fieldArray.forEach((element, index) => {\n          this.fieldArray[index] = element.trim();\n        });\n        if (this.fieldArray.length > 0) {\n          this.currentQuestionId += value;\n          this.submitBatch();\n        } else {\n          console.log(this.fieldArray);\n          this.fieldArray.push(\"\");\n          console.log(this.fieldArray);\n          alert(this.translateService.instant(\"QRCode_OopsForgotSomething\").toString());\n        }\n        break;\n      default:\n        this.currentQuestionId += value;\n        break;\n    }\n  }\n  showPreviousQuestion(value = 1) {\n    switch (this.currentQuestionId) {\n      case 4:\n        if (this.fieldArray[0] == null) {\n          this.fieldArray.push(\"\");\n        }\n        break;\n      default:\n        break;\n    }\n    this.currentQuestionId -= value;\n  }\n  deleteFieldValue(index) {\n    this.fieldArray.splice(index, 1);\n  }\n  trackByFn(index, item) {\n    return index;\n  }\n  handleError(error) {\n    this.translateService.get(\"Error_Generic\").subscribe(translation => {\n      alert(translation);\n    });\n    this.logginService.error(`An error occurred in the QR code flow - ${error}`);\n    this.loading = false;\n  }\n  downloadQr(value, name) {\n    this.loading = true;\n    this.apiService.getData(`v2/organisations/${this.userService.CurrentCollectGroup.OrgId}/collectgroups/${this.userService.CurrentCollectGroup.GUID}/collectionmediums/${value}/export/${this.selectedLanguage.toLowerCase()}`).then(response => {\n      if (!this.isNullOrUndefined(response)) this.downloadZip(response.Base64Result, name);else this.handleError(`Couldnt get list of qr codes because response was null`);\n    });\n  }\n  downloadZip(response, name = null) {\n    try {\n      let blob = this.b64toBlob(response, \"application/zip\", 512);\n      let blobUrl = URL.createObjectURL(blob);\n      let button = document.getElementById(\"hiddenQrButton\");\n      button.setAttribute(\"href\", blobUrl);\n      if (name == null) name = ` - ${this.translateService.instant(\"QRCodeREQ_generic\").toString()}`;else if (name != \"\") {\n        name = ` - ${name}`;\n      }\n      let fileName = `${this.translateService.instant(\"QRCodes\").toString()} - ${this.userService.CurrentCollectGroup.Name}${name}.zip`;\n      button.setAttribute(\"download\", fileName);\n      button.click();\n      window.URL.revokeObjectURL(blobUrl);\n    } catch (error) {\n      this.handleError(error);\n    }\n    this.loading = false;\n  }\n  b64toBlob(b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n    let byteCharacters = atob(b64Data);\n    let byteArrays = [];\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      let slice = byteCharacters.slice(offset, offset + sliceSize);\n      let byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      let byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    let blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  }\n  isNullOrUndefined(value) {\n    return value === undefined || value === null;\n  }\n};\nQRCodeComponent = __decorate([Component({\n  selector: 'qr-code',\n  templateUrl: '../html/qrcode.component.html',\n  styleUrls: ['../css/qrcode.component.css']\n})], QRCodeComponent);\nexport { QRCodeComponent };\nclass QRRequestBody {}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}