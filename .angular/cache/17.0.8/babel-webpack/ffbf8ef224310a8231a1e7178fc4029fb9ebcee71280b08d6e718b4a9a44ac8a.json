{"ast":null,"code":"import 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/observable/forkJoin';\nimport { Card } from '../models/card';\nimport { sprintf } from 'sprintf-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api-client.service\";\nimport * as i2 from \"@ngx-translate/core\";\nimport * as i3 from \"../pipes/iso.datepipe\";\nimport * as i4 from \"../services/user.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"./navigation.component\";\nimport * as i7 from \"./titlebar.component\";\nimport * as i8 from \"./footer.component\";\nfunction DashboardComponent_article_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"article\")(1, \"div\")(2, \"p\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 9)(5, \"span\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(7, \"p\", 10);\n    i0.ɵɵelementStart(8, \"p\", 11);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 9);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const card_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(card_r1.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(card_r1.subtitle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", card_r1.value, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(card_r1.average);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(card_r1.footer);\n  }\n}\nconst _c0 = a0 => ({\n  \"show-loading-animation\": a0\n});\nexport class DashboardComponent {\n  get currencySymbol() {\n    return this.userService.currencySymbol;\n  }\n  constructor(apiService, translate, datePipe, userService) {\n    this.apiService = apiService;\n    this.datePipe = datePipe;\n    this.userService = userService;\n    this.daysOfWeek = [\"Text_LastSunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    this.cards = [];\n    this.lastSundayCard = new Card();\n    this.thisMonthCard = new Card();\n    this.thisMonthGiversCard = new Card();\n    this.todaysCard = new Card();\n    this.todaysGiversCard = new Card();\n    this.averageGiversCard = new Card();\n    this.ShowLoadingAnimation = false;\n    this.translate = translate;\n    this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    this.ShowLoadingAnimation = true;\n    this.userService.collectGroupChanged.subscribe(() => {\n      this.ShowLoadingAnimation = true;\n      this.ngOnInit();\n    });\n    this.userService.userLoggedOut.subscribe(() => {\n      clearInterval(this.continuousData);\n    });\n  }\n  ngOnDestroy() {\n    clearInterval(this.continuousData);\n  }\n  ngOnInit() {\n    let f0 = this.fetchAverageGivers();\n    let f1 = this.fetchThisMonthGivts();\n    let f2 = this.fetchThisMonthGivers();\n    let f3 = this.fetchLastDayGivts();\n    let f4 = this.fetchTodayGivts();\n    let f5 = this.fetchTodayGivers();\n    Promise.all([f0, f1, f2, f3, f4, f5]).then(() => {\n      if (this.ShowLoadingAnimation) this.ShowLoadingAnimation = false;\n    });\n    this.continuousData = setInterval(() => {\n      let f1 = this.fetchThisMonthGivts();\n      let f2 = this.fetchThisMonthGivers();\n      let f3 = this.fetchLastDayGivts();\n      let f4 = this.fetchTodayGivts();\n      let f5 = this.fetchTodayGivers();\n    }, 15000);\n  }\n  fetchTodayGivers() {\n    let dtEnd = this.datePipe.transform(new Date().setDate(new Date().getDate()), \"yyyy-MM-ddT23:59:59.999\" + this.datePipe.getLocalTimeZoneISOString());\n    let dtBegin = this.datePipe.transform(new Date().setDate(new Date().getDate()), \"yyyy-MM-ddT00:00:00.000\" + this.datePipe.getLocalTimeZoneISOString());\n    let params = \"DateBegin=\" + this.datePipe.toISODateUTC(new Date(dtBegin)) + \"&DateEnd=\" + this.datePipe.toISODateUTC(new Date(dtEnd));\n    return this.apiService.getData(\"Cards/Users/?\" + params).then(resp => {\n      this.todaysGiversCard.value = \"<span class='fat-emphasis'>\" + resp + \"</span>\";\n      this.translate.get(\"Text_Today_Givers\").subscribe(value => {\n        this.todaysGiversCard.title = value;\n      });\n      let cardIsInCards = false;\n      for (let i in this.cards) {\n        if (this.cards[i].title === this.todaysGiversCard.title) {\n          cardIsInCards = true;\n        }\n      }\n      if (!cardIsInCards) {\n        this.cards.push(this.todaysGiversCard);\n      }\n    });\n  }\n  fetchTodayGivts() {\n    let dtEnd = this.datePipe.transform(new Date().setDate(new Date().getDate()), \"yyyy-MM-ddT23:59:59.999\" + this.datePipe.getLocalTimeZoneISOString());\n    let dtBegin = this.datePipe.transform(new Date().setDate(new Date().getDate()), \"yyyy-MM-ddT00:00:00.000\" + this.datePipe.getLocalTimeZoneISOString());\n    let params = \"DateBegin=\" + this.datePipe.toISODateUTC(new Date(dtBegin)) + \"&DateEnd=\" + this.datePipe.toISODateUTC(new Date(dtEnd));\n    return this.apiService.getData(\"Cards/Givts/?\" + params).then(resp => {\n      if (resp) {\n        let collectSum = resp.TotalAmount;\n        let average = 0;\n        if (collectSum != 0) {\n          average = collectSum / resp.TransactionCount;\n        }\n        this.todaysCard.value = this.currencySymbol + \"<span class='fat-emphasis'>\" + (this.isSafari ? collectSum.toFixed(2) : collectSum.toLocaleString(navigator.language, {\n          minimumFractionDigits: 2\n        })) + \"</span>\";\n        this.translate.get(\"Text_Today\").subscribe(value => {\n          this.todaysCard.title = value;\n        });\n        var donation = \"\";\n        this.translate.get(\"Text_Donation\").subscribe(value => {\n          donation = value;\n        });\n        this.translate.get(\"Text_Given\").subscribe(value => {\n          this.todaysCard.footer = value + \" per \" + donation;\n        });\n        this.translate.get(\"Card_Average\").subscribe(value => {\n          this.todaysCard.average = value + \" \" + this.currencySymbol + average.toLocaleString(navigator.language, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          });\n        });\n        let cardIsInCards = false;\n        for (let i in this.cards) {\n          if (this.cards[i].title === this.todaysCard.title) {\n            cardIsInCards = true;\n          }\n        }\n        if (!cardIsInCards) {\n          this.cards.push(this.todaysCard);\n        }\n      }\n    });\n  }\n  fetchThisMonthGivers() {\n    let date = new Date();\n    let month = date.getUTCMonth() + 1;\n    let year = date.getFullYear();\n    let secondYear = date.getFullYear();\n    let nextMonth = month + 1;\n    if (month == 12) {\n      secondYear = date.getFullYear() + 1;\n      nextMonth = 1;\n    }\n    let dateBegin = new Date(sprintf(\"%4i-%02i-01T00:00:00.000%s\", year, month, this.datePipe.getLocalTimeZoneISOString()));\n    let dateEnd = new Date(sprintf(\"%4i-%02i-01T00:00:00.000%s\", secondYear, nextMonth, this.datePipe.getLocalTimeZoneISOString()));\n    let params = \"DateBegin=\" + this.datePipe.toISODateUTC(new Date(dateBegin)) + \"&DateEnd=\" + this.datePipe.toISODateUTC(new Date(dateEnd));\n    return this.apiService.getData(\"Cards/Users/?\" + params).then(resp => {\n      this.thisMonthGiversCard.value = \"<span class='fat-emphasis'>\" + resp + \"</span>\";\n      this.translate.get(\"Text_Givers\").subscribe(value => {\n        this.thisMonthGiversCard.title = value;\n      });\n      this.thisMonthGiversCard.subtitle = new Date().toLocaleDateString(navigator.language, {\n        year: 'numeric',\n        month: 'long'\n      });\n      this.translate.get(\"Text_GiversLowercase\").subscribe(value => {\n        this.thisMonthGiversCard.footer = value;\n      });\n      let cardIsInCards = false;\n      for (let i in this.cards) {\n        if (this.cards[i].title === this.thisMonthGiversCard.title) {\n          cardIsInCards = true;\n        }\n      }\n      if (!cardIsInCards) {\n        this.cards.push(this.thisMonthGiversCard);\n      }\n    });\n  }\n  fetchAverageGivers() {\n    return this.apiService.getData(\"v2/collectgroups/\" + this.userService.CurrentCollectGroup.GUID + \"/cards/user-average\").then(resp => {\n      this.averageGiversCard.value = \"<span class='fat-emphasis'>\" + resp + \"</span>\";\n      //this.averageGiversCard.subtitle = new Date().toLocaleDateString(navigator.language, { year: 'numeric', month: 'long'});\n      this.translate.get(\"Card_AverageGivers\").subscribe(value => {\n        this.averageGiversCard.title = value;\n      });\n      this.translate.get(\"Card_Weekly\").subscribe(value => {\n        this.averageGiversCard.footer = value;\n      });\n      let cardIsInCards = false;\n      for (let i in this.cards) {\n        if (this.cards[i].title === this.averageGiversCard.title) {\n          cardIsInCards = true;\n        }\n      }\n      if (!cardIsInCards) {\n        this.cards.push(this.averageGiversCard);\n      }\n    });\n  }\n  fetchThisMonthGivts() {\n    let date = new Date();\n    let month = date.getUTCMonth() + 1;\n    let year = date.getFullYear();\n    let secondYear = date.getFullYear();\n    let nextMonth = month + 1;\n    if (month == 12) {\n      secondYear = date.getFullYear() + 1;\n      nextMonth = 1;\n    }\n    let dateBegin = new Date(sprintf(\"%4i-%02i-01T00:00:00.000%s\", year, month, this.datePipe.getLocalTimeZoneISOString()));\n    let dateEnd = new Date(sprintf(\"%4i-%02i-01T00:00:00.000%s\", secondYear, nextMonth, this.datePipe.getLocalTimeZoneISOString()));\n    let params = \"DateBegin=\" + this.datePipe.toISODateUTC(new Date(dateBegin)) + \"&DateEnd=\" + this.datePipe.toISODateUTC(new Date(dateEnd));\n    return this.apiService.getData(\"Cards/Givts/?\" + params).then(resp => {\n      if (resp) {\n        let collectSum = resp.TotalAmount;\n        let average = 0;\n        if (collectSum != 0) {\n          average = collectSum / resp.TransactionCount;\n        }\n        this.thisMonthCard.value = this.currencySymbol + \"<span class='fat-emphasis'>\" + (this.isSafari ? collectSum.toFixed(2) : collectSum.toLocaleString(navigator.language, {\n          minimumFractionDigits: 2\n        })) + \"</span>\";\n        this.translate.get(\"Text_ThisMonth\").subscribe(value => {\n          this.thisMonthCard.title = value;\n        });\n        var donation = \"\";\n        this.translate.get(\"Text_Donation\").subscribe(value => {\n          donation = value;\n        });\n        this.translate.get(\"Text_Given\").subscribe(value => {\n          this.thisMonthCard.footer = value + \" per \" + donation;\n        });\n        this.thisMonthCard.subtitle = new Date().toLocaleDateString(navigator.language, {\n          year: 'numeric',\n          month: 'long'\n        });\n        this.translate.get(\"Card_Average\").subscribe(value => {\n          this.thisMonthCard.average = value + \" \" + this.currencySymbol + average.toLocaleString(navigator.language, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          });\n        });\n        let cardIsInCards = false;\n        for (let i in this.cards) {\n          if (this.cards[i].title === this.thisMonthCard.title) {\n            cardIsInCards = true;\n          }\n        }\n        if (!cardIsInCards) {\n          this.cards.push(this.thisMonthCard);\n        }\n      }\n    });\n  }\n  fetchLastDayGivts() {\n    let dtEnd = this.datePipe.transform(new Date(), \"yyyy-MM-ddT23:59:59.999\" + this.datePipe.getLocalTimeZoneISOString());\n    let dtBegin = this.datePipe.transform(new Date().setDate(new Date().getDate() - 6), \"yyyy-MM-ddT00:00:00.000\" + this.datePipe.getLocalTimeZoneISOString());\n    let dateEnd = new Date(dtEnd);\n    let dateBegin = new Date(dtBegin);\n    return this.apiService.getData(\"v2/collectgroups/\" + this.userService.CurrentCollectGroup.GUID + \"/givts/view/search?dtBegin=\" + this.datePipe.toISODateUTC(dateBegin) + \"&dtEnd=\" + this.datePipe.toISODateUTC(dateEnd)).then(resp => {\n      if (resp.statusCode == 500) return;\n      let highest = resp.reduce((rv, x) => {\n        if (rv && rv.length > 0) {\n          let idx = rv.findIndex(rvx => rvx.Date == x.Date);\n          if (idx > -1) {\n            rv[idx] = {\n              Sum: rv[idx].Sum + x.Sum,\n              Count: rv[idx].Count + x.Count,\n              Date: rv[idx].Date\n            };\n          } else rv.push(x);\n        } else {\n          rv = [];\n          rv.push(x);\n        }\n        return rv;\n      }, []).reduce((rv, x) => {\n        if (rv && x.Count > rv.Count) return x;else return rv;\n      }, {\n        Sum: 0,\n        Count: 0,\n        Date: new Date()\n      });\n      let displayDate = new Date(highest.Date);\n      let collectSum = highest.Sum;\n      let average = 0;\n      if (collectSum != 0) {\n        average = collectSum / highest.Count;\n      }\n      this.lastSundaySum = collectSum;\n      this.lastSundayCard.value = this.currencySymbol + \"<span class='fat-emphasis'>\" + (this.isSafari ? collectSum.toFixed(2) : collectSum.toLocaleString(navigator.language, {\n        minimumFractionDigits: 2\n      })) + \"</span>\";\n      var donation = \"\";\n      this.translate.get(\"Text_Donation\").subscribe(value => {\n        donation = value;\n      });\n      this.translate.get(\"Text_Given\").subscribe(value => {\n        this.lastSundayCard.footer = value + \" per \" + donation;\n      });\n      this.translate.get([\"LastCollectDay\", this.daysOfWeek[displayDate.getDay()]]).subscribe(val => {\n        this.lastSundayCard.title = val[\"LastCollectDay\"];\n        this.lastSundayCard.subtitle = val[this.daysOfWeek[displayDate.getDay()]] + \" \" + displayDate.toLocaleDateString(navigator.language, {\n          day: 'numeric',\n          year: 'numeric',\n          month: 'long'\n        });\n      });\n      this.translate.get(\"Card_Average\").subscribe(value => {\n        this.lastSundayCard.average = value + \" \" + this.currencySymbol + average.toLocaleString(navigator.language, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        });\n      });\n      let cardIsInCards = false;\n      for (let i in this.cards) {\n        if (this.cards[i].title === this.lastSundayCard.title) {\n          cardIsInCards = true;\n        }\n      }\n      if (!cardIsInCards) {\n        this.cards.push(this.lastSundayCard);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.ApiClientService), i0.ɵɵdirectiveInject(i2.TranslateService), i0.ɵɵdirectiveInject(i3.ISODatePipe), i0.ɵɵdirectiveInject(i4.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"my-dashboard\"]],\n    decls: 12,\n    vars: 4,\n    consts: [[1, \"global-layout\"], [1, \"global-layout-content\"], [1, \"section-dashboard\", \"bottom-flex\"], [1, \"loading-wrapper\", 3, \"ngClass\"], [1, \"loader\"], [\"viewBox\", \"25 25 50 50\", 1, \"circular\"], [\"cx\", \"50\", \"cy\", \"50\", \"r\", \"20\", \"fill\", \"none\", \"stroke-width\", \"5\", \"stroke-miterlimit\", \"10\", 1, \"path\"], [4, \"ngFor\", \"ngForOf\"], [1, \"card-title\"], [1, \"card-subtitle\"], [1, \"card-subtitle\", 3, \"innerHTML\"], [1, \"card-subtitle\", \"average\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"my-alert\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelement(2, \"my-navigation\");\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵelement(4, \"my-titlebar\");\n        i0.ɵɵelementStart(5, \"section\", 2)(6, \"div\", 3)(7, \"div\", 4);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(8, \"svg\", 5);\n        i0.ɵɵelement(9, \"circle\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(10, DashboardComponent_article_10_Template, 12, 5, \"article\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelement(11, \"my-footer\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx.ShowLoadingAnimation));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.cards);\n      }\n    },\n    dependencies: [i5.NgClass, i5.NgForOf, i6.NavigationComponent, i7.TitlebarComponent, i8.FooterComponent],\n    styles: [\".section-dashboard[_ngcontent-%COMP%] {\\n    max-width:1200px;\\n    margin:0px auto;\\n    column-count:3;\\n    column-gap:0;\\n    position: relative;\\n    margin-top:12px;\\n}\\n\\n\\n\\n.section-dashboard[_ngcontent-%COMP%]   article[_ngcontent-%COMP%]{\\n    page-break-inside: avoid;\\n    break-inside: avoid;\\n    padding: 12px 12px;\\n    box-sizing: border-box;\\n    width: 380px;\\n}\\n.section-dashboard[_ngcontent-%COMP%]   article[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%]{\\n    padding:25px;\\n    box-sizing: border-box;\\n    display: -moz-flex;\\n    display: -ms-flex;\\n    display: flex;\\n\\n    width: auto;\\n    min-height: 200px;\\n    background-color:white;\\n    border: 1px solid #E3E2E7;\\n    border-radius: 2px;\\n    text-align: center;\\n    justify-content: center;\\n    align-items: center;\\n    flex-flow: column;\\n}\\n\\n\\n.section-dashboard[_ngcontent-%COMP%]   article[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{\\n    margin:0;\\n    margin-bottom:5px;\\n}\\n\\n.card-title[_ngcontent-%COMP%]{\\n    font-family: \\\"Avenir_Heavy\\\";\\n    font-size:18px;\\n    color:#2C2B57;\\n}\\n\\n.card-subtitle[_ngcontent-%COMP%]{\\n    font-family: \\\"Avenir_Roman\\\";\\n    font-size:13px;\\n    color:#2C2B57;\\n}\\n\\n.section-dashboard[_ngcontent-%COMP%]   article[_ngcontent-%COMP%]   .wistjedat[_ngcontent-%COMP%]{\\n    height:120px !important;\\n    background-color:#3480C7;\\n    min-height: 0;\\n    color:white !important;\\n}\\n.wistjedat[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{\\n    color:white;\\n}\\n\\n\\n.section-services[_ngcontent-%COMP%]{\\n    max-width:1024px;\\n    margin:0 auto;\\n    background-color:red;\\n    height: 50px;\\n}\\n\\n\\n.services-table[_ngcontent-%COMP%]{\\n    width:100%;\\n    margin:0;\\n    padding:0 ;\\n    border-spacing: 0;\\n}\\n\\n.services-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]{\\n    text-align: left;\\n    border: 5px solid black;\\n}\\n\\n.services-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n    border: 1px solid black;\\n}\\n\\n.table-row-monthly[_ngcontent-%COMP%]{\\n    background-color: #E3E2E7;\\n    height:60px;\\n    box-sizing: border-box;\\n}\\n\\n.table-row-monthly[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child{\\n    padding-left:30px;\\n    box-sizing: border-box;\\n}\\n\\n.table-row-monthly[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child{\\n    padding-right:30px;\\n    box-sizing: border-box;\\n}\\n\\n#h[_ngcontent-%COMP%]{\\n    position:relative;\\n    display:block;\\n}\\n#test[_ngcontent-%COMP%]{\\n    position: absolute;\\n    display:flex;\\n    justify-content:center;\\n    align-items:center;\\n    margin:0 auto;\\n    width:100%;\\n    height:100%;\\n    top:12px;\\n    left:0;\\n    flex-direction:column;\\n}\\n#test[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n    font-family: Avenir_Light;\\n}\\n#test[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{\\n    font-size:26px;\\n    font-family: Avenir_Medium;\\n    color:#2C2B57;\\n}\\n\\n@media only screen and (max-width: 1200px) {\\n  .section-dashboard.section-dashboard[_ngcontent-%COMP%] {\\n    column-count: 2;\\n    margin-top: 12px;\\n  }\\n  .section-dashboard[_ngcontent-%COMP%]   article[_ngcontent-%COMP%] {\\n    width: 40vw;\\n    padding: 12px 12px;\\n  }\\n}\\n\\n@media only screen and (max-width: 768px) {\\n    \\n\\n    .section-dashboard.section-dashboard[_ngcontent-%COMP%] {\\n        column-count: 1;\\n        margin-top: 12px;\\n    }\\n  .section-dashboard[_ngcontent-%COMP%]   article[_ngcontent-%COMP%] {\\n      width: 100vw;\\n      padding: 12px 25px;\\n  }\\n\\n}\\n@media only screen and (min-width: 481px) and (max-width: 800px){\\n  .section-dashboard.section-dashboard[_ngcontent-%COMP%] {\\n    column-count: 1;\\n    margin-top: 12px;\\n  }\\n  .section-dashboard[_ngcontent-%COMP%]   article[_ngcontent-%COMP%] {\\n    width: 70vw;\\n    padding: 12px 12px;\\n  }\\n}\"]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}