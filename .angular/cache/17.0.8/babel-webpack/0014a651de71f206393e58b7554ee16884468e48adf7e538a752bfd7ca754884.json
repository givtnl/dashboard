{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\nvar button_1 = require(\"../button/button\");\nvar messages_1 = require(\"../messages/messages\");\nvar progressbar_1 = require(\"../progressbar/progressbar\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar shared_1 = require(\"../common/shared\");\nvar FileUpload = function () {\n  function FileUpload(domHandler, sanitizer, zone) {\n    this.domHandler = domHandler;\n    this.sanitizer = sanitizer;\n    this.zone = zone;\n    this.method = 'POST';\n    this.invalidFileSizeMessageSummary = '{0}: Invalid file size, ';\n    this.invalidFileSizeMessageDetail = 'maximum upload size is {0}.';\n    this.invalidFileTypeMessageSummary = '{0}: Invalid file type, ';\n    this.invalidFileTypeMessageDetail = 'allowed file types: {0}.';\n    this.previewWidth = 50;\n    this.chooseLabel = 'Choose';\n    this.uploadLabel = 'Upload';\n    this.cancelLabel = 'Cancel';\n    this.showUploadButton = true;\n    this.showCancelButton = true;\n    this.mode = 'advanced';\n    this.onBeforeUpload = new core_1.EventEmitter();\n    this.onBeforeSend = new core_1.EventEmitter();\n    this.onUpload = new core_1.EventEmitter();\n    this.onError = new core_1.EventEmitter();\n    this.onClear = new core_1.EventEmitter();\n    this.onRemove = new core_1.EventEmitter();\n    this.onSelect = new core_1.EventEmitter();\n    this.onProgress = new core_1.EventEmitter();\n    this.uploadHandler = new core_1.EventEmitter();\n    this.progress = 0;\n  }\n  FileUpload.prototype.ngOnInit = function () {\n    this.files = [];\n  };\n  FileUpload.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    this.templates.forEach(function (item) {\n      switch (item.getType()) {\n        case 'file':\n          _this.fileTemplate = item.template;\n          break;\n        case 'content':\n          _this.contentTemplate = item.template;\n          break;\n        case 'toolbar':\n          _this.toolbarTemplate = item.template;\n          break;\n        default:\n          _this.fileTemplate = item.template;\n          break;\n      }\n    });\n  };\n  FileUpload.prototype.ngAfterViewInit = function () {\n    var _this = this;\n    if (this.mode === 'advanced') {\n      this.zone.runOutsideAngular(function () {\n        _this.content.nativeElement.addEventListener('dragover', _this.onDragOver.bind(_this));\n      });\n    }\n  };\n  FileUpload.prototype.onFileSelect = function (event) {\n    if (this.isIE11() && this.selfInputChange) {\n      this.selfInputChange = false;\n      return;\n    }\n    this.msgs = [];\n    if (!this.multiple) {\n      this.files = [];\n    }\n    var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n    for (var i = 0; i < files.length; i++) {\n      var file = files[i];\n      if (!this.isFileSelected(file)) {\n        if (this.validate(file)) {\n          if (this.isImage(file)) {\n            file.objectURL = this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(files[i]));\n          }\n          this.files.push(files[i]);\n        }\n      }\n    }\n    this.onSelect.emit({\n      originalEvent: event,\n      files: files\n    });\n    if (this.hasFiles() && this.auto) {\n      this.upload();\n    }\n    this.clearInputElement();\n  };\n  FileUpload.prototype.isFileSelected = function (file) {\n    for (var _i = 0, _a = this.files; _i < _a.length; _i++) {\n      var sFile = _a[_i];\n      if (sFile.name + sFile.type + sFile.size === file.name + file.type + file.size) {\n        return true;\n      }\n    }\n    return false;\n  };\n  FileUpload.prototype.isIE11 = function () {\n    return !!window['MSInputMethodContext'] && !!document['documentMode'];\n  };\n  FileUpload.prototype.validate = function (file) {\n    if (this.accept && !this.isFileTypeValid(file)) {\n      this.msgs.push({\n        severity: 'error',\n        summary: this.invalidFileTypeMessageSummary.replace('{0}', file.name),\n        detail: this.invalidFileTypeMessageDetail.replace('{0}', this.accept)\n      });\n      return false;\n    }\n    if (this.maxFileSize && file.size > this.maxFileSize) {\n      this.msgs.push({\n        severity: 'error',\n        summary: this.invalidFileSizeMessageSummary.replace('{0}', file.name),\n        detail: this.invalidFileSizeMessageDetail.replace('{0}', this.formatSize(this.maxFileSize))\n      });\n      return false;\n    }\n    return true;\n  };\n  FileUpload.prototype.isFileTypeValid = function (file) {\n    var acceptableTypes = this.accept.split(',');\n    for (var _i = 0, acceptableTypes_1 = acceptableTypes; _i < acceptableTypes_1.length; _i++) {\n      var type = acceptableTypes_1[_i];\n      var acceptable = this.isWildcard(type) ? this.getTypeClass(file.type) === this.getTypeClass(type) : file.type == type || this.getFileExtension(file) === type;\n      if (acceptable) {\n        return true;\n      }\n    }\n    return false;\n  };\n  FileUpload.prototype.getTypeClass = function (fileType) {\n    return fileType.substring(0, fileType.indexOf('/'));\n  };\n  FileUpload.prototype.isWildcard = function (fileType) {\n    return fileType.indexOf('*') !== -1;\n  };\n  FileUpload.prototype.getFileExtension = function (file) {\n    return '.' + file.name.split('.').pop();\n  };\n  FileUpload.prototype.isImage = function (file) {\n    return /^image\\//.test(file.type);\n  };\n  FileUpload.prototype.onImageLoad = function (img) {\n    window.URL.revokeObjectURL(img.src);\n  };\n  FileUpload.prototype.upload = function () {\n    var _this = this;\n    if (this.customUpload) {\n      this.uploadHandler.emit({\n        files: this.files\n      });\n    } else {\n      this.msgs = [];\n      var xhr_1 = new XMLHttpRequest(),\n        formData = new FormData();\n      this.onBeforeUpload.emit({\n        'xhr': xhr_1,\n        'formData': formData\n      });\n      for (var i = 0; i < this.files.length; i++) {\n        formData.append(this.name, this.files[i], this.files[i].name);\n      }\n      xhr_1.upload.addEventListener('progress', function (e) {\n        if (e.lengthComputable) {\n          _this.progress = Math.round(e.loaded * 100 / e.total);\n        }\n        _this.onProgress.emit({\n          originalEvent: e,\n          progress: _this.progress\n        });\n      }, false);\n      xhr_1.onreadystatechange = function () {\n        if (xhr_1.readyState == 4) {\n          _this.progress = 0;\n          if (xhr_1.status >= 200 && xhr_1.status < 300) _this.onUpload.emit({\n            xhr: xhr_1,\n            files: _this.files\n          });else _this.onError.emit({\n            xhr: xhr_1,\n            files: _this.files\n          });\n          _this.clear();\n        }\n      };\n      xhr_1.open(this.method, this.url, true);\n      this.onBeforeSend.emit({\n        'xhr': xhr_1,\n        'formData': formData\n      });\n      xhr_1.withCredentials = this.withCredentials;\n      xhr_1.send(formData);\n    }\n  };\n  FileUpload.prototype.clear = function () {\n    this.files = [];\n    this.onClear.emit();\n    this.clearInputElement();\n  };\n  FileUpload.prototype.remove = function (event, index) {\n    this.clearInputElement();\n    this.onRemove.emit({\n      originalEvent: event,\n      file: this.files[index]\n    });\n    this.files.splice(index, 1);\n  };\n  FileUpload.prototype.clearInputElement = function () {\n    if (this.advancedFileInput && this.advancedFileInput.nativeElement) {\n      if (this.isIE11()) {\n        this.selfInputChange = true; //IE11 fix to prevent onFileChange trigger again\n      }\n\n      this.advancedFileInput.nativeElement.value = '';\n    }\n  };\n  FileUpload.prototype.hasFiles = function () {\n    return this.files && this.files.length > 0;\n  };\n  FileUpload.prototype.onDragEnter = function (e) {\n    if (!this.disabled) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n  FileUpload.prototype.onDragOver = function (e) {\n    if (!this.disabled) {\n      this.domHandler.addClass(this.content.nativeElement, 'ui-fileupload-highlight');\n      this.dragHighlight = true;\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n  FileUpload.prototype.onDragLeave = function (event) {\n    if (!this.disabled) {\n      this.domHandler.removeClass(this.content.nativeElement, 'ui-fileupload-highlight');\n    }\n  };\n  FileUpload.prototype.onDrop = function (event) {\n    if (!this.disabled) {\n      this.domHandler.removeClass(this.content.nativeElement, 'ui-fileupload-highlight');\n      event.stopPropagation();\n      event.preventDefault();\n      var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n      var allowDrop = this.multiple || files && files.length === 1;\n      if (allowDrop) {\n        this.onFileSelect(event);\n      }\n    }\n  };\n  FileUpload.prototype.onFocus = function () {\n    this.focus = true;\n  };\n  FileUpload.prototype.onBlur = function () {\n    this.focus = false;\n  };\n  FileUpload.prototype.formatSize = function (bytes) {\n    if (bytes == 0) {\n      return '0 B';\n    }\n    var k = 1000,\n      dm = 3,\n      sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n      i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  };\n  FileUpload.prototype.onSimpleUploaderClick = function (event) {\n    if (this.hasFiles()) {\n      this.upload();\n    }\n  };\n  FileUpload.prototype.ngOnDestroy = function () {\n    if (this.content && this.content.nativeElement) {\n      this.content.nativeElement.removeEventListener('dragover', this.onDragOver);\n    }\n  };\n  return FileUpload;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"name\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"url\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"method\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], FileUpload.prototype, \"multiple\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"accept\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], FileUpload.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], FileUpload.prototype, \"auto\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], FileUpload.prototype, \"withCredentials\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], FileUpload.prototype, \"maxFileSize\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"invalidFileSizeMessageSummary\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"invalidFileSizeMessageDetail\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"invalidFileTypeMessageSummary\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"invalidFileTypeMessageDetail\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], FileUpload.prototype, \"previewWidth\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"chooseLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"uploadLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"cancelLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], FileUpload.prototype, \"showUploadButton\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], FileUpload.prototype, \"showCancelButton\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], FileUpload.prototype, \"mode\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], FileUpload.prototype, \"customUpload\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"onBeforeUpload\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"onBeforeSend\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"onUpload\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"onError\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"onClear\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"onRemove\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"onSelect\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"onProgress\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], FileUpload.prototype, \"uploadHandler\", void 0);\n__decorate([core_1.ContentChildren(shared_1.PrimeTemplate), __metadata(\"design:type\", core_1.QueryList)], FileUpload.prototype, \"templates\", void 0);\n__decorate([core_1.ViewChild('advancedfileinput'), __metadata(\"design:type\", core_1.ElementRef)], FileUpload.prototype, \"advancedFileInput\", void 0);\n__decorate([core_1.ViewChild('basicfileinput'), __metadata(\"design:type\", core_1.ElementRef)], FileUpload.prototype, \"basicFileInput\", void 0);\n__decorate([core_1.ViewChild('content'), __metadata(\"design:type\", core_1.ElementRef)], FileUpload.prototype, \"content\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Array)], FileUpload.prototype, \"files\", void 0);\nFileUpload = __decorate([core_1.Component({\n  selector: 'p-fileUpload',\n  template: \"\\n        <div [ngClass]=\\\"'ui-fileupload ui-widget'\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" *ngIf=\\\"mode === 'advanced'\\\">\\n            <div class=\\\"ui-fileupload-buttonbar ui-widget-header ui-corner-top\\\">\\n                <span class=\\\"ui-fileupload-choose\\\" [label]=\\\"chooseLabel\\\" icon=\\\"fa-plus\\\" pButton  [ngClass]=\\\"{'ui-state-focus': focus}\\\" [attr.disabled]=\\\"disabled\\\" > \\n                    <input #advancedfileinput type=\\\"file\\\" (change)=\\\"onFileSelect($event)\\\" [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\" [disabled]=\\\"disabled\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\">\\n                </span>\\n\\n                <button *ngIf=\\\"!auto&&showUploadButton\\\" type=\\\"button\\\" [label]=\\\"uploadLabel\\\" icon=\\\"fa-upload\\\" pButton (click)=\\\"upload()\\\" [disabled]=\\\"!hasFiles()\\\"></button>\\n                <button *ngIf=\\\"!auto&&showCancelButton\\\" type=\\\"button\\\" [label]=\\\"cancelLabel\\\" icon=\\\"fa-close\\\" pButton (click)=\\\"clear()\\\" [disabled]=\\\"!hasFiles()\\\"></button>\\n            \\n                <p-templateLoader [template]=\\\"toolbarTemplate\\\"></p-templateLoader>\\n            </div>\\n            <div #content [ngClass]=\\\"{'ui-fileupload-content ui-widget-content ui-corner-bottom':true}\\\" \\n                (dragenter)=\\\"onDragEnter($event)\\\" (dragleave)=\\\"onDragLeave($event)\\\" (drop)=\\\"onDrop($event)\\\">\\n                <p-progressBar [value]=\\\"progress\\\" [showValue]=\\\"false\\\" *ngIf=\\\"hasFiles()\\\"></p-progressBar>\\n                \\n                <p-messages [value]=\\\"msgs\\\"></p-messages>\\n                \\n                <div class=\\\"ui-fileupload-files\\\" *ngIf=\\\"hasFiles()\\\">\\n                    <div *ngIf=\\\"!fileTemplate\\\">\\n                        <div class=\\\"ui-fileupload-row\\\" *ngFor=\\\"let file of files; let i = index;\\\">\\n                            <div><img [src]=\\\"file.objectURL\\\" *ngIf=\\\"isImage(file)\\\" [width]=\\\"previewWidth\\\" /></div>\\n                            <div>{{file.name}}</div>\\n                            <div>{{formatSize(file.size)}}</div>\\n                            <div><button type=\\\"button\\\" icon=\\\"fa-close\\\" pButton (click)=\\\"remove($event,i)\\\"></button></div>\\n                        </div>\\n                    </div>\\n                    <div *ngIf=\\\"fileTemplate\\\">\\n                        <ng-template ngFor [ngForOf]=\\\"files\\\" [ngForTemplate]=\\\"fileTemplate\\\"></ng-template>\\n                    </div>\\n                </div>\\n                <p-templateLoader [template]=\\\"contentTemplate\\\"></p-templateLoader>\\n            </div>\\n        </div>\\n        <span class=\\\"ui-button ui-fileupload-choose ui-widget ui-state-default ui-corner-all ui-button-text-icon-left\\\" *ngIf=\\\"mode === 'basic'\\\" \\n        (mouseup)=\\\"onSimpleUploaderClick($event)\\\"\\n        [ngClass]=\\\"{'ui-fileupload-choose-selected': hasFiles(),'ui-state-focus': focus}\\\">\\n            <span class=\\\"ui-button-icon-left fa\\\" [ngClass]=\\\"{'fa-plus': !hasFiles()||auto, 'fa-upload': hasFiles()&&!auto}\\\"></span>\\n            <span class=\\\"ui-button-text ui-clickable\\\">{{auto ? chooseLabel : hasFiles() ? files[0].name : chooseLabel}}</span>\\n            <input #basicfileinput type=\\\"file\\\" [accept]=\\\"accept\\\" [multiple]=\\\"multiple\\\" [disabled]=\\\"disabled\\\"\\n                (change)=\\\"onFileSelect($event)\\\" *ngIf=\\\"!hasFiles()\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\">\\n        </span>\\n    \",\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [domhandler_1.DomHandler, platform_browser_1.DomSanitizer, core_1.NgZone])], FileUpload);\nexports.FileUpload = FileUpload;\nvar FileUploadModule = function () {\n  function FileUploadModule() {}\n  return FileUploadModule;\n}();\nFileUploadModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, shared_1.SharedModule, button_1.ButtonModule, progressbar_1.ProgressBarModule, messages_1.MessagesModule],\n  exports: [FileUpload, shared_1.SharedModule, button_1.ButtonModule, progressbar_1.ProgressBarModule, messages_1.MessagesModule],\n  declarations: [FileUpload]\n})], FileUploadModule);\nexports.FileUploadModule = FileUploadModule;\n//# sourceMappingURL=fileupload.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}