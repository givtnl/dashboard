{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar Draggable = function () {\n  function Draggable(el, domHandler) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.onDragStart = new core_1.EventEmitter();\n    this.onDragEnd = new core_1.EventEmitter();\n    this.onDrag = new core_1.EventEmitter();\n  }\n  Draggable.prototype.dragStart = function (event) {\n    if (this.allowDrag()) {\n      if (this.dragEffect) {\n        event.dataTransfer.effectAllowed = this.dragEffect;\n      }\n      event.dataTransfer.setData('text', this.scope);\n      this.onDragStart.emit(event);\n    } else {\n      event.preventDefault();\n    }\n  };\n  Draggable.prototype.drag = function (event) {\n    this.onDrag.emit(event);\n  };\n  Draggable.prototype.dragEnd = function (event) {\n    this.onDragEnd.emit(event);\n  };\n  Draggable.prototype.mouseover = function (event) {\n    this.handle = event.target;\n  };\n  Draggable.prototype.mouseleave = function (event) {\n    this.handle = null;\n  };\n  Draggable.prototype.allowDrag = function () {\n    if (this.dragHandle && this.handle) return this.domHandler.matches(this.handle, this.dragHandle);else return true;\n  };\n  return Draggable;\n}();\n__decorate([core_1.Input('pDraggable'), __metadata(\"design:type\", String)], Draggable.prototype, \"scope\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Draggable.prototype, \"dragEffect\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Draggable.prototype, \"dragHandle\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Draggable.prototype, \"onDragStart\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Draggable.prototype, \"onDragEnd\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Draggable.prototype, \"onDrag\", void 0);\n__decorate([core_1.HostListener('dragstart', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Draggable.prototype, \"dragStart\", null);\n__decorate([core_1.HostListener('drag', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Draggable.prototype, \"drag\", null);\n__decorate([core_1.HostListener('dragend', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Draggable.prototype, \"dragEnd\", null);\n__decorate([core_1.HostListener('mouseover', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Draggable.prototype, \"mouseover\", null);\n__decorate([core_1.HostListener('mouseleave', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Draggable.prototype, \"mouseleave\", null);\nDraggable = __decorate([core_1.Directive({\n  selector: '[pDraggable]',\n  host: {\n    '[draggable]': 'true'\n  },\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler])], Draggable);\nexports.Draggable = Draggable;\nvar Droppable = function () {\n  function Droppable(el, domHandler) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.onDragEnter = new core_1.EventEmitter();\n    this.onDragLeave = new core_1.EventEmitter();\n    this.onDrop = new core_1.EventEmitter();\n    this.onDragOver = new core_1.EventEmitter();\n  }\n  Droppable.prototype.drop = function (event) {\n    if (this.allowDrop(event)) {\n      event.preventDefault();\n      this.onDrop.emit(event);\n    }\n  };\n  Droppable.prototype.dragEnter = function (event) {\n    event.preventDefault();\n    if (this.dropEffect) {\n      event.dataTransfer.dropEffect = this.dropEffect;\n    }\n    this.onDragEnter.emit(event);\n  };\n  Droppable.prototype.dragLeave = function (event) {\n    event.preventDefault();\n    this.onDragLeave.emit(event);\n  };\n  Droppable.prototype.dragOver = function (event) {\n    event.preventDefault();\n    this.onDragOver.emit(event);\n  };\n  Droppable.prototype.allowDrop = function (event) {\n    var dragScope = event.dataTransfer.getData('text');\n    if (typeof this.scope == \"string\" && dragScope == this.scope) {\n      return true;\n    } else if (this.scope instanceof Array) {\n      for (var j = 0; j < this.scope.length; j++) {\n        if (dragScope == this.scope[j]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  return Droppable;\n}();\n__decorate([core_1.Input('pDroppable'), __metadata(\"design:type\", Object)], Droppable.prototype, \"scope\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Droppable.prototype, \"dropEffect\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Droppable.prototype, \"onDragEnter\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Droppable.prototype, \"onDragLeave\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Droppable.prototype, \"onDrop\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Droppable.prototype, \"onDragOver\", void 0);\n__decorate([core_1.HostListener('drop', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Droppable.prototype, \"drop\", null);\n__decorate([core_1.HostListener('dragenter', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Droppable.prototype, \"dragEnter\", null);\n__decorate([core_1.HostListener('dragleave', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Droppable.prototype, \"dragLeave\", null);\n__decorate([core_1.HostListener('dragover', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], Droppable.prototype, \"dragOver\", null);\nDroppable = __decorate([core_1.Directive({\n  selector: '[pDroppable]',\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler])], Droppable);\nexports.Droppable = Droppable;\nvar DragDropModule = function () {\n  function DragDropModule() {}\n  return DragDropModule;\n}();\nDragDropModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Draggable, Droppable],\n  declarations: [Draggable, Droppable]\n})], DragDropModule);\nexports.DragDropModule = DragDropModule;\n//# sourceMappingURL=dragdrop.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}