{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar inputtext_1 = require(\"../inputtext/inputtext\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar forms_1 = require(\"@angular/forms\");\nexports.CHIPS_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return Chips;\n  }),\n  multi: true\n};\nvar Chips = function () {\n  function Chips(el, domHandler) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.onAdd = new core_1.EventEmitter();\n    this.onRemove = new core_1.EventEmitter();\n    this.allowDuplicate = true;\n    this.onFocus = new core_1.EventEmitter();\n    this.onBlur = new core_1.EventEmitter();\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n  }\n  Chips.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    this.templates.forEach(function (item) {\n      switch (item.getType()) {\n        case 'item':\n          _this.itemTemplate = item.template;\n          break;\n        default:\n          _this.itemTemplate = item.template;\n          break;\n      }\n    });\n  };\n  Chips.prototype.writeValue = function (value) {\n    this.value = value;\n  };\n  Chips.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  Chips.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  Chips.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  Chips.prototype.resolveFieldData = function (data, field) {\n    if (data && field) {\n      if (field.indexOf('.') == -1) {\n        return data[field];\n      } else {\n        var fields = field.split('.');\n        var value = data;\n        for (var i = 0, len = fields.length; i < len; ++i) {\n          value = value[fields[i]];\n        }\n        return value;\n      }\n    } else {\n      return null;\n    }\n  };\n  Chips.prototype.onInputFocus = function () {\n    this.focus = true;\n    this.onFocus.emit();\n  };\n  Chips.prototype.onInputBlur = function (event, inputEL) {\n    this.focus = false;\n    if (this.addOnBlur && inputEL.value) {\n      this.addItem(event, inputEL.value);\n      inputEL.value = '';\n    }\n    this.onModelTouched();\n    this.onBlur.emit();\n  };\n  Chips.prototype.removeItem = function (event, index) {\n    if (this.disabled) {\n      return;\n    }\n    var removedItem = this.value[index];\n    this.value = this.value.filter(function (val, i) {\n      return i != index;\n    });\n    this.onModelChange(this.value);\n    this.onRemove.emit({\n      originalEvent: event,\n      value: removedItem\n    });\n  };\n  Chips.prototype.addItem = function (event, item) {\n    this.value = this.value || [];\n    if (item && item.trim().length && (!this.max || this.max > item.length)) {\n      if (this.allowDuplicate || this.value.indexOf(item) === -1) {\n        this.value = this.value.concat([item]);\n        this.onModelChange(this.value);\n        this.onAdd.emit({\n          originalEvent: event,\n          value: item\n        });\n      }\n    }\n  };\n  Chips.prototype.onKeydown = function (event, inputEL) {\n    switch (event.which) {\n      //backspace\n      case 8:\n        if (inputEL.value.length === 0 && this.value && this.value.length > 0) {\n          this.value = this.value.slice();\n          var removedItem = this.value.pop();\n          this.onModelChange(this.value);\n          this.onRemove.emit({\n            originalEvent: event,\n            value: removedItem\n          });\n        }\n        break;\n      //enter\n      case 13:\n        this.addItem(event, inputEL.value);\n        inputEL.value = '';\n        event.preventDefault();\n        break;\n      case 9:\n        if (this.addOnTab && inputEL.value !== '') {\n          this.addItem(event, inputEL.value);\n          inputEL.value = '';\n          event.preventDefault();\n        }\n        break;\n      default:\n        if (this.max && this.value && this.max === this.value.length) {\n          event.preventDefault();\n        }\n        break;\n    }\n  };\n  Object.defineProperty(Chips.prototype, \"maxedOut\", {\n    get: function () {\n      return this.max && this.value && this.max === this.value.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Chips;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Chips.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Chips.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Chips.prototype, \"disabled\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Chips.prototype, \"onAdd\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Chips.prototype, \"onRemove\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Chips.prototype, \"field\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Chips.prototype, \"placeholder\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Chips.prototype, \"max\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Chips.prototype, \"tabindex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Chips.prototype, \"inputId\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Chips.prototype, \"allowDuplicate\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Chips.prototype, \"inputStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Chips.prototype, \"inputStyleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Chips.prototype, \"addOnTab\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Chips.prototype, \"addOnBlur\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Chips.prototype, \"onFocus\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Chips.prototype, \"onBlur\", void 0);\n__decorate([core_1.ContentChildren(shared_1.PrimeTemplate), __metadata(\"design:type\", core_1.QueryList)], Chips.prototype, \"templates\", void 0);\nChips = __decorate([core_1.Component({\n  selector: 'p-chips',\n  template: \"\\n        <div [ngClass]=\\\"'ui-chips ui-widget'\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <ul [ngClass]=\\\"{'ui-inputtext ui-state-default ui-corner-all':true,'ui-state-focus':focus,'ui-state-disabled':disabled}\\\" (click)=\\\"inputtext.focus()\\\">\\n                <li #token *ngFor=\\\"let item of value; let i = index;\\\" class=\\\"ui-chips-token ui-state-highlight ui-corner-all\\\">\\n                    <span *ngIf=\\\"!disabled\\\" class=\\\"ui-chips-token-icon fa fa-fw fa-close\\\" (click)=\\\"removeItem($event,i)\\\"></span>\\n                    <span *ngIf=\\\"!itemTemplate\\\" class=\\\"ui-chips-token-label\\\">{{field ? resolveFieldData(item,field) : item}}</span>\\n                    <ng-template *ngIf=\\\"itemTemplate\\\" [pTemplateWrapper]=\\\"itemTemplate\\\" [item]=\\\"item\\\"></ng-template>\\n                </li>\\n                <li class=\\\"ui-chips-input-token\\\">\\n                    <input #inputtext type=\\\"text\\\" [attr.id]=\\\"inputId\\\" [attr.placeholder]=\\\"placeholder\\\" [attr.tabindex]=\\\"tabindex\\\" (keydown)=\\\"onKeydown($event,inputtext)\\\" \\n                        (focus)=\\\"onInputFocus()\\\" (blur)=\\\"onInputBlur($event,inputtext)\\\" [disabled]=\\\"maxedOut||disabled\\\" [disabled]=\\\"disabled\\\" [ngStyle]=\\\"inputStyle\\\" [class]=\\\"inputStyleClass\\\">\\n                </li>\\n            </ul>\\n        </div>\\n    \",\n  providers: [domhandler_1.DomHandler, exports.CHIPS_VALUE_ACCESSOR]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler])], Chips);\nexports.Chips = Chips;\nvar ChipsModule = function () {\n  function ChipsModule() {}\n  return ChipsModule;\n}();\nChipsModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, inputtext_1.InputTextModule, shared_1.SharedModule],\n  exports: [Chips, inputtext_1.InputTextModule, shared_1.SharedModule],\n  declarations: [Chips]\n})], ChipsModule);\nexports.ChipsModule = ChipsModule;\n//# sourceMappingURL=chips.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}