{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar button_1 = require(\"../button/button\");\nvar router_1 = require(\"@angular/router\");\nvar router_2 = require(\"@angular/router\");\nvar SplitButton = function () {\n  function SplitButton(el, domHandler, renderer, router, cd) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.router = router;\n    this.cd = cd;\n    this.iconPos = 'left';\n    this.onClick = new core_1.EventEmitter();\n    this.onDropdownClick = new core_1.EventEmitter();\n    this.menuVisible = false;\n  }\n  SplitButton.prototype.ngAfterViewInit = function () {\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.overlayViewChild.nativeElement);else this.domHandler.appendChild(this.overlayViewChild.nativeElement, this.appendTo);\n    }\n  };\n  SplitButton.prototype.ngAfterViewChecked = function () {\n    if (this.shown) {\n      this.onShow();\n      this.shown = false;\n    }\n  };\n  SplitButton.prototype.onDefaultButtonClick = function (event) {\n    this.onClick.emit(event);\n  };\n  SplitButton.prototype.itemClick = function (event, item) {\n    if (item.disabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!item.url) {\n      event.preventDefault();\n    }\n    if (item.command) {\n      item.command({\n        originalEvent: event,\n        item: item\n      });\n    }\n    this.menuVisible = false;\n  };\n  SplitButton.prototype.show = function () {\n    this.shown = true;\n    this.menuVisible = !this.menuVisible;\n    this.alignPanel();\n    this.overlayViewChild.nativeElement.style.zIndex = String(++domhandler_1.DomHandler.zindex);\n  };\n  SplitButton.prototype.onShow = function () {\n    this.alignPanel();\n    this.bindDocumentClickListener();\n  };\n  SplitButton.prototype.onDropdownButtonClick = function (event) {\n    this.onDropdownClick.emit(event);\n    this.dropdownClick = true;\n    this.show();\n  };\n  SplitButton.prototype.alignPanel = function () {\n    if (this.appendTo) this.domHandler.absolutePosition(this.overlayViewChild.nativeElement, this.buttonViewChild.nativeElement);else this.domHandler.relativePosition(this.overlayViewChild.nativeElement, this.buttonViewChild.nativeElement);\n  };\n  SplitButton.prototype.bindDocumentClickListener = function () {\n    var _this = this;\n    if (!this.documentClickListener) {\n      this.documentClickListener = this.renderer.listen('document', 'click', function () {\n        if (_this.dropdownClick) {\n          _this.dropdownClick = false;\n        } else {\n          _this.menuVisible = false;\n          _this.unbindDocumentClickListener();\n          _this.cd.markForCheck();\n        }\n      });\n    }\n  };\n  SplitButton.prototype.unbindDocumentClickListener = function () {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n      this.documentClickListener = null;\n    }\n  };\n  SplitButton.prototype.ngOnDestroy = function () {\n    this.unbindDocumentClickListener();\n  };\n  return SplitButton;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Array)], SplitButton.prototype, \"model\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], SplitButton.prototype, \"icon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], SplitButton.prototype, \"iconPos\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], SplitButton.prototype, \"label\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], SplitButton.prototype, \"onClick\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], SplitButton.prototype, \"onDropdownClick\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], SplitButton.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], SplitButton.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], SplitButton.prototype, \"menuStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], SplitButton.prototype, \"menuStyleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], SplitButton.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], SplitButton.prototype, \"tabindex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], SplitButton.prototype, \"appendTo\", void 0);\n__decorate([core_1.ViewChild('defaultbtn'), __metadata(\"design:type\", core_1.ElementRef)], SplitButton.prototype, \"buttonViewChild\", void 0);\n__decorate([core_1.ViewChild('overlay'), __metadata(\"design:type\", core_1.ElementRef)], SplitButton.prototype, \"overlayViewChild\", void 0);\nSplitButton = __decorate([core_1.Component({\n  selector: 'p-splitButton',\n  template: \"\\n        <div #container [ngClass]=\\\"{'ui-splitbutton ui-buttonset ui-widget':true,'ui-state-disabled':disabled}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <button #defaultbtn type=\\\"button\\\" pButton [icon]=\\\"icon\\\" [iconPos]=\\\"iconPos\\\" [label]=\\\"label\\\" cornerStyleClass=\\\"ui-corner-left\\\" (click)=\\\"onDefaultButtonClick($event)\\\" [disabled]=\\\"disabled\\\" [attr.tabindex]=\\\"tabindex\\\">\\n            </button><button type=\\\"button\\\" pButton class=\\\"ui-splitbutton-menubutton\\\" icon=\\\"fa-caret-down\\\" cornerStyleClass=\\\"ui-corner-right\\\" (click)=\\\"onDropdownButtonClick($event)\\\" [disabled]=\\\"disabled\\\"></button>\\n            <div #overlay [ngClass]=\\\"'ui-menu ui-menu-dynamic ui-widget ui-widget-content ui-corner-all ui-helper-clearfix ui-shadow'\\\" [style.display]=\\\"menuVisible ? 'block' : 'none'\\\"\\n                    [ngStyle]=\\\"menuStyle\\\" [class]=\\\"menuStyleClass\\\" [@overlayState]=\\\"menuVisible ? 'visible' : 'hidden'\\\">\\n                <ul class=\\\"ui-menu-list ui-helper-reset\\\">\\n                    <li class=\\\"ui-menuitem ui-widget ui-corner-all\\\" role=\\\"menuitem\\\" *ngFor=\\\"let item of model\\\">\\n                        <a *ngIf=\\\"!item.routerLink\\\" [href]=\\\"item.url||'#'\\\" class=\\\"ui-menuitem-link ui-corner-all\\\" [attr.target]=\\\"item.target\\\"\\n                            [ngClass]=\\\"{'ui-state-disabled':item.disabled}\\\" (click)=\\\"itemClick($event, item)\\\">\\n                            <span [ngClass]=\\\"'ui-menuitem-icon fa fa-fw'\\\" [class]=\\\"item.icon\\\" *ngIf=\\\"item.icon\\\"></span>\\n                            <span class=\\\"ui-menuitem-text\\\">{{item.label}}</span>\\n                        </a>\\n                        <a *ngIf=\\\"item.routerLink\\\" [routerLink]=\\\"item.routerLink\\\" [queryParams]=\\\"item.queryParams\\\"\\n                            class=\\\"ui-menuitem-link ui-corner-all\\\" [attr.target]=\\\"item.target\\\" [ngClass]=\\\"{'ui-state-disabled':item.disabled}\\\" (click)=\\\"itemClick($event, item)\\\">\\n                            <span [ngClass]=\\\"'ui-menuitem-icon fa fa-fw'\\\" [class]=\\\"item.icon\\\" *ngIf=\\\"item.icon\\\"></span>\\n                            <span class=\\\"ui-menuitem-text\\\">{{item.label}}</span>\\n                        </a>\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    \",\n  animations: [animations_1.trigger('overlayState', [animations_1.state('hidden', animations_1.style({\n    opacity: 0\n  })), animations_1.state('visible', animations_1.style({\n    opacity: 1\n  })), animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')), animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))])],\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, router_1.Router, core_1.ChangeDetectorRef])], SplitButton);\nexports.SplitButton = SplitButton;\nvar SplitButtonModule = function () {\n  function SplitButtonModule() {}\n  return SplitButtonModule;\n}();\nSplitButtonModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, button_1.ButtonModule, router_2.RouterModule],\n  exports: [SplitButton, button_1.ButtonModule, router_2.RouterModule],\n  declarations: [SplitButton]\n})], SplitButtonModule);\nexports.SplitButtonModule = SplitButtonModule;\n//# sourceMappingURL=splitbutton.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}