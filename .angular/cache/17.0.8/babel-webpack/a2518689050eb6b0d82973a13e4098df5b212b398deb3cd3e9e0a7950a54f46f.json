{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar objectutils_1 = require(\"../utils/objectutils\");\nvar shared_1 = require(\"../common/shared\");\nvar forms_1 = require(\"@angular/forms\");\nexports.MULTISELECT_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return MultiSelect;\n  }),\n  multi: true\n};\nvar MultiSelect = function () {\n  function MultiSelect(el, domHandler, renderer, objectUtils, cd) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.objectUtils = objectUtils;\n    this.cd = cd;\n    this.scrollHeight = '200px';\n    this.defaultLabel = 'Choose';\n    this.filter = true;\n    this.displaySelectedLabel = true;\n    this.maxSelectedLabels = 3;\n    this.selectedItemsLabel = '{0} items selected';\n    this.showToggleAll = true;\n    this.resetFilterOnHide = false;\n    this.dropdownIcon = 'fa fa-fw fa-caret-down';\n    this.onChange = new core_1.EventEmitter();\n    this.onFocus = new core_1.EventEmitter();\n    this.onBlur = new core_1.EventEmitter();\n    this.onPanelShow = new core_1.EventEmitter();\n    this.onPanelHide = new core_1.EventEmitter();\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n  }\n  Object.defineProperty(MultiSelect.prototype, \"options\", {\n    get: function () {\n      return this._options;\n    },\n    set: function (val) {\n      var opts = this.optionLabel ? this.objectUtils.generateSelectItems(val, this.optionLabel) : val;\n      this._options = opts;\n      this.updateLabel();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  MultiSelect.prototype.ngOnInit = function () {\n    this.updateLabel();\n  };\n  MultiSelect.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    this.templates.forEach(function (item) {\n      switch (item.getType()) {\n        case 'item':\n          _this.itemTemplate = item.template;\n          break;\n        default:\n          _this.itemTemplate = item.template;\n          break;\n      }\n    });\n  };\n  MultiSelect.prototype.ngAfterViewInit = function () {\n    this.container = this.containerViewChild.nativeElement;\n    this.panel = this.panelViewChild.nativeElement;\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.panel);else this.domHandler.appendChild(this.panel, this.appendTo);\n    }\n    if (this.overlayVisible) {\n      this.show();\n    }\n  };\n  MultiSelect.prototype.ngAfterViewChecked = function () {\n    if (this.filtered) {\n      if (this.appendTo) this.domHandler.absolutePosition(this.panel, this.container);else this.domHandler.relativePosition(this.panel, this.container);\n      this.filtered = false;\n    }\n  };\n  MultiSelect.prototype.writeValue = function (value) {\n    this.value = value;\n    this.updateLabel();\n    this.cd.markForCheck();\n  };\n  MultiSelect.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  MultiSelect.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  MultiSelect.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  MultiSelect.prototype.onItemClick = function (event, value) {\n    var selectionIndex = this.findSelectionIndex(value);\n    if (selectionIndex != -1) this.value = this.value.filter(function (val, i) {\n      return i != selectionIndex;\n    });else this.value = (this.value || []).concat([value]);\n    this.onModelChange(this.value);\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.value\n    });\n    this.updateLabel();\n  };\n  MultiSelect.prototype.isSelected = function (value) {\n    return this.findSelectionIndex(value) != -1;\n  };\n  MultiSelect.prototype.findSelectionIndex = function (val) {\n    var index = -1;\n    if (this.value) {\n      for (var i = 0; i < this.value.length; i++) {\n        if (this.objectUtils.equals(this.value[i], val, this.dataKey)) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  };\n  MultiSelect.prototype.toggleAll = function (event, checkbox) {\n    if (checkbox.checked) {\n      this.value = [];\n    } else {\n      var opts = this.getVisibleOptions();\n      if (opts) {\n        this.value = [];\n        for (var i = 0; i < opts.length; i++) {\n          this.value.push(opts[i].value);\n        }\n      }\n    }\n    checkbox.checked = !checkbox.checked;\n    this.onModelChange(this.value);\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.value\n    });\n    this.updateLabel();\n  };\n  MultiSelect.prototype.isAllChecked = function () {\n    if (this.filterValue && this.filterValue.trim().length) return this.value && this.visibleOptions && this.visibleOptions.length && this.value.length == this.visibleOptions.length;else return this.value && this.options && this.value.length == this.options.length;\n  };\n  MultiSelect.prototype.show = function () {\n    this.overlayVisible = true;\n    this.panel.style.zIndex = String(++domhandler_1.DomHandler.zindex);\n    this.bindDocumentClickListener();\n    if (this.appendTo) this.domHandler.absolutePosition(this.panel, this.container);else this.domHandler.relativePosition(this.panel, this.container);\n    this.domHandler.fadeIn(this.panel, 250);\n    this.onPanelShow.emit();\n  };\n  MultiSelect.prototype.hide = function () {\n    this.overlayVisible = false;\n    this.unbindDocumentClickListener();\n    if (this.resetFilterOnHide) {\n      this.filterValue = null;\n      this.filterInputChild.nativeElement.value = null;\n    }\n    this.onPanelHide.emit();\n  };\n  MultiSelect.prototype.close = function (event) {\n    this.hide();\n    event.preventDefault();\n    event.stopPropagation();\n  };\n  MultiSelect.prototype.onMouseclick = function (event, input) {\n    if (this.disabled) {\n      return;\n    }\n    if (!this.panelClick) {\n      if (this.overlayVisible) {\n        this.hide();\n      } else {\n        input.focus();\n        this.show();\n      }\n    }\n    this.selfClick = true;\n  };\n  MultiSelect.prototype.onInputFocus = function (event) {\n    this.focus = true;\n    this.onFocus.emit({\n      originalEvent: event\n    });\n  };\n  MultiSelect.prototype.onInputBlur = function (event) {\n    this.focus = false;\n    this.onBlur.emit({\n      originalEvent: event\n    });\n    this.onModelTouched();\n  };\n  MultiSelect.prototype.updateLabel = function () {\n    if (this.value && this.options && this.value.length && this.displaySelectedLabel) {\n      var label = '';\n      for (var i = 0; i < this.value.length; i++) {\n        var itemLabel = this.findLabelByValue(this.value[i]);\n        if (itemLabel) {\n          if (label.length > 0) {\n            label = label + ', ';\n          }\n          label = label + itemLabel;\n        }\n      }\n      if (this.value.length <= this.maxSelectedLabels) {\n        this.valuesAsString = label;\n      } else {\n        var pattern = /{(.*?)}/,\n          newSelectedItemsLabel = this.selectedItemsLabel.replace(this.selectedItemsLabel.match(pattern)[0], this.value.length + '');\n        this.valuesAsString = newSelectedItemsLabel;\n      }\n    } else {\n      this.valuesAsString = this.defaultLabel;\n    }\n  };\n  MultiSelect.prototype.findLabelByValue = function (val) {\n    var label = null;\n    for (var i = 0; i < this.options.length; i++) {\n      var option = this.options[i];\n      if (val == null && option.value == null || this.objectUtils.equals(val, option.value, this.dataKey)) {\n        label = option.label;\n        break;\n      }\n    }\n    return label;\n  };\n  MultiSelect.prototype.onFilter = function (event) {\n    this.filterValue = event.target.value.trim().toLowerCase();\n    this.visibleOptions = [];\n    for (var i = 0; i < this.options.length; i++) {\n      var option = this.options[i];\n      if (option.label.toLowerCase().indexOf(this.filterValue.toLowerCase()) > -1) {\n        this.visibleOptions.push(option);\n      }\n    }\n    this.filtered = true;\n  };\n  MultiSelect.prototype.isItemVisible = function (option) {\n    if (this.filterValue && this.filterValue.trim().length) {\n      for (var i = 0; i < this.visibleOptions.length; i++) {\n        if (this.visibleOptions[i].value == option.value) {\n          return true;\n        }\n      }\n    } else {\n      return true;\n    }\n  };\n  MultiSelect.prototype.getVisibleOptions = function () {\n    if (this.filterValue && this.filterValue.trim().length) {\n      var items = [];\n      for (var i = 0; i < this.options.length; i++) {\n        var option = this.options[i];\n        if (option.label.toLowerCase().includes(this.filterValue.toLowerCase())) {\n          items.push(option);\n        }\n      }\n      return items;\n    } else {\n      return this.options;\n    }\n  };\n  MultiSelect.prototype.bindDocumentClickListener = function () {\n    var _this = this;\n    if (!this.documentClickListener) {\n      this.documentClickListener = this.renderer.listen('document', 'click', function () {\n        if (!_this.selfClick && !_this.panelClick && _this.overlayVisible) {\n          _this.hide();\n        }\n        _this.selfClick = false;\n        _this.panelClick = false;\n        _this.cd.markForCheck();\n      });\n    }\n  };\n  MultiSelect.prototype.unbindDocumentClickListener = function () {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n      this.documentClickListener = null;\n    }\n  };\n  MultiSelect.prototype.ngOnDestroy = function () {\n    this.unbindDocumentClickListener();\n    if (this.appendTo) {\n      this.container.appendChild(this.panel);\n    }\n  };\n  return MultiSelect;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"scrollHeight\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"defaultLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], MultiSelect.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], MultiSelect.prototype, \"panelStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"panelStyleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"inputId\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], MultiSelect.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], MultiSelect.prototype, \"filter\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], MultiSelect.prototype, \"overlayVisible\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], MultiSelect.prototype, \"tabindex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], MultiSelect.prototype, \"appendTo\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"dataKey\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], MultiSelect.prototype, \"displaySelectedLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], MultiSelect.prototype, \"maxSelectedLabels\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"selectedItemsLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], MultiSelect.prototype, \"showToggleAll\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], MultiSelect.prototype, \"resetFilterOnHide\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"dropdownIcon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], MultiSelect.prototype, \"optionLabel\", void 0);\n__decorate([core_1.ViewChild('container'), __metadata(\"design:type\", core_1.ElementRef)], MultiSelect.prototype, \"containerViewChild\", void 0);\n__decorate([core_1.ViewChild('panel'), __metadata(\"design:type\", core_1.ElementRef)], MultiSelect.prototype, \"panelViewChild\", void 0);\n__decorate([core_1.ViewChild('filterInput'), __metadata(\"design:type\", core_1.ElementRef)], MultiSelect.prototype, \"filterInputChild\", void 0);\n__decorate([core_1.ContentChildren(shared_1.PrimeTemplate), __metadata(\"design:type\", core_1.QueryList)], MultiSelect.prototype, \"templates\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], MultiSelect.prototype, \"onChange\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], MultiSelect.prototype, \"onFocus\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], MultiSelect.prototype, \"onBlur\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], MultiSelect.prototype, \"onPanelShow\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], MultiSelect.prototype, \"onPanelHide\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], MultiSelect.prototype, \"options\", null);\nMultiSelect = __decorate([core_1.Component({\n  selector: 'p-multiSelect',\n  template: \"\\n        <div #container [ngClass]=\\\"{'ui-multiselect ui-widget ui-state-default ui-corner-all':true,'ui-state-focus':focus,'ui-state-disabled': disabled}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\"\\n            (click)=\\\"onMouseclick($event,in)\\\">\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input #in type=\\\"text\\\" readonly=\\\"readonly\\\" [attr.id]=\\\"inputId\\\" (focus)=\\\"onInputFocus($event)\\\" (blur)=\\\"onInputBlur($event)\\\" [disabled]=\\\"disabled\\\" [attr.tabindex]=\\\"tabindex\\\">\\n            </div>\\n            <div class=\\\"ui-multiselect-label-container\\\" [title]=\\\"valuesAsString\\\">\\n                <label class=\\\"ui-multiselect-label ui-corner-all\\\">{{valuesAsString}}</label>\\n            </div>\\n            <div [ngClass]=\\\"{'ui-multiselect-trigger ui-state-default ui-corner-right':true}\\\">\\n                <span class=\\\"ui-clickable\\\" [ngClass]=\\\"dropdownIcon\\\"></span>\\n            </div>\\n            <div #panel [ngClass]=\\\"['ui-multiselect-panel ui-widget ui-widget-content ui-corner-all ui-shadow', panelStyleClass||'']\\\" [ngStyle]=\\\"panelStyle\\\"\\n                [style.display]=\\\"overlayVisible ? 'block' : 'none'\\\" (click)=\\\"panelClick=true\\\">\\n                <div class=\\\"ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix\\\" [ngClass]=\\\"{'ui-multiselect-header-no-toggleall': !showToggleAll}\\\">\\n                    <div class=\\\"ui-chkbox ui-widget\\\" *ngIf=\\\"showToggleAll\\\">\\n                        <div class=\\\"ui-helper-hidden-accessible\\\">\\n                            <input #cb type=\\\"checkbox\\\" readonly=\\\"readonly\\\" [checked]=\\\"isAllChecked()\\\">\\n                        </div>\\n                        <div class=\\\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\\\" [ngClass]=\\\"{'ui-state-active':isAllChecked()}\\\" (click)=\\\"toggleAll($event,cb)\\\">\\n                            <span class=\\\"ui-chkbox-icon ui-clickable\\\" [ngClass]=\\\"{'fa fa-check':isAllChecked()}\\\"></span>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"ui-multiselect-filter-container\\\" *ngIf=\\\"filter\\\">\\n                        <input #filterInput type=\\\"text\\\" role=\\\"textbox\\\" (input)=\\\"onFilter($event)\\\"\\n                                    class=\\\"ui-inputtext ui-widget ui-state-default ui-corner-all\\\">\\n                        <span class=\\\"fa fa-fw fa-search\\\"></span>\\n                    </div>\\n                    <a class=\\\"ui-multiselect-close ui-corner-all\\\" href=\\\"#\\\" (click)=\\\"close($event)\\\">\\n                        <span class=\\\"fa fa-close\\\"></span>\\n                    </a>\\n                </div>\\n                <div class=\\\"ui-multiselect-items-wrapper\\\">\\n                    <ul class=\\\"ui-multiselect-items ui-multiselect-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\\\" [style.max-height]=\\\"scrollHeight||'auto'\\\">\\n                        <li *ngFor=\\\"let option of options; let index = i\\\" class=\\\"ui-multiselect-item ui-corner-all\\\" (click)=\\\"onItemClick($event,option.value)\\\" \\n                            [style.display]=\\\"isItemVisible(option) ? 'block' : 'none'\\\" [ngClass]=\\\"{'ui-state-highlight':isSelected(option.value)}\\\">\\n                            <div class=\\\"ui-chkbox ui-widget\\\">\\n                                <div class=\\\"ui-helper-hidden-accessible\\\">\\n                                    <input type=\\\"checkbox\\\" readonly=\\\"readonly\\\" [checked]=\\\"isSelected(option.value)\\\">\\n                                </div>\\n                                <div class=\\\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\\\" [ngClass]=\\\"{'ui-state-active':isSelected(option.value)}\\\">\\n                                    <span class=\\\"ui-chkbox-icon ui-clickable\\\" [ngClass]=\\\"{'fa fa-check':isSelected(option.value)}\\\"></span>\\n                                </div>\\n                            </div>\\n                            <label *ngIf=\\\"!itemTemplate\\\">{{option.label}}</label>\\n                            <ng-template [pTemplateWrapper]=\\\"itemTemplate\\\" [item]=\\\"option\\\" [index]=\\\"i\\\" *ngIf=\\\"itemTemplate\\\"></ng-template>\\n                        </li>\\n                    </ul>\\n                </div>\\n            </div>\\n        </div>\\n    \",\n  providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, exports.MULTISELECT_VALUE_ACCESSOR]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, objectutils_1.ObjectUtils, core_1.ChangeDetectorRef])], MultiSelect);\nexports.MultiSelect = MultiSelect;\nvar MultiSelectModule = function () {\n  function MultiSelectModule() {}\n  return MultiSelectModule;\n}();\nMultiSelectModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, shared_1.SharedModule],\n  exports: [MultiSelect, shared_1.SharedModule],\n  declarations: [MultiSelect]\n})], MultiSelectModule);\nexports.MultiSelectModule = MultiSelectModule;\n//# sourceMappingURL=multiselect.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}