{"ast":null,"code":"import 'rxjs/add/operator/toPromise'; //to support toPromise\nimport * as i0 from \"@angular/core\";\nexport class DataService {\n  constructor() {\n    this.dataDictionary = new Dictionary();\n  }\n  writeData(key, data, local = false) {\n    if (local) {\n      localStorage.setItem(key, data);\n      this.dataDictionary.Add(key, data);\n    } else {\n      sessionStorage.setItem(key, data);\n      this.dataDictionary.Add(key, data);\n    }\n  }\n  getData(key) {\n    if (this.dataDictionary.Item(key)) {\n      return this.dataDictionary.Item(key);\n    } else if (localStorage.getItem(key)) {\n      this.dataDictionary.Add(key, localStorage.getItem(key));\n      return this.dataDictionary.Item(key);\n    } else if (sessionStorage.getItem(key)) {\n      this.dataDictionary.Add(key, sessionStorage.getItem(key));\n      return this.dataDictionary.Item(key);\n    }\n  }\n  clearAll() {\n    this.dataDictionary.Truncate();\n    //save some settings\n    let collectDateBegin = sessionStorage.getItem('collectDateBegin');\n    let collectDateEnd = sessionStorage.getItem('collectDateEnd');\n    let payoutDateBegin = sessionStorage.getItem('payoutDateBegin');\n    let payoutDateEnd = sessionStorage.getItem('payoutDateEnd');\n    //clear whole session storage\n    sessionStorage.clear();\n    if (collectDateBegin != null && collectDateEnd != null) {\n      sessionStorage.setItem('collectDateBegin', collectDateBegin);\n      sessionStorage.setItem('collectDateEnd', collectDateEnd);\n    }\n    if (payoutDateBegin != null && payoutDateEnd != null) {\n      sessionStorage.setItem('payoutDateBegin', payoutDateBegin);\n      sessionStorage.setItem('payoutDateEnd', payoutDateEnd);\n    }\n    //don't delete first Day Of Week\n    let firstDayOfWeek = localStorage.getItem(\"FirstDayOfWeek\");\n    localStorage.clear();\n    if (firstDayOfWeek && !isNaN(Number(firstDayOfWeek))) {\n      localStorage.setItem(\"FirstDayOfWeek\", firstDayOfWeek);\n    }\n  }\n  removeOne(key) {\n    var val = this.dataDictionary.Remove(key);\n    sessionStorage.removeItem(key);\n    localStorage.removeItem(key);\n    return val;\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac\n  });\n}\nexport class Dictionary {\n  constructor() {\n    this.items = {};\n    this.count = 0;\n  }\n  ContainsKey(key) {\n    return this.items.hasOwnProperty(key);\n  }\n  Truncate() {\n    this.items = {};\n  }\n  Count() {\n    return this.count;\n  }\n  Add(key, value) {\n    this.items[key] = value;\n    this.count++;\n  }\n  Remove(key) {\n    if (this.items.hasOwnProperty(key)) {\n      var val = this.items[key];\n      delete this.items[key];\n      this.count--;\n      return val;\n    }\n    return null;\n  }\n  Item(key) {\n    return this.items[key];\n  }\n  Keys() {\n    return Object.keys(this.items);\n  }\n  Values() {\n    return Object.keys(this.items).map(function (key) {\n      return this.items[key];\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}