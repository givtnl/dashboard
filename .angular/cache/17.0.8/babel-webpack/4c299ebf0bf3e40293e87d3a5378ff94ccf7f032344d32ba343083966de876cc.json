{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar messageservice_1 = require(\"../common/messageservice\");\nvar Growl = function () {\n  function Growl(el, domHandler, differs, messageService) {\n    var _this = this;\n    this.el = el;\n    this.domHandler = domHandler;\n    this.differs = differs;\n    this.messageService = messageService;\n    this.life = 3000;\n    this.immutable = true;\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n    this.onClick = new core_1.EventEmitter();\n    this.onHover = new core_1.EventEmitter();\n    this.onClose = new core_1.EventEmitter();\n    this.valueChange = new core_1.EventEmitter();\n    this.differ = differs.find([]).create(null);\n    if (messageService) {\n      this.subscription = messageService.messageObserver.subscribe(function (messages) {\n        if (messages) {\n          if (messages instanceof Array) _this.value = _this.value ? _this.value.concat(messages) : messages.slice();else _this.value = _this.value ? _this.value.concat([messages]) : [messages];\n        } else {\n          _this.value = null;\n        }\n      });\n    }\n  }\n  Growl.prototype.ngAfterViewInit = function () {\n    if (!this.sticky) {\n      this.initTimeout();\n    }\n  };\n  Object.defineProperty(Growl.prototype, \"value\", {\n    get: function () {\n      return this._value;\n    },\n    set: function (val) {\n      this._value = val;\n      if (this.containerViewChild && this.containerViewChild.nativeElement && this.immutable) {\n        this.handleValueChange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Growl.prototype.ngDoCheck = function () {\n    if (!this.immutable && this.containerViewChild && this.containerViewChild.nativeElement) {\n      var changes = this.differ.diff(this.value);\n      if (changes) {\n        this.handleValueChange();\n      }\n    }\n  };\n  Growl.prototype.handleValueChange = function () {\n    if (this.preventRerender) {\n      this.preventRerender = false;\n      return;\n    }\n    if (this.autoZIndex) {\n      this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + ++domhandler_1.DomHandler.zindex);\n    }\n    this.domHandler.fadeIn(this.containerViewChild.nativeElement, 250);\n    if (!this.sticky) {\n      this.initTimeout();\n    }\n  };\n  Growl.prototype.initTimeout = function () {\n    var _this = this;\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.timeout = setTimeout(function () {\n      _this.removeAll();\n    }, this.life);\n  };\n  Growl.prototype.remove = function (index, msgel) {\n    var _this = this;\n    this.closeIconClick = true;\n    this.domHandler.fadeOut(msgel, 250);\n    setTimeout(function () {\n      _this.preventRerender = true;\n      _this.onClose.emit({\n        message: _this.value[index]\n      });\n      if (_this.immutable) {\n        _this._value = _this.value.filter(function (val, i) {\n          return i != index;\n        });\n        _this.valueChange.emit(_this._value);\n      } else {\n        _this._value.splice(index, 1);\n      }\n    }, 250);\n  };\n  Growl.prototype.removeAll = function () {\n    var _this = this;\n    if (this.value && this.value.length) {\n      this.domHandler.fadeOut(this.containerViewChild.nativeElement, 250);\n      setTimeout(function () {\n        _this.value.forEach(function (msg, index) {\n          return _this.onClose.emit({\n            message: _this.value[index]\n          });\n        });\n        if (_this.immutable) {\n          _this.value = [];\n          _this.valueChange.emit(_this.value);\n        } else {\n          _this.value.splice(0, _this.value.length);\n        }\n      }, 250);\n    }\n  };\n  Growl.prototype.onMessageClick = function (i) {\n    if (this.closeIconClick) this.closeIconClick = false;else this.onClick.emit({\n      message: this.value[i]\n    });\n  };\n  Growl.prototype.onMessageHover = function (i) {\n    this.onHover.emit({\n      message: this.value[i]\n    });\n  };\n  Growl.prototype.ngOnDestroy = function () {\n    if (!this.sticky) {\n      clearTimeout(this.timeout);\n    }\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  };\n  return Growl;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Growl.prototype, \"sticky\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Growl.prototype, \"life\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Growl.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Growl.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Growl.prototype, \"immutable\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Growl.prototype, \"autoZIndex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Growl.prototype, \"baseZIndex\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Growl.prototype, \"onClick\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Growl.prototype, \"onHover\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Growl.prototype, \"onClose\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Growl.prototype, \"valueChange\", void 0);\n__decorate([core_1.ViewChild('container'), __metadata(\"design:type\", core_1.ElementRef)], Growl.prototype, \"containerViewChild\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], Growl.prototype, \"value\", null);\nGrowl = __decorate([core_1.Component({\n  selector: 'p-growl',\n  template: \"\\n        <div #container [ngClass]=\\\"'ui-growl ui-widget'\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <div #msgel *ngFor=\\\"let msg of value;let i = index\\\" class=\\\"ui-growl-item-container ui-state-highlight ui-corner-all ui-shadow\\\" aria-live=\\\"polite\\\"\\n                [ngClass]=\\\"{'ui-growl-message-info':msg.severity == 'info','ui-growl-message-warn':msg.severity == 'warn',\\n                    'ui-growl-message-error':msg.severity == 'error','ui-growl-message-success':msg.severity == 'success'}\\\"\\n                    (click)=\\\"onMessageClick(i)\\\" (mouseenter)=\\\"onMessageHover(i)\\\">\\n                <div class=\\\"ui-growl-item\\\">\\n                     <div class=\\\"ui-growl-icon-close fa fa-close\\\" (click)=\\\"remove(i,msgel)\\\"></div>\\n                     <span class=\\\"ui-growl-image fa fa-2x\\\"\\n                        [ngClass]=\\\"{'fa-info-circle':msg.severity == 'info','fa-exclamation-circle':msg.severity == 'warn',\\n                                'fa-close':msg.severity == 'error','fa-check':msg.severity == 'success'}\\\"></span>\\n                     <div class=\\\"ui-growl-message\\\">\\n                        <span class=\\\"ui-growl-title\\\">{{msg.summary}}</span>\\n                        <p [innerHTML]=\\\"msg.detail\\\"></p>\\n                     </div>\\n                     <div style=\\\"clear: both;\\\"></div>\\n                </div>\\n            </div>\\n        </div>\\n    \",\n  providers: [domhandler_1.DomHandler]\n}), __param(3, core_1.Optional()), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.IterableDiffers, messageservice_1.MessageService])], Growl);\nexports.Growl = Growl;\nvar GrowlModule = function () {\n  function GrowlModule() {}\n  return GrowlModule;\n}();\nGrowlModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Growl],\n  declarations: [Growl]\n})], GrowlModule);\nexports.GrowlModule = GrowlModule;\n//# sourceMappingURL=growl.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}