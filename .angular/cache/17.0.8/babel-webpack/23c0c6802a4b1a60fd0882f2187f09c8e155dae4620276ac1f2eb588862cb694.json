{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar Sidebar = function () {\n  function Sidebar(el, domHandler, renderer) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.position = 'left';\n    this.blockScroll = false;\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n    this.onShow = new core_1.EventEmitter();\n    this.onHide = new core_1.EventEmitter();\n    this.visibleChange = new core_1.EventEmitter();\n  }\n  Sidebar.prototype.ngAfterViewInit = function () {\n    this.initialized = true;\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.containerViewChild.nativeElement);else this.domHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\n    }\n    if (this.visible) {\n      this.show();\n    }\n  };\n  Object.defineProperty(Sidebar.prototype, \"visible\", {\n    get: function () {\n      return this._visible;\n    },\n    set: function (val) {\n      this._visible = val;\n      if (this.initialized && this.containerViewChild && this.containerViewChild.nativeElement) {\n        if (this._visible) this.show();else {\n          if (this.preventVisibleChangePropagation) this.preventVisibleChangePropagation = false;else this.hide();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sidebar.prototype.ngAfterViewChecked = function () {\n    if (this.executePostDisplayActions) {\n      this.onShow.emit({});\n      this.executePostDisplayActions = false;\n    }\n  };\n  Sidebar.prototype.show = function () {\n    this.executePostDisplayActions = true;\n    if (this.autoZIndex) {\n      this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + ++domhandler_1.DomHandler.zindex);\n    }\n    this.enableModality();\n  };\n  Sidebar.prototype.hide = function () {\n    this.onHide.emit({});\n    this.disableModality();\n  };\n  Sidebar.prototype.close = function (event) {\n    this.preventVisibleChangePropagation = true;\n    this.hide();\n    this.visibleChange.emit(false);\n    event.preventDefault();\n  };\n  Sidebar.prototype.enableModality = function () {\n    var _this = this;\n    if (!this.mask) {\n      this.mask = document.createElement('div');\n      this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\n      this.domHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-sidebar-mask');\n      this.maskClickListener = this.renderer.listen(this.mask, 'click', function (event) {\n        _this.close(event);\n      });\n      document.body.appendChild(this.mask);\n      if (this.blockScroll) {\n        this.domHandler.addClass(document.body, 'ui-overflow-hidden');\n      }\n    }\n  };\n  Sidebar.prototype.disableModality = function () {\n    if (this.mask) {\n      this.unbindMaskClickListener();\n      document.body.removeChild(this.mask);\n      if (this.blockScroll) {\n        this.domHandler.removeClass(document.body, 'ui-overflow-hidden');\n      }\n      this.mask = null;\n    }\n  };\n  Sidebar.prototype.unbindMaskClickListener = function () {\n    if (this.maskClickListener) {\n      this.maskClickListener();\n      this.maskClickListener = null;\n    }\n  };\n  Sidebar.prototype.ngOnDestroy = function () {\n    this.initialized = false;\n    if (this.visible) {\n      this.hide();\n    }\n    if (this.appendTo) {\n      this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\n    }\n    this.unbindMaskClickListener();\n  };\n  return Sidebar;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Sidebar.prototype, \"position\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Sidebar.prototype, \"fullScreen\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Sidebar.prototype, \"appendTo\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Sidebar.prototype, \"blockScroll\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Sidebar.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Sidebar.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Sidebar.prototype, \"autoZIndex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Sidebar.prototype, \"baseZIndex\", void 0);\n__decorate([core_1.ViewChild('container'), __metadata(\"design:type\", core_1.ElementRef)], Sidebar.prototype, \"containerViewChild\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Sidebar.prototype, \"onShow\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Sidebar.prototype, \"onHide\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Sidebar.prototype, \"visibleChange\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], Sidebar.prototype, \"visible\", null);\nSidebar = __decorate([core_1.Component({\n  selector: 'p-sidebar',\n  template: \"\\n        <div #container [ngClass]=\\\"{'ui-sidebar ui-widget ui-widget-content ui-shadow':true, 'ui-sidebar-active': visible, \\n            'ui-sidebar-left': (position === 'left'), 'ui-sidebar-right': (position === 'right'),\\n            'ui-sidebar-top': (position === 'top'), 'ui-sidebar-bottom': (position === 'bottom'), \\n            'ui-sidebar-full': fullScreen}\\\"\\n            [@panelState]=\\\"visible ? 'visible' : 'hidden'\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <a [ngClass]=\\\"{'ui-sidebar-close ui-corner-all':true}\\\" href=\\\"#\\\" role=\\\"button\\\" (click)=\\\"close($event)\\\">\\n                <span class=\\\"fa fa-fw fa-close\\\"></span>\\n            </a>\\n            <ng-content></ng-content>\\n        </div>\\n    \",\n  animations: [animations_1.trigger('panelState', [animations_1.state('hidden', animations_1.style({\n    opacity: 0\n  })), animations_1.state('visible', animations_1.style({\n    opacity: 1\n  })), animations_1.transition('visible => hidden', animations_1.animate('300ms ease-in')), animations_1.transition('hidden => visible', animations_1.animate('300ms ease-out'))])],\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])], Sidebar);\nexports.Sidebar = Sidebar;\nvar SidebarModule = function () {\n  function SidebarModule() {}\n  return SidebarModule;\n}();\nSidebarModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Sidebar],\n  declarations: [Sidebar]\n})], SidebarModule);\nexports.SidebarModule = SidebarModule;\n//# sourceMappingURL=sidebar.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}