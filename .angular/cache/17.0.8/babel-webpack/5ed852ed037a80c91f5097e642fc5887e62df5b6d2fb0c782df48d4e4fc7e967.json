{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar forms_1 = require(\"@angular/forms\");\nvar dropdown_1 = require(\"../dropdown/dropdown\");\nvar Paginator = function () {\n  function Paginator() {\n    this.pageLinkSize = 5;\n    this.onPageChange = new core_1.EventEmitter();\n    this.alwaysShow = true;\n    this._totalRecords = 0;\n    this._first = 0;\n    this._rows = 0;\n  }\n  Object.defineProperty(Paginator.prototype, \"totalRecords\", {\n    get: function () {\n      return this._totalRecords;\n    },\n    set: function (val) {\n      this._totalRecords = val;\n      this.updatePageLinks();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Paginator.prototype, \"first\", {\n    get: function () {\n      return this._first;\n    },\n    set: function (val) {\n      this._first = val;\n      this.updatePageLinks();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Paginator.prototype, \"rows\", {\n    get: function () {\n      return this._rows;\n    },\n    set: function (val) {\n      this._rows = val;\n      this.updatePageLinks();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Paginator.prototype, \"rowsPerPageOptions\", {\n    get: function () {\n      return this._rowsPerPageOptions;\n    },\n    set: function (val) {\n      this._rowsPerPageOptions = val;\n      if (this._rowsPerPageOptions) {\n        this.rowsPerPageItems = [];\n        for (var _i = 0, _a = this._rowsPerPageOptions; _i < _a.length; _i++) {\n          var opt = _a[_i];\n          this.rowsPerPageItems.push({\n            label: String(opt),\n            value: opt\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Paginator.prototype.isFirstPage = function () {\n    return this.getPage() === 0;\n  };\n  Paginator.prototype.isLastPage = function () {\n    return this.getPage() === this.getPageCount() - 1;\n  };\n  Paginator.prototype.getPageCount = function () {\n    return Math.ceil(this.totalRecords / this.rows) || 1;\n  };\n  Paginator.prototype.calculatePageLinkBoundaries = function () {\n    var numberOfPages = this.getPageCount(),\n      visiblePages = Math.min(this.pageLinkSize, numberOfPages);\n    //calculate range, keep current in middle if necessary\n    var start = Math.max(0, Math.ceil(this.getPage() - visiblePages / 2)),\n      end = Math.min(numberOfPages - 1, start + visiblePages - 1);\n    //check when approaching to last page\n    var delta = this.pageLinkSize - (end - start + 1);\n    start = Math.max(0, start - delta);\n    return [start, end];\n  };\n  Paginator.prototype.updatePageLinks = function () {\n    this.pageLinks = [];\n    var boundaries = this.calculatePageLinkBoundaries(),\n      start = boundaries[0],\n      end = boundaries[1];\n    for (var i = start; i <= end; i++) {\n      this.pageLinks.push(i + 1);\n    }\n  };\n  Paginator.prototype.changePage = function (p) {\n    var pc = this.getPageCount();\n    if (p >= 0 && p < pc) {\n      this.first = this.rows * p;\n      var state = {\n        page: p,\n        first: this.first,\n        rows: this.rows,\n        pageCount: pc\n      };\n      this.updatePageLinks();\n      this.onPageChange.emit(state);\n    }\n  };\n  Paginator.prototype.getPage = function () {\n    return Math.floor(this.first / this.rows);\n  };\n  Paginator.prototype.changePageToFirst = function (event) {\n    if (!this.isFirstPage()) {\n      this.changePage(0);\n    }\n    event.preventDefault();\n  };\n  Paginator.prototype.changePageToPrev = function (event) {\n    this.changePage(this.getPage() - 1);\n    event.preventDefault();\n  };\n  Paginator.prototype.changePageToNext = function (event) {\n    this.changePage(this.getPage() + 1);\n    event.preventDefault();\n  };\n  Paginator.prototype.changePageToLast = function (event) {\n    if (!this.isLastPage()) {\n      this.changePage(this.getPageCount() - 1);\n    }\n    event.preventDefault();\n  };\n  Paginator.prototype.onPageLinkClick = function (event, page) {\n    this.changePage(page);\n    event.preventDefault();\n  };\n  Paginator.prototype.onRppChange = function (event) {\n    this.changePage(this.getPage());\n  };\n  return Paginator;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Paginator.prototype, \"pageLinkSize\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Paginator.prototype, \"onPageChange\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Paginator.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Paginator.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Paginator.prototype, \"alwaysShow\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], Paginator.prototype, \"totalRecords\", null);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], Paginator.prototype, \"first\", null);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], Paginator.prototype, \"rows\", null);\n__decorate([core_1.Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], Paginator.prototype, \"rowsPerPageOptions\", null);\nPaginator = __decorate([core_1.Component({\n  selector: 'p-paginator',\n  template: \"\\n        <div [class]=\\\"styleClass\\\" [ngStyle]=\\\"style\\\" [ngClass]=\\\"'ui-paginator ui-widget ui-widget-header ui-unselectable-text'\\\"\\n            *ngIf=\\\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\\\">\\n            <a href=\\\"#\\\" class=\\\"ui-paginator-first ui-paginator-element ui-state-default ui-corner-all\\\"\\n                    (click)=\\\"changePageToFirst($event)\\\" [ngClass]=\\\"{'ui-state-disabled':isFirstPage()}\\\" [tabindex]=\\\"isFirstPage() ? -1 : null\\\">\\n                <span class=\\\"fa fa-step-backward\\\"></span>\\n            </a>\\n            <a href=\\\"#\\\" class=\\\"ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all\\\"\\n                    (click)=\\\"changePageToPrev($event)\\\" [ngClass]=\\\"{'ui-state-disabled':isFirstPage()}\\\" [tabindex]=\\\"isFirstPage() ? -1 : null\\\">\\n                <span class=\\\"fa fa-backward\\\"></span>\\n            </a>\\n            <span class=\\\"ui-paginator-pages\\\">\\n                <a href=\\\"#\\\" *ngFor=\\\"let pageLink of pageLinks\\\" class=\\\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\\\"\\n                    (click)=\\\"onPageLinkClick($event, pageLink - 1)\\\" [ngClass]=\\\"{'ui-state-active': (pageLink-1 == getPage())}\\\">{{pageLink}}</a>\\n            </span>\\n            <a href=\\\"#\\\" class=\\\"ui-paginator-next ui-paginator-element ui-state-default ui-corner-all\\\"\\n                    (click)=\\\"changePageToNext($event)\\\" [ngClass]=\\\"{'ui-state-disabled':isLastPage()}\\\" [tabindex]=\\\"isLastPage() ? -1 : null\\\">\\n                <span class=\\\"fa fa-forward\\\"></span>\\n            </a>\\n            <a href=\\\"#\\\" class=\\\"ui-paginator-last ui-paginator-element ui-state-default ui-corner-all\\\"\\n                    (click)=\\\"changePageToLast($event)\\\" [ngClass]=\\\"{'ui-state-disabled':isLastPage()}\\\" [tabindex]=\\\"isLastPage() ? -1 : null\\\">\\n                <span class=\\\"fa fa-step-forward\\\"></span>\\n            </a>\\n            <p-dropdown [options]=\\\"rowsPerPageItems\\\" [(ngModel)]=\\\"rows\\\" *ngIf=\\\"rowsPerPageOptions\\\" \\n                (onChange)=\\\"onRppChange($event)\\\" [lazy]=\\\"false\\\" [autoWidth]=\\\"false\\\"></p-dropdown>\\n        </div>\\n    \"\n})], Paginator);\nexports.Paginator = Paginator;\nvar PaginatorModule = function () {\n  function PaginatorModule() {}\n  return PaginatorModule;\n}();\nPaginatorModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, dropdown_1.DropdownModule, forms_1.FormsModule],\n  exports: [Paginator, dropdown_1.DropdownModule, forms_1.FormsModule],\n  declarations: [Paginator]\n})], PaginatorModule);\nexports.PaginatorModule = PaginatorModule;\n//# sourceMappingURL=paginator.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}