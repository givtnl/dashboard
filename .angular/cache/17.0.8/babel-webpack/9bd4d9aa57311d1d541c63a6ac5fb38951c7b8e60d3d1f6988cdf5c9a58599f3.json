{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar animations_1 = require(\"@angular/animations\");\nvar OverlayPanel = function () {\n  function OverlayPanel(el, domHandler, renderer, cd) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.cd = cd;\n    this.dismissable = true;\n    this.onBeforeShow = new core_1.EventEmitter();\n    this.onAfterShow = new core_1.EventEmitter();\n    this.onBeforeHide = new core_1.EventEmitter();\n    this.onAfterHide = new core_1.EventEmitter();\n    this.visible = false;\n  }\n  OverlayPanel.prototype.ngAfterViewInit = function () {\n    this.container = this.el.nativeElement.children[0];\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.container);else this.domHandler.appendChild(this.container, this.appendTo);\n    }\n  };\n  OverlayPanel.prototype.ngAfterViewChecked = function () {\n    if (this.willShow) {\n      this.domHandler.absolutePosition(this.container, this.target);\n      this.bindDocumentClickListener();\n      this.onAfterShow.emit(null);\n      this.willShow = false;\n    }\n    if (this.willHide) {\n      this.onAfterHide.emit(null);\n      this.willHide = false;\n    }\n  };\n  OverlayPanel.prototype.bindDocumentClickListener = function () {\n    var _this = this;\n    if (!this.documentClickListener && this.dismissable) {\n      this.documentClickListener = this.renderer.listen('document', 'click', function () {\n        if (!_this.selfClick && !_this.targetClickEvent) {\n          _this.hide();\n        }\n        _this.selfClick = false;\n        _this.targetClickEvent = false;\n        _this.cd.markForCheck();\n      });\n    }\n  };\n  OverlayPanel.prototype.unbindDocumentClickListener = function () {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n      this.documentClickListener = null;\n    }\n  };\n  OverlayPanel.prototype.toggle = function (event, target) {\n    if (!this.target || this.target === (target || event.currentTarget || event.target)) {\n      if (this.visible) this.hide();else this.show(event, target);\n    } else {\n      this.show(event, target);\n    }\n  };\n  OverlayPanel.prototype.show = function (event, target) {\n    this.onBeforeShow.emit(null);\n    this.target = target || event.currentTarget || event.target;\n    this.container.style.zIndex = ++domhandler_1.DomHandler.zindex;\n    this.visible = true;\n    this.willShow = true;\n    if (event.type === 'click') {\n      this.targetClickEvent = true;\n    }\n  };\n  OverlayPanel.prototype.hide = function () {\n    if (this.visible) {\n      this.onBeforeHide.emit(null);\n      this.willHide = true;\n      this.visible = false;\n      this.selfClick = false;\n      this.targetClickEvent = false;\n      this.unbindDocumentClickListener();\n    }\n  };\n  OverlayPanel.prototype.onPanelClick = function (event) {\n    if (this.closeClick) {\n      this.hide();\n      this.closeClick = false;\n    } else if (this.dismissable) {\n      this.selfClick = true;\n    }\n  };\n  OverlayPanel.prototype.onCloseClick = function (event) {\n    this.closeClick = true;\n    event.preventDefault();\n  };\n  OverlayPanel.prototype.ngOnDestroy = function () {\n    this.unbindDocumentClickListener();\n    if (this.appendTo) {\n      this.el.nativeElement.appendChild(this.container);\n    }\n    this.target = null;\n  };\n  return OverlayPanel;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], OverlayPanel.prototype, \"dismissable\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], OverlayPanel.prototype, \"showCloseIcon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], OverlayPanel.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], OverlayPanel.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], OverlayPanel.prototype, \"appendTo\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], OverlayPanel.prototype, \"onBeforeShow\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], OverlayPanel.prototype, \"onAfterShow\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], OverlayPanel.prototype, \"onBeforeHide\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], OverlayPanel.prototype, \"onAfterHide\", void 0);\nOverlayPanel = __decorate([core_1.Component({\n  selector: 'p-overlayPanel',\n  template: \"\\n        <div [ngClass]=\\\"'ui-overlaypanel ui-widget ui-widget-content ui-corner-all ui-shadow'\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\"\\n            [style.display]=\\\"visible ? 'block' : 'none'\\\" (click)=\\\"onPanelClick($event)\\\" [@panelState]=\\\"visible ? 'visible' : 'hidden'\\\">\\n            <div class=\\\"ui-overlaypanel-content\\\">\\n                <ng-content></ng-content>\\n            </div>\\n            <a href=\\\"#\\\" *ngIf=\\\"showCloseIcon\\\" class=\\\"ui-overlaypanel-close ui-state-default\\\" (click)=\\\"onCloseClick($event)\\\">\\n                <span class=\\\"fa fa-fw fa-close\\\"></span>\\n            </a>\\n        </div>\\n    \",\n  animations: [animations_1.trigger('panelState', [animations_1.state('hidden', animations_1.style({\n    opacity: 0\n  })), animations_1.state('visible', animations_1.style({\n    opacity: 1\n  })), animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')), animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))])],\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ChangeDetectorRef])], OverlayPanel);\nexports.OverlayPanel = OverlayPanel;\nvar OverlayPanelModule = function () {\n  function OverlayPanelModule() {}\n  return OverlayPanelModule;\n}();\nOverlayPanelModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [OverlayPanel],\n  declarations: [OverlayPanel]\n})], OverlayPanelModule);\nexports.OverlayPanelModule = OverlayPanelModule;\n//# sourceMappingURL=overlaypanel.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}