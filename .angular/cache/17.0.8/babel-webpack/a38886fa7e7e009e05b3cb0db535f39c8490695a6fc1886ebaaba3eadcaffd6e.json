{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar shared_2 = require(\"../common/shared\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar UITreeRow = function () {\n  function UITreeRow(treeTable) {\n    this.treeTable = treeTable;\n    this.level = 0;\n    this.labelExpand = \"Expand\";\n    this.labelCollapse = \"Collapse\";\n  }\n  UITreeRow.prototype.ngOnInit = function () {\n    this.node.parent = this.parentNode;\n  };\n  UITreeRow.prototype.toggle = function (event) {\n    if (this.node.expanded) this.treeTable.onNodeCollapse.emit({\n      originalEvent: event,\n      node: this.node\n    });else this.treeTable.onNodeExpand.emit({\n      originalEvent: event,\n      node: this.node\n    });\n    this.node.expanded = !this.node.expanded;\n    event.preventDefault();\n  };\n  UITreeRow.prototype.isLeaf = function () {\n    return this.node.leaf == false ? false : !(this.node.children && this.node.children.length);\n  };\n  UITreeRow.prototype.isSelected = function () {\n    return this.treeTable.isSelected(this.node);\n  };\n  UITreeRow.prototype.onRowClick = function (event) {\n    this.treeTable.onRowClick(event, this.node);\n  };\n  UITreeRow.prototype.onRowRightClick = function (event) {\n    this.treeTable.onRowRightClick(event, this.node);\n  };\n  UITreeRow.prototype.rowDblClick = function (event) {\n    this.treeTable.onRowDblclick.emit({\n      originalEvent: event,\n      node: this.node\n    });\n  };\n  UITreeRow.prototype.onRowTouchEnd = function () {\n    this.treeTable.onRowTouchEnd();\n  };\n  UITreeRow.prototype.resolveFieldData = function (data, field) {\n    if (data && field) {\n      if (field.indexOf('.') == -1) {\n        return data[field];\n      } else {\n        var fields = field.split('.');\n        var value = data;\n        for (var i = 0, len = fields.length; i < len; ++i) {\n          value = value[fields[i]];\n        }\n        return value;\n      }\n    } else {\n      return null;\n    }\n  };\n  return UITreeRow;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], UITreeRow.prototype, \"node\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], UITreeRow.prototype, \"parentNode\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], UITreeRow.prototype, \"level\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], UITreeRow.prototype, \"labelExpand\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], UITreeRow.prototype, \"labelCollapse\", void 0);\nUITreeRow = __decorate([core_1.Component({\n  selector: '[pTreeRow]',\n  template: \"\\n        <div [class]=\\\"node.styleClass\\\" [ngClass]=\\\"{'ui-treetable-row': true, 'ui-state-highlight':isSelected(),'ui-treetable-row-selectable':treeTable.selectionMode && node.selectable !== false}\\\">\\n            <td *ngFor=\\\"let col of treeTable.columns; let i=index\\\" [ngStyle]=\\\"col.bodyStyle||col.style\\\" [class]=\\\"col.bodyStyleClass||col.styleClass\\\" (click)=\\\"onRowClick($event)\\\" (dblclick)=\\\"rowDblClick($event)\\\" (touchend)=\\\"onRowTouchEnd()\\\" (contextmenu)=\\\"onRowRightClick($event)\\\">\\n                <a href=\\\"#\\\" *ngIf=\\\"i == treeTable.toggleColumnIndex\\\" class=\\\"ui-treetable-toggler fa fa-fw ui-clickable\\\" [ngClass]=\\\"node.expanded ? treeTable.expandedIcon : treeTable.collapsedIcon\\\"\\n                    [ngStyle]=\\\"{'margin-left':level*16 + 'px','visibility': isLeaf() ? 'hidden' : 'visible'}\\\"\\n                    (click)=\\\"toggle($event)\\\"\\n                    [title]=\\\"node.expanded ? labelCollapse : labelExpand\\\">\\n                </a>\\n                <div class=\\\"ui-chkbox ui-treetable-checkbox\\\" *ngIf=\\\"treeTable.selectionMode == 'checkbox' && i==0\\\"><div class=\\\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\\\">\\n                    <span class=\\\"ui-chkbox-icon ui-clickable fa\\\" \\n                        [ngClass]=\\\"{'fa-check':isSelected(),'fa-minus':node.partialSelected}\\\"></span></div></div\\n                ><span *ngIf=\\\"!col.template\\\">{{resolveFieldData(node.data,col.field)}}</span>\\n                <p-columnBodyTemplateLoader [column]=\\\"col\\\" [rowData]=\\\"node\\\" *ngIf=\\\"col.template\\\"></p-columnBodyTemplateLoader>\\n            </td>\\n        </div>\\n        <div *ngIf=\\\"node.children && node.expanded\\\" class=\\\"ui-treetable-row\\\" style=\\\"display:table-row\\\">\\n            <td [attr.colspan]=\\\"treeTable.columns.length\\\" class=\\\"ui-treetable-child-table-container\\\">\\n                <table [class]=\\\"treeTable.tableStyleClass\\\" [ngStyle]=\\\"treeTable.tableStyle\\\">\\n                    <tbody pTreeRow *ngFor=\\\"let childNode of node.children\\\" [node]=\\\"childNode\\\" [level]=\\\"level+1\\\" [labelExpand]=\\\"labelExpand\\\" [labelCollapse]=\\\"labelCollapse\\\" [parentNode]=\\\"node\\\"></tbody>\\n                </table>\\n            </td>\\n        </div>\\n    \"\n}), __param(0, core_1.Inject(core_1.forwardRef(function () {\n  return TreeTable;\n}))), __metadata(\"design:paramtypes\", [TreeTable])], UITreeRow);\nexports.UITreeRow = UITreeRow;\nvar TreeTable = function () {\n  function TreeTable(el, domHandler, changeDetector, renderer) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.changeDetector = changeDetector;\n    this.renderer = renderer;\n    this.labelExpand = \"Expand\";\n    this.labelCollapse = \"Collapse\";\n    this.metaKeySelection = true;\n    this.toggleColumnIndex = 0;\n    this.collapsedIcon = \"fa-caret-right\";\n    this.expandedIcon = \"fa-caret-down\";\n    this.onRowDblclick = new core_1.EventEmitter();\n    this.selectionChange = new core_1.EventEmitter();\n    this.onNodeSelect = new core_1.EventEmitter();\n    this.onNodeUnselect = new core_1.EventEmitter();\n    this.onNodeExpand = new core_1.EventEmitter();\n    this.onNodeCollapse = new core_1.EventEmitter();\n    this.onContextMenuSelect = new core_1.EventEmitter();\n  }\n  TreeTable.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    this.initColumns();\n    this.columnsSubscription = this.cols.changes.subscribe(function (_) {\n      _this.initColumns();\n      _this.changeDetector.markForCheck();\n    });\n  };\n  TreeTable.prototype.initColumns = function () {\n    this.columns = this.cols.toArray();\n  };\n  TreeTable.prototype.onRowClick = function (event, node) {\n    var eventTarget = event.target;\n    if (eventTarget.className && eventTarget.className.indexOf('ui-treetable-toggler') === 0) {\n      return;\n    } else if (this.selectionMode) {\n      if (node.selectable === false) {\n        return;\n      }\n      var metaSelection = this.rowTouched ? false : this.metaKeySelection;\n      var index_1 = this.findIndexInSelection(node);\n      var selected = index_1 >= 0;\n      if (this.isCheckboxSelectionMode()) {\n        if (selected) {\n          this.propagateSelectionDown(node, false);\n          if (node.parent) {\n            this.propagateSelectionUp(node.parent, false);\n          }\n          this.selectionChange.emit(this.selection);\n          this.onNodeUnselect.emit({\n            originalEvent: event,\n            node: node\n          });\n        } else {\n          this.propagateSelectionDown(node, true);\n          if (node.parent) {\n            this.propagateSelectionUp(node.parent, true);\n          }\n          this.selectionChange.emit(this.selection);\n          this.onNodeSelect.emit({\n            originalEvent: event,\n            node: node\n          });\n        }\n      } else {\n        if (metaSelection) {\n          var metaKey = event.metaKey || event.ctrlKey;\n          if (selected && metaKey) {\n            if (this.isSingleSelectionMode()) {\n              this.selectionChange.emit(null);\n            } else {\n              this.selection = this.selection.filter(function (val, i) {\n                return i != index_1;\n              });\n              this.selectionChange.emit(this.selection);\n            }\n            this.onNodeUnselect.emit({\n              originalEvent: event,\n              node: node\n            });\n          } else {\n            if (this.isSingleSelectionMode()) {\n              this.selectionChange.emit(node);\n            } else if (this.isMultipleSelectionMode()) {\n              this.selection = !metaKey ? [] : this.selection || [];\n              this.selection = this.selection.concat([node]);\n              this.selectionChange.emit(this.selection);\n            }\n            this.onNodeSelect.emit({\n              originalEvent: event,\n              node: node\n            });\n          }\n        } else {\n          if (this.isSingleSelectionMode()) {\n            if (selected) {\n              this.selection = null;\n              this.onNodeUnselect.emit({\n                originalEvent: event,\n                node: node\n              });\n            } else {\n              this.selection = node;\n              this.onNodeSelect.emit({\n                originalEvent: event,\n                node: node\n              });\n            }\n          } else {\n            if (selected) {\n              this.selection = this.selection.filter(function (val, i) {\n                return i != index_1;\n              });\n              this.onNodeUnselect.emit({\n                originalEvent: event,\n                node: node\n              });\n            } else {\n              this.selection = (this.selection || []).concat([node]);\n              this.onNodeSelect.emit({\n                originalEvent: event,\n                node: node\n              });\n            }\n          }\n          this.selectionChange.emit(this.selection);\n        }\n      }\n    }\n    this.rowTouched = false;\n  };\n  TreeTable.prototype.onRowTouchEnd = function () {\n    this.rowTouched = true;\n  };\n  TreeTable.prototype.onRowRightClick = function (event, node) {\n    if (this.contextMenu) {\n      var index = this.findIndexInSelection(node);\n      var selected = index >= 0;\n      if (!selected) {\n        if (this.isSingleSelectionMode()) {\n          this.selection = node;\n        } else if (this.isMultipleSelectionMode()) {\n          this.selection = [node];\n          this.selectionChange.emit(this.selection);\n        }\n        this.selectionChange.emit(this.selection);\n      }\n      this.contextMenu.show(event);\n      this.onContextMenuSelect.emit({\n        originalEvent: event,\n        node: node\n      });\n    }\n  };\n  TreeTable.prototype.findIndexInSelection = function (node) {\n    var index = -1;\n    if (this.selectionMode && this.selection) {\n      if (this.isSingleSelectionMode()) {\n        index = this.selection == node ? 0 : -1;\n      } else {\n        for (var i = 0; i < this.selection.length; i++) {\n          if (this.selection[i] == node) {\n            index = i;\n            break;\n          }\n        }\n      }\n    }\n    return index;\n  };\n  TreeTable.prototype.propagateSelectionUp = function (node, select) {\n    if (node.children && node.children.length) {\n      var selectedCount = 0;\n      var childPartialSelected = false;\n      for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        if (this.isSelected(child)) {\n          selectedCount++;\n        } else if (child.partialSelected) {\n          childPartialSelected = true;\n        }\n      }\n      if (select && selectedCount == node.children.length) {\n        this.selection = (this.selection || []).concat([node]);\n        node.partialSelected = false;\n      } else {\n        if (!select) {\n          var index_2 = this.findIndexInSelection(node);\n          if (index_2 >= 0) {\n            this.selection = this.selection.filter(function (val, i) {\n              return i != index_2;\n            });\n          }\n        }\n        if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n    }\n    var parent = node.parent;\n    if (parent) {\n      this.propagateSelectionUp(parent, select);\n    }\n  };\n  TreeTable.prototype.propagateSelectionDown = function (node, select) {\n    var index = this.findIndexInSelection(node);\n    if (select && index == -1) {\n      this.selection = (this.selection || []).concat([node]);\n    } else if (!select && index > -1) {\n      this.selection = this.selection.filter(function (val, i) {\n        return i != index;\n      });\n    }\n    node.partialSelected = false;\n    if (node.children && node.children.length) {\n      for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        this.propagateSelectionDown(child, select);\n      }\n    }\n  };\n  TreeTable.prototype.isSelected = function (node) {\n    return this.findIndexInSelection(node) != -1;\n  };\n  TreeTable.prototype.isSingleSelectionMode = function () {\n    return this.selectionMode && this.selectionMode == 'single';\n  };\n  TreeTable.prototype.isMultipleSelectionMode = function () {\n    return this.selectionMode && this.selectionMode == 'multiple';\n  };\n  TreeTable.prototype.isCheckboxSelectionMode = function () {\n    return this.selectionMode && this.selectionMode == 'checkbox';\n  };\n  TreeTable.prototype.hasFooter = function () {\n    if (this.columns) {\n      var columnsArr = this.cols.toArray();\n      for (var i = 0; i < columnsArr.length; i++) {\n        if (columnsArr[i].footer) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  return TreeTable;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Array)], TreeTable.prototype, \"value\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TreeTable.prototype, \"selectionMode\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], TreeTable.prototype, \"selection\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], TreeTable.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TreeTable.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TreeTable.prototype, \"labelExpand\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TreeTable.prototype, \"labelCollapse\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], TreeTable.prototype, \"metaKeySelection\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], TreeTable.prototype, \"contextMenu\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], TreeTable.prototype, \"toggleColumnIndex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], TreeTable.prototype, \"tableStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TreeTable.prototype, \"tableStyleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TreeTable.prototype, \"collapsedIcon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TreeTable.prototype, \"expandedIcon\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TreeTable.prototype, \"onRowDblclick\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TreeTable.prototype, \"selectionChange\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TreeTable.prototype, \"onNodeSelect\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TreeTable.prototype, \"onNodeUnselect\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TreeTable.prototype, \"onNodeExpand\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TreeTable.prototype, \"onNodeCollapse\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TreeTable.prototype, \"onContextMenuSelect\", void 0);\n__decorate([core_1.ContentChild(shared_1.Header), __metadata(\"design:type\", shared_1.Header)], TreeTable.prototype, \"header\", void 0);\n__decorate([core_1.ContentChild(shared_1.Footer), __metadata(\"design:type\", shared_1.Footer)], TreeTable.prototype, \"footer\", void 0);\n__decorate([core_1.ContentChildren(shared_1.Column), __metadata(\"design:type\", core_1.QueryList)], TreeTable.prototype, \"cols\", void 0);\n__decorate([core_1.ViewChild('tbl'), __metadata(\"design:type\", core_1.ElementRef)], TreeTable.prototype, \"tableViewChild\", void 0);\nTreeTable = __decorate([core_1.Component({\n  selector: 'p-treeTable',\n  template: \"\\n        <div [ngClass]=\\\"'ui-treetable ui-widget'\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <div class=\\\"ui-treetable-header ui-widget-header\\\" *ngIf=\\\"header\\\">\\n                <ng-content select=\\\"p-header\\\"></ng-content>\\n            </div>\\n            <div class=\\\"ui-treetable-tablewrapper\\\">\\n                <table #tbl class=\\\"ui-widget-content\\\" [class]=\\\"tableStyleClass\\\" [ngStyle]=\\\"tableStyle\\\">\\n                    <thead>\\n                        <tr class=\\\"ui-state-default\\\">\\n                            <th #headerCell *ngFor=\\\"let col of columns; let lastCol=last \\\"  [ngStyle]=\\\"col.headerStyle||col.style\\\" [class]=\\\"col.headerStyleClass||col.styleClass\\\" \\n                                [ngClass]=\\\"'ui-state-default ui-unselectable-text'\\\">\\n                                <span class=\\\"ui-column-title\\\" *ngIf=\\\"!col.headerTemplate\\\">{{col.header}}</span>\\n                                <span class=\\\"ui-column-title\\\" *ngIf=\\\"col.headerTemplate\\\">\\n                                    <p-columnHeaderTemplateLoader [column]=\\\"col\\\"></p-columnHeaderTemplateLoader>\\n                                </span>\\n                            </th>\\n                        </tr>\\n                    </thead>\\n                    <tfoot *ngIf=\\\"hasFooter()\\\">\\n                        <tr>\\n                            <td *ngFor=\\\"let col of columns\\\" [ngStyle]=\\\"col.footerStyle||col.style\\\" [class]=\\\"col.footerStyleClass||col.styleClass\\\" [ngClass]=\\\"{'ui-state-default':true}\\\">\\n                                <span class=\\\"ui-column-footer\\\" *ngIf=\\\"!col.footerTemplate\\\">{{col.footer}}</span>\\n                                <span class=\\\"ui-column-footer\\\" *ngIf=\\\"col.footerTemplate\\\">\\n                                    <p-columnFooterTemplateLoader [column]=\\\"col\\\"></p-columnFooterTemplateLoader>\\n                                </span>\\n                            </td>\\n                        </tr>\\n                    </tfoot>\\n                    <tbody pTreeRow *ngFor=\\\"let node of value\\\" class=\\\"ui-treetable-data ui-widget-content\\\" [node]=\\\"node\\\" [level]=\\\"0\\\" [labelExpand]=\\\"labelExpand\\\" [labelCollapse]=\\\"labelCollapse\\\"></tbody>\\n                </table>\\n            </div>\\n            \\n            <div class=\\\"ui-treetable-footer ui-widget-header\\\" *ngIf=\\\"footer\\\">\\n                <ng-content select=\\\"p-footer\\\"></ng-content>\\n            </div>\\n        </div>\\n    \",\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.ChangeDetectorRef, core_1.Renderer2])], TreeTable);\nexports.TreeTable = TreeTable;\nvar TreeTableModule = function () {\n  function TreeTableModule() {}\n  return TreeTableModule;\n}();\nTreeTableModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, shared_2.SharedModule],\n  exports: [TreeTable, shared_2.SharedModule],\n  declarations: [TreeTable, UITreeRow]\n})], TreeTableModule);\nexports.TreeTableModule = TreeTableModule;\n//# sourceMappingURL=treetable.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}