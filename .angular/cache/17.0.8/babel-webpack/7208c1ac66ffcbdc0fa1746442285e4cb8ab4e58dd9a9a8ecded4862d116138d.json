{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar forms_1 = require(\"@angular/forms\");\nexports.SLIDER_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return Slider;\n  }),\n  multi: true\n};\nvar Slider = function () {\n  function Slider(el, domHandler, renderer, ngZone) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.min = 0;\n    this.max = 100;\n    this.orientation = 'horizontal';\n    this.onChange = new core_1.EventEmitter();\n    this.onSlideEnd = new core_1.EventEmitter();\n    this.handleValues = [];\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n    this.handleIndex = 0;\n  }\n  Slider.prototype.onMouseDown = function (event, index) {\n    if (this.disabled) {\n      return;\n    }\n    this.dragging = true;\n    this.updateDomData();\n    this.sliderHandleClick = true;\n    this.handleIndex = index;\n    this.bindDragListeners();\n    event.preventDefault();\n  };\n  Slider.prototype.onTouchStart = function (event, index) {\n    var touchobj = event.changedTouches[0];\n    this.startHandleValue = this.range ? this.handleValues[index] : this.handleValue;\n    this.dragging = true;\n    this.handleIndex = index;\n    if (this.orientation === 'horizontal') {\n      this.startx = parseInt(touchobj.clientX, 10);\n      this.barWidth = this.el.nativeElement.children[0].offsetWidth;\n    } else {\n      this.starty = parseInt(touchobj.clientY, 10);\n      this.barHeight = this.el.nativeElement.children[0].offsetHeight;\n    }\n    event.preventDefault();\n  };\n  Slider.prototype.onTouchMove = function (event, index) {\n    var touchobj = event.changedTouches[0],\n      handleValue = 0;\n    if (this.orientation === 'horizontal') {\n      handleValue = Math.floor((parseInt(touchobj.clientX, 10) - this.startx) * 100 / this.barWidth) + this.startHandleValue;\n    } else {\n      handleValue = Math.floor((this.starty - parseInt(touchobj.clientY, 10)) * 100 / this.barHeight) + this.startHandleValue;\n    }\n    this.setValueFromHandle(event, handleValue);\n    event.preventDefault();\n  };\n  Slider.prototype.onBarClick = function (event) {\n    if (this.disabled) {\n      return;\n    }\n    if (!this.sliderHandleClick) {\n      this.updateDomData();\n      this.handleChange(event);\n    }\n    this.sliderHandleClick = false;\n  };\n  Slider.prototype.handleChange = function (event) {\n    var handleValue = this.calculateHandleValue(event);\n    this.setValueFromHandle(event, handleValue);\n  };\n  Slider.prototype.bindDragListeners = function () {\n    var _this = this;\n    this.ngZone.runOutsideAngular(function () {\n      if (!_this.dragListener) {\n        _this.dragListener = _this.renderer.listen('document', 'mousemove', function (event) {\n          if (_this.dragging) {\n            _this.ngZone.run(function () {\n              _this.handleChange(event);\n            });\n          }\n        });\n      }\n      if (!_this.mouseupListener) {\n        _this.mouseupListener = _this.renderer.listen('document', 'mouseup', function (event) {\n          if (_this.dragging) {\n            _this.dragging = false;\n            _this.ngZone.run(function () {\n              if (_this.range) {\n                _this.onSlideEnd.emit({\n                  originalEvent: event,\n                  values: _this.values\n                });\n              } else {\n                _this.onSlideEnd.emit({\n                  originalEvent: event,\n                  value: _this.value\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n  Slider.prototype.unbindDragListeners = function () {\n    if (this.dragListener) {\n      this.dragListener();\n    }\n    if (this.mouseupListener) {\n      this.mouseupListener();\n    }\n  };\n  Slider.prototype.setValueFromHandle = function (event, handleValue) {\n    var newValue = this.getValueFromHandle(handleValue);\n    if (this.range) {\n      if (this.step) {\n        this.handleStepChange(newValue, this.values[this.handleIndex]);\n      } else {\n        this.handleValues[this.handleIndex] = handleValue;\n        this.updateValue(newValue, event);\n      }\n    } else {\n      if (this.step) {\n        this.handleStepChange(newValue, this.value);\n      } else {\n        this.handleValue = handleValue;\n        this.updateValue(newValue, event);\n      }\n    }\n  };\n  Slider.prototype.handleStepChange = function (newValue, oldValue) {\n    var diff = newValue - oldValue;\n    var val = oldValue;\n    if (diff < 0) {\n      val = oldValue + Math.ceil((newValue - oldValue) / this.step) * this.step;\n    } else if (diff > 0) {\n      val = oldValue + Math.floor((newValue - oldValue) / this.step) * this.step;\n    }\n    this.updateValue(val);\n    this.updateHandleValue();\n  };\n  Slider.prototype.writeValue = function (value) {\n    if (this.range) this.values = value || [0, 0];else this.value = value || 0;\n    this.updateHandleValue();\n  };\n  Slider.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  Slider.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  Slider.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  Object.defineProperty(Slider.prototype, \"rangeStartLeft\", {\n    get: function () {\n      return this.isVertical() ? 'auto' : this.handleValues[0] + '%';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slider.prototype, \"rangeStartBottom\", {\n    get: function () {\n      return this.isVertical() ? this.handleValues[0] + '%' : 'auto';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slider.prototype, \"rangeEndLeft\", {\n    get: function () {\n      return this.isVertical() ? 'auto' : this.handleValues[1] + '%';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slider.prototype, \"rangeEndBottom\", {\n    get: function () {\n      return this.isVertical() ? this.handleValues[1] + '%' : 'auto';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Slider.prototype.isVertical = function () {\n    return this.orientation === 'vertical';\n  };\n  Slider.prototype.updateDomData = function () {\n    var rect = this.el.nativeElement.children[0].getBoundingClientRect();\n    this.initX = rect.left + this.domHandler.getWindowScrollLeft();\n    this.initY = rect.top + this.domHandler.getWindowScrollTop();\n    this.barWidth = this.el.nativeElement.children[0].offsetWidth;\n    this.barHeight = this.el.nativeElement.children[0].offsetHeight;\n  };\n  Slider.prototype.calculateHandleValue = function (event) {\n    if (this.orientation === 'horizontal') return (event.pageX - this.initX) * 100 / this.barWidth;else return (this.initY + this.barHeight - event.pageY) * 100 / this.barHeight;\n  };\n  Slider.prototype.updateHandleValue = function () {\n    if (this.range) {\n      this.handleValues[0] = (this.values[0] < this.min ? 0 : this.values[0] - this.min) * 100 / (this.max - this.min);\n      this.handleValues[1] = (this.values[1] > this.max ? 100 : this.values[1] - this.min) * 100 / (this.max - this.min);\n    } else {\n      if (this.value < this.min) this.handleValue = 0;else if (this.value > this.max) this.handleValue = 100;else this.handleValue = (this.value - this.min) * 100 / (this.max - this.min);\n    }\n  };\n  Slider.prototype.updateValue = function (val, event) {\n    if (this.range) {\n      var value = val;\n      if (this.handleIndex == 0) {\n        if (value < this.min) {\n          value = this.min;\n          this.handleValues[0] = 0;\n        } else if (value > this.values[1]) {\n          value = this.values[1];\n          this.handleValues[0] = this.handleValues[1];\n        }\n      } else {\n        if (value > this.max) {\n          value = this.max;\n          this.handleValues[1] = 100;\n        } else if (value < this.values[0]) {\n          value = this.values[0];\n          this.handleValues[1] = this.handleValues[0];\n        }\n      }\n      this.values[this.handleIndex] = Math.floor(value);\n      this.onModelChange(this.values);\n      this.onChange.emit({\n        event: event,\n        values: this.values\n      });\n    } else {\n      if (val < this.min) {\n        val = this.min;\n        this.handleValue = 0;\n      } else if (val > this.max) {\n        val = this.max;\n        this.handleValue = 100;\n      }\n      this.value = Math.floor(val);\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        event: event,\n        value: this.value\n      });\n    }\n  };\n  Slider.prototype.getValueFromHandle = function (handleValue) {\n    return (this.max - this.min) * (handleValue / 100) + this.min;\n  };\n  Slider.prototype.ngOnDestroy = function () {\n    this.unbindDragListeners();\n  };\n  return Slider;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Slider.prototype, \"animate\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Slider.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Slider.prototype, \"min\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Slider.prototype, \"max\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Slider.prototype, \"orientation\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Slider.prototype, \"step\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Slider.prototype, \"range\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Slider.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Slider.prototype, \"styleClass\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Slider.prototype, \"onChange\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Slider.prototype, \"onSlideEnd\", void 0);\nSlider = __decorate([core_1.Component({\n  selector: 'p-slider',\n  template: \"\\n        <div [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" [ngClass]=\\\"{'ui-slider ui-widget ui-widget-content ui-corner-all':true,'ui-state-disabled':disabled,\\n            'ui-slider-horizontal':orientation == 'horizontal','ui-slider-vertical':orientation == 'vertical','ui-slider-animate':animate}\\\"\\n            (click)=\\\"onBarClick($event)\\\">\\n            <span *ngIf=\\\"range && orientation == 'horizontal'\\\" class=\\\"ui-slider-range ui-widget-header ui-corner-all\\\" [ngStyle]=\\\"{'left':handleValues[0] + '%',width: (handleValues[1] - handleValues[0] + '%')}\\\"></span>\\n            <span *ngIf=\\\"range && orientation == 'vertical'\\\" class=\\\"ui-slider-range ui-widget-header ui-corner-all\\\" [ngStyle]=\\\"{'bottom':handleValues[0] + '%',height: (handleValues[1] - handleValues[0] + '%')}\\\"></span>\\n            <span *ngIf=\\\"!range && orientation=='vertical'\\\" class=\\\"ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all\\\" [ngStyle]=\\\"{'height': handleValue + '%'}\\\"></span>\\n            <span *ngIf=\\\"!range\\\" class=\\\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\\\" (mousedown)=\\\"onMouseDown($event)\\\" (touchstart)=\\\"onTouchStart($event)\\\" (touchmove)=\\\"onTouchMove($event)\\\" (touchend)=\\\"dragging=false\\\"\\n                [style.transition]=\\\"dragging ? 'none': null\\\" [ngStyle]=\\\"{'left': orientation == 'horizontal' ? handleValue + '%' : null,'bottom': orientation == 'vertical' ? handleValue + '%' : null}\\\"></span>\\n            <span *ngIf=\\\"range\\\" (mousedown)=\\\"onMouseDown($event,0)\\\" (touchstart)=\\\"onTouchStart($event,0)\\\" (touchmove)=\\\"onTouchMove($event,0)\\\" (touchend)=\\\"dragging=false\\\" [style.transition]=\\\"dragging ? 'none': null\\\" class=\\\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\\\" \\n                [ngStyle]=\\\"{'left': rangeStartLeft, 'bottom': rangeStartBottom}\\\" [ngClass]=\\\"{'ui-slider-handle-active':handleIndex==0}\\\"></span>\\n            <span *ngIf=\\\"range\\\" (mousedown)=\\\"onMouseDown($event,1)\\\" (touchstart)=\\\"onTouchStart($event,1)\\\" (touchmove)=\\\"onTouchMove($event,1)\\\" (touchend)=\\\"dragging=false\\\" [style.transition]=\\\"dragging ? 'none': null\\\" class=\\\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\\\" \\n                [ngStyle]=\\\"{'left': rangeEndLeft, 'bottom': rangeEndBottom}\\\" [ngClass]=\\\"{'ui-slider-handle-active':handleIndex==1}\\\"></span>\\n        </div>\\n    \",\n  providers: [exports.SLIDER_VALUE_ACCESSOR, domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.NgZone])], Slider);\nexports.Slider = Slider;\nvar SliderModule = function () {\n  function SliderModule() {}\n  return SliderModule;\n}();\nSliderModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Slider],\n  declarations: [Slider]\n})], SliderModule);\nexports.SliderModule = SliderModule;\n//# sourceMappingURL=slider.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}