{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar shared_1 = require(\"../common/shared\");\nvar Dialog = function () {\n  function Dialog(el, domHandler, renderer, zone) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.zone = zone;\n    this.draggable = true;\n    this.resizable = true;\n    this.minWidth = 150;\n    this.minHeight = 150;\n    this.closeOnEscape = true;\n    this.closable = true;\n    this.responsive = true;\n    this.showHeader = true;\n    this.breakpoint = 640;\n    this.blockScroll = false;\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n    this.onShow = new core_1.EventEmitter();\n    this.onHide = new core_1.EventEmitter();\n    this.visibleChange = new core_1.EventEmitter();\n  }\n  Object.defineProperty(Dialog.prototype, \"visible\", {\n    get: function () {\n      return this._visible;\n    },\n    set: function (val) {\n      this._visible = val;\n      if (this.initialized && this.containerViewChild && this.containerViewChild.nativeElement) {\n        if (this._visible) this.show();else {\n          if (this.preventVisibleChangePropagation) this.preventVisibleChangePropagation = false;else this.hide();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Dialog.prototype.ngAfterViewChecked = function () {\n    if (this.executePostDisplayActions) {\n      this.onShow.emit({});\n      this.positionOverlay();\n      this.executePostDisplayActions = false;\n    }\n  };\n  Dialog.prototype.show = function () {\n    this.executePostDisplayActions = true;\n    this.moveOnTop();\n    this.bindGlobalListeners();\n    if (this.modal) {\n      this.enableModality();\n    }\n  };\n  Dialog.prototype.positionOverlay = function () {\n    var viewport = this.domHandler.getViewport();\n    if (this.domHandler.getOuterHeight(this.containerViewChild.nativeElement) > viewport.height) {\n      this.contentViewChild.nativeElement.style.height = viewport.height * .75 + 'px';\n    }\n    if (this.positionLeft >= 0 && this.positionTop >= 0) {\n      this.containerViewChild.nativeElement.style.left = this.positionLeft + 'px';\n      this.containerViewChild.nativeElement.style.top = this.positionTop + 'px';\n    } else if (this.positionTop >= 0) {\n      this.center();\n      this.containerViewChild.nativeElement.style.top = this.positionTop + 'px';\n    } else {\n      this.center();\n    }\n  };\n  Dialog.prototype.hide = function () {\n    this.onHide.emit({});\n    this.unbindMaskClickListener();\n    this.unbindGlobalListeners();\n    if (this.modal) {\n      this.disableModality();\n    }\n  };\n  Dialog.prototype.close = function (event) {\n    this.preventVisibleChangePropagation = true;\n    this.hide();\n    this.visibleChange.emit(false);\n    event.preventDefault();\n  };\n  Dialog.prototype.ngAfterViewInit = function () {\n    this.initialized = true;\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.containerViewChild.nativeElement);else this.domHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\n    }\n    if (this.visible) {\n      this.show();\n    }\n  };\n  Dialog.prototype.center = function () {\n    var elementWidth = this.domHandler.getOuterWidth(this.containerViewChild.nativeElement);\n    var elementHeight = this.domHandler.getOuterHeight(this.containerViewChild.nativeElement);\n    if (elementWidth == 0 && elementHeight == 0) {\n      this.containerViewChild.nativeElement.style.visibility = 'hidden';\n      this.containerViewChild.nativeElement.style.display = 'block';\n      elementWidth = this.domHandler.getOuterWidth(this.containerViewChild.nativeElement);\n      elementHeight = this.domHandler.getOuterHeight(this.containerViewChild.nativeElement);\n      this.containerViewChild.nativeElement.style.display = 'none';\n      this.containerViewChild.nativeElement.style.visibility = 'visible';\n    }\n    var viewport = this.domHandler.getViewport();\n    var x = Math.max((viewport.width - elementWidth) / 2, 0);\n    var y = Math.max((viewport.height - elementHeight) / 2, 0);\n    this.containerViewChild.nativeElement.style.left = x + 'px';\n    this.containerViewChild.nativeElement.style.top = y + 'px';\n  };\n  Dialog.prototype.enableModality = function () {\n    var _this = this;\n    if (!this.mask) {\n      this.mask = document.createElement('div');\n      this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\n      var maskStyleClass = 'ui-widget-overlay ui-dialog-mask';\n      if (this.blockScroll) {\n        maskStyleClass += ' ui-dialog-mask-scrollblocker';\n      }\n      this.domHandler.addMultipleClasses(this.mask, maskStyleClass);\n      if (this.closable && this.dismissableMask) {\n        this.maskClickListener = this.renderer.listen(this.mask, 'click', function (event) {\n          _this.close(event);\n        });\n      }\n      document.body.appendChild(this.mask);\n      if (this.blockScroll) {\n        this.domHandler.addClass(document.body, 'ui-overflow-hidden');\n      }\n    }\n  };\n  Dialog.prototype.disableModality = function () {\n    if (this.mask) {\n      document.body.removeChild(this.mask);\n      if (this.blockScroll) {\n        var bodyChildren = document.body.children;\n        var hasBlockerMasks = void 0;\n        for (var i = 0; i < bodyChildren.length; i++) {\n          var bodyChild = bodyChildren[i];\n          if (this.domHandler.hasClass(bodyChild, 'ui-dialog-mask-scrollblocker')) {\n            hasBlockerMasks = true;\n            break;\n          }\n        }\n        if (!hasBlockerMasks) {\n          this.domHandler.removeClass(document.body, 'ui-overflow-hidden');\n        }\n      }\n      this.mask = null;\n    }\n  };\n  Dialog.prototype.unbindMaskClickListener = function () {\n    if (this.maskClickListener) {\n      this.maskClickListener();\n      this.maskClickListener = null;\n    }\n  };\n  Dialog.prototype.moveOnTop = function () {\n    if (this.autoZIndex) {\n      this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + ++domhandler_1.DomHandler.zindex);\n    }\n  };\n  Dialog.prototype.onCloseMouseDown = function (event) {\n    this.closeIconMouseDown = true;\n  };\n  Dialog.prototype.initDrag = function (event) {\n    if (this.closeIconMouseDown) {\n      this.closeIconMouseDown = false;\n      return;\n    }\n    if (this.draggable) {\n      this.dragging = true;\n      this.lastPageX = event.pageX;\n      this.lastPageY = event.pageY;\n      this.domHandler.addClass(document.body, 'ui-unselectable-text');\n    }\n  };\n  Dialog.prototype.onDrag = function (event) {\n    if (this.dragging) {\n      var deltaX = event.pageX - this.lastPageX;\n      var deltaY = event.pageY - this.lastPageY;\n      var leftPos = parseInt(this.containerViewChild.nativeElement.style.left);\n      var topPos = parseInt(this.containerViewChild.nativeElement.style.top);\n      this.containerViewChild.nativeElement.style.left = leftPos + deltaX + 'px';\n      this.containerViewChild.nativeElement.style.top = topPos + deltaY + 'px';\n      this.lastPageX = event.pageX;\n      this.lastPageY = event.pageY;\n    }\n  };\n  Dialog.prototype.endDrag = function (event) {\n    if (this.draggable) {\n      this.dragging = false;\n      this.domHandler.removeClass(document.body, 'ui-unselectable-text');\n    }\n  };\n  Dialog.prototype.initResize = function (event) {\n    if (this.resizable) {\n      this.preWidth = null;\n      this.resizing = true;\n      this.lastPageX = event.pageX;\n      this.lastPageY = event.pageY;\n      this.domHandler.addClass(document.body, 'ui-unselectable-text');\n    }\n  };\n  Dialog.prototype.onResize = function (event) {\n    if (this.resizing) {\n      var deltaX = event.pageX - this.lastPageX;\n      var deltaY = event.pageY - this.lastPageY;\n      var containerWidth = this.domHandler.getOuterWidth(this.containerViewChild.nativeElement);\n      var containerHeight = this.domHandler.getOuterHeight(this.containerViewChild.nativeElement);\n      var contentHeight = this.domHandler.getOuterHeight(this.contentViewChild.nativeElement);\n      var newWidth = containerWidth + deltaX;\n      var newHeight = containerHeight + deltaY;\n      if (newWidth > this.minWidth) {\n        this.containerViewChild.nativeElement.style.width = newWidth + 'px';\n      }\n      if (newHeight > this.minHeight) {\n        this.containerViewChild.nativeElement.style.height = newHeight + 'px';\n        this.contentViewChild.nativeElement.style.height = contentHeight + deltaY + 'px';\n      }\n      this.lastPageX = event.pageX;\n      this.lastPageY = event.pageY;\n    }\n  };\n  Dialog.prototype.onResizeEnd = function (event) {\n    if (this.resizing) {\n      this.resizing = false;\n      this.domHandler.removeClass(document.body, 'ui-unselectable-text');\n    }\n  };\n  Dialog.prototype.bindGlobalListeners = function () {\n    if (this.draggable) {\n      this.bindDocumentDragListener();\n    }\n    if (this.resizable) {\n      this.bindDocumentResizeListeners();\n    }\n    if (this.responsive) {\n      this.bindDocumentResponsiveListener();\n    }\n    if (this.closeOnEscape && this.closable) {\n      this.bindDocumentEscapeListener();\n    }\n  };\n  Dialog.prototype.unbindGlobalListeners = function () {\n    this.unbindDocumentDragListener();\n    this.unbindDocumentResizeListeners();\n    this.unbindDocumentResponsiveListener();\n    this.unbindDocumentEscapeListener();\n  };\n  Dialog.prototype.bindDocumentDragListener = function () {\n    var _this = this;\n    this.zone.runOutsideAngular(function () {\n      _this.documentDragListener = _this.onDrag.bind(_this);\n      window.document.addEventListener('mousemove', _this.documentDragListener);\n    });\n  };\n  Dialog.prototype.unbindDocumentDragListener = function () {\n    if (this.documentDragListener) {\n      window.document.removeEventListener('mousemove', this.documentDragListener);\n      this.documentDragListener = null;\n    }\n  };\n  Dialog.prototype.bindDocumentResizeListeners = function () {\n    var _this = this;\n    this.zone.runOutsideAngular(function () {\n      _this.documentResizeListener = _this.onResize.bind(_this);\n      _this.documentResizeEndListener = _this.onResizeEnd.bind(_this);\n      window.document.addEventListener('mousemove', _this.documentResizeListener);\n      window.document.addEventListener('mouseup', _this.documentResizeEndListener);\n    });\n  };\n  Dialog.prototype.unbindDocumentResizeListeners = function () {\n    if (this.documentResizeListener && this.documentResizeEndListener) {\n      window.document.removeEventListener('mouseup', this.documentResizeListener);\n      window.document.removeEventListener('mouseup', this.documentResizeEndListener);\n      this.documentResizeListener = null;\n      this.documentResizeEndListener = null;\n    }\n  };\n  Dialog.prototype.bindDocumentResponsiveListener = function () {\n    var _this = this;\n    this.zone.runOutsideAngular(function () {\n      _this.documentResponsiveListener = _this.onWindowResize.bind(_this);\n      window.addEventListener('resize', _this.documentResponsiveListener);\n    });\n  };\n  Dialog.prototype.unbindDocumentResponsiveListener = function () {\n    if (this.documentResponsiveListener) {\n      window.removeEventListener('resize', this.documentResponsiveListener);\n      this.documentResponsiveListener = null;\n    }\n  };\n  Dialog.prototype.onWindowResize = function (event) {\n    var viewport = this.domHandler.getViewport();\n    var width = this.domHandler.getOuterWidth(this.containerViewChild.nativeElement);\n    if (viewport.width <= this.breakpoint) {\n      if (!this.preWidth) {\n        this.preWidth = width;\n      }\n      this.containerViewChild.nativeElement.style.left = '0px';\n      this.containerViewChild.nativeElement.style.width = '100%';\n    } else {\n      this.containerViewChild.nativeElement.style.width = this.preWidth + 'px';\n      this.positionOverlay();\n    }\n  };\n  Dialog.prototype.bindDocumentEscapeListener = function () {\n    var _this = this;\n    this.documentEscapeListener = this.renderer.listen('document', 'keydown', function (event) {\n      if (event.which == 27) {\n        if (parseInt(_this.containerViewChild.nativeElement.style.zIndex) == domhandler_1.DomHandler.zindex) {\n          _this.close(event);\n        }\n      }\n    });\n  };\n  Dialog.prototype.unbindDocumentEscapeListener = function () {\n    if (this.documentEscapeListener) {\n      this.documentEscapeListener();\n      this.documentEscapeListener = null;\n    }\n  };\n  Dialog.prototype.ngOnDestroy = function () {\n    this.initialized = false;\n    this.disableModality();\n    this.unbindGlobalListeners();\n    if (this.appendTo) {\n      this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\n    }\n    this.unbindMaskClickListener();\n  };\n  return Dialog;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dialog.prototype, \"id\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dialog.prototype, \"ariaLabelledBy\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dialog.prototype, \"header\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"draggable\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"resizable\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Dialog.prototype, \"minWidth\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Dialog.prototype, \"minHeight\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Dialog.prototype, \"width\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Dialog.prototype, \"height\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Dialog.prototype, \"positionLeft\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Dialog.prototype, \"positionTop\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Dialog.prototype, \"contentStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"modal\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"closeOnEscape\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"dismissableMask\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"rtl\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"closable\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"responsive\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Dialog.prototype, \"appendTo\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Dialog.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Dialog.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"showHeader\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Dialog.prototype, \"breakpoint\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"blockScroll\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Dialog.prototype, \"autoZIndex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], Dialog.prototype, \"baseZIndex\", void 0);\n__decorate([core_1.ContentChildren(shared_1.Header, {\n  descendants: false\n}), __metadata(\"design:type\", core_1.QueryList)], Dialog.prototype, \"headerFacet\", void 0);\n__decorate([core_1.ContentChildren(shared_1.Footer, {\n  descendants: false\n}), __metadata(\"design:type\", core_1.QueryList)], Dialog.prototype, \"footerFacet\", void 0);\n__decorate([core_1.ViewChild('container'), __metadata(\"design:type\", core_1.ElementRef)], Dialog.prototype, \"containerViewChild\", void 0);\n__decorate([core_1.ViewChild('titlebar'), __metadata(\"design:type\", core_1.ElementRef)], Dialog.prototype, \"headerViewChild\", void 0);\n__decorate([core_1.ViewChild('content'), __metadata(\"design:type\", core_1.ElementRef)], Dialog.prototype, \"contentViewChild\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Dialog.prototype, \"onShow\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Dialog.prototype, \"onHide\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Dialog.prototype, \"visibleChange\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], Dialog.prototype, \"visible\", null);\nDialog = __decorate([core_1.Component({\n  selector: 'p-dialog',\n  template: \"\\n        <div #container [ngClass]=\\\"{'ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl,'ui-dialog-draggable':draggable}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\"\\n            [style.display]=\\\"visible ? 'block' : 'none'\\\" [style.width.px]=\\\"width\\\" [style.height.px]=\\\"height\\\" [style.minWidth.px]=\\\"minWidth\\\" (mousedown)=\\\"moveOnTop()\\\" [@dialogState]=\\\"visible ? 'visible' : 'hidden'\\\"\\n            role=\\\"dialog\\\" [attr.aria-labelledby]=\\\"ariaLabelledBy\\\">\\n            <div #titlebar class=\\\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\\\"\\n                (mousedown)=\\\"initDrag($event)\\\" (mouseup)=\\\"endDrag($event)\\\" *ngIf=\\\"showHeader\\\">\\n                <span [attr.id]=\\\"ariaLabelledBy\\\" class=\\\"ui-dialog-title\\\" *ngIf=\\\"header\\\">{{header}}</span>\\n                <span [attr.id]=\\\"ariaLabelledBy\\\" class=\\\"ui-dialog-title\\\" *ngIf=\\\"headerFacet && headerFacet.first\\\">\\n                    <ng-content select=\\\"p-header\\\"></ng-content>\\n                </span>\\n                <a *ngIf=\\\"closable\\\" [ngClass]=\\\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true}\\\" href=\\\"#\\\" role=\\\"button\\\" (click)=\\\"close($event)\\\" (mousedown)=\\\"onCloseMouseDown($event)\\\">\\n                    <span class=\\\"fa fa-fw fa-close\\\"></span>\\n                </a>\\n            </div>\\n            <div #content class=\\\"ui-dialog-content ui-widget-content\\\" [ngStyle]=\\\"contentStyle\\\">\\n                <ng-content></ng-content>\\n            </div>\\n            <div class=\\\"ui-dialog-footer ui-widget-content\\\" *ngIf=\\\"footerFacet && footerFacet.first\\\">\\n                <ng-content select=\\\"p-footer\\\"></ng-content>\\n            </div>\\n            <div *ngIf=\\\"resizable\\\" class=\\\"ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se\\\" style=\\\"z-index: 90;\\\"\\n                (mousedown)=\\\"initResize($event)\\\"></div>\\n        </div>\\n    \",\n  animations: [animations_1.trigger('dialogState', [animations_1.state('hidden', animations_1.style({\n    opacity: 0\n  })), animations_1.state('visible', animations_1.style({\n    opacity: 1\n  })), animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')), animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))])],\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.NgZone])], Dialog);\nexports.Dialog = Dialog;\nvar DialogModule = function () {\n  function DialogModule() {}\n  return DialogModule;\n}();\nDialogModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Dialog, shared_1.SharedModule],\n  declarations: [Dialog]\n})], DialogModule);\nexports.DialogModule = DialogModule;\n//# sourceMappingURL=dialog.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}