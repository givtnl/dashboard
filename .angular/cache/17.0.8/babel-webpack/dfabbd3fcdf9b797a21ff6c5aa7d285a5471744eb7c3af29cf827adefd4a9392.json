{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar forms_1 = require(\"@angular/forms\");\nexports.COLORPICKER_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return ColorPicker;\n  }),\n  multi: true\n};\nvar ColorPicker = function () {\n  function ColorPicker(el, domHandler, renderer, cd) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.cd = cd;\n    this.format = 'hex';\n    this.onChange = new core_1.EventEmitter();\n    this.defaultColor = 'ff0000';\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n  }\n  ColorPicker.prototype.ngAfterViewChecked = function () {\n    if (this.shown) {\n      this.onShow();\n      this.shown = false;\n    }\n  };\n  ColorPicker.prototype.onHueMousedown = function (event) {\n    if (this.disabled) {\n      return;\n    }\n    this.bindDocumentMousemoveListener();\n    this.bindDocumentMouseupListener();\n    this.hueDragging = true;\n    this.pickHue(event);\n  };\n  ColorPicker.prototype.pickHue = function (event) {\n    var top = this.hueViewChild.nativeElement.getBoundingClientRect().top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0);\n    this.value = this.validateHSB({\n      h: Math.floor(360 * (150 - Math.max(0, Math.min(150, event.pageY - top))) / 150),\n      s: this.value.s,\n      b: this.value.b\n    });\n    this.updateColorSelector();\n    this.updateUI();\n    this.updateModel();\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.getValueToUpdate()\n    });\n  };\n  ColorPicker.prototype.onColorMousedown = function (event) {\n    if (this.disabled) {\n      return;\n    }\n    this.bindDocumentMousemoveListener();\n    this.bindDocumentMouseupListener();\n    this.colorDragging = true;\n    this.pickColor(event);\n  };\n  ColorPicker.prototype.pickColor = function (event) {\n    var rect = this.colorSelectorViewChild.nativeElement.getBoundingClientRect();\n    var top = rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0);\n    var left = rect.left + document.body.scrollLeft;\n    var saturation = Math.floor(100 * Math.max(0, Math.min(150, event.pageX - left)) / 150);\n    var brightness = Math.floor(100 * (150 - Math.max(0, Math.min(150, event.pageY - top))) / 150);\n    this.value = this.validateHSB({\n      h: this.value.h,\n      s: saturation,\n      b: brightness\n    });\n    this.updateUI();\n    this.updateModel();\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.getValueToUpdate()\n    });\n  };\n  ColorPicker.prototype.getValueToUpdate = function () {\n    var val;\n    switch (this.format) {\n      case 'hex':\n        val = '#' + this.HSBtoHEX(this.value);\n        break;\n      case 'rgb':\n        val = this.HSBtoRGB(this.value);\n        break;\n      case 'hsb':\n        val = this.value;\n        break;\n    }\n    return val;\n  };\n  ColorPicker.prototype.updateModel = function () {\n    this.onModelChange(this.getValueToUpdate());\n  };\n  ColorPicker.prototype.writeValue = function (value) {\n    if (value) {\n      switch (this.format) {\n        case 'hex':\n          this.value = this.HEXtoHSB(value);\n          break;\n        case 'rgb':\n          this.value = this.RGBtoHSB(value);\n          break;\n        case 'hsb':\n          this.value = value;\n          break;\n      }\n    } else {\n      this.value = this.HEXtoHSB(this.defaultColor);\n    }\n    this.updateColorSelector();\n    this.updateUI();\n  };\n  ColorPicker.prototype.updateColorSelector = function () {\n    this.colorSelectorViewChild.nativeElement.style.backgroundColor = '#' + this.HSBtoHEX(this.value);\n  };\n  ColorPicker.prototype.updateUI = function () {\n    this.colorHandleViewChild.nativeElement.style.left = Math.floor(150 * this.value.s / 100) + 'px';\n    this.colorHandleViewChild.nativeElement.style.top = Math.floor(150 * (100 - this.value.b) / 100) + 'px';\n    this.hueHandleViewChild.nativeElement.style.top = Math.floor(150 - 150 * this.value.h / 360) + 'px';\n    this.inputBgColor = '#' + this.HSBtoHEX(this.value);\n  };\n  ColorPicker.prototype.onInputFocus = function () {\n    this.onModelTouched();\n  };\n  ColorPicker.prototype.show = function () {\n    this.panelViewChild.nativeElement.style.zIndex = String(++domhandler_1.DomHandler.zindex);\n    this.panelVisible = true;\n    this.shown = true;\n  };\n  ColorPicker.prototype.hide = function () {\n    this.panelVisible = false;\n    this.unbindDocumentClickListener();\n  };\n  ColorPicker.prototype.onShow = function () {\n    this.alignPanel();\n    this.bindDocumentClickListener();\n  };\n  ColorPicker.prototype.alignPanel = function () {\n    if (this.appendTo) this.domHandler.absolutePosition(this.panelViewChild.nativeElement, this.inputViewChild.nativeElement);else this.domHandler.relativePosition(this.panelViewChild.nativeElement, this.inputViewChild.nativeElement);\n  };\n  ColorPicker.prototype.onInputClick = function () {\n    this.selfClick = true;\n    this.togglePanel();\n  };\n  ColorPicker.prototype.togglePanel = function () {\n    if (!this.panelVisible) this.show();else this.hide();\n  };\n  ColorPicker.prototype.onInputKeydown = function (event) {\n    switch (event.which) {\n      //space\n      case 32:\n        this.togglePanel();\n        event.preventDefault();\n        break;\n      //escape and tab\n      case 27:\n      case 9:\n        this.hide();\n        break;\n    }\n  };\n  ColorPicker.prototype.onPanelClick = function () {\n    this.selfClick = true;\n  };\n  ColorPicker.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  ColorPicker.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  ColorPicker.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  ColorPicker.prototype.bindDocumentClickListener = function () {\n    var _this = this;\n    if (!this.documentClickListener) {\n      this.documentClickListener = this.renderer.listen('document', 'click', function () {\n        if (!_this.selfClick) {\n          _this.panelVisible = false;\n          _this.unbindDocumentClickListener();\n        }\n        _this.selfClick = false;\n        _this.cd.markForCheck();\n      });\n    }\n  };\n  ColorPicker.prototype.unbindDocumentClickListener = function () {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n      this.documentClickListener = null;\n    }\n  };\n  ColorPicker.prototype.bindDocumentMousemoveListener = function () {\n    var _this = this;\n    if (!this.documentMousemoveListener) {\n      this.documentMousemoveListener = this.renderer.listen('document', 'mousemove', function (event) {\n        if (_this.colorDragging) {\n          _this.pickColor(event);\n        }\n        if (_this.hueDragging) {\n          _this.pickHue(event);\n        }\n      });\n    }\n  };\n  ColorPicker.prototype.unbindDocumentMousemoveListener = function () {\n    if (this.documentMousemoveListener) {\n      this.documentMousemoveListener();\n      this.documentMousemoveListener = null;\n    }\n  };\n  ColorPicker.prototype.bindDocumentMouseupListener = function () {\n    var _this = this;\n    if (!this.documentMouseupListener) {\n      this.documentMouseupListener = this.renderer.listen('document', 'mouseup', function () {\n        _this.colorDragging = false;\n        _this.hueDragging = false;\n        _this.unbindDocumentMousemoveListener();\n        _this.unbindDocumentMouseupListener();\n      });\n    }\n  };\n  ColorPicker.prototype.unbindDocumentMouseupListener = function () {\n    if (this.documentMouseupListener) {\n      this.documentMouseupListener();\n      this.documentMouseupListener = null;\n    }\n  };\n  ColorPicker.prototype.validateHSB = function (hsb) {\n    return {\n      h: Math.min(360, Math.max(0, hsb.h)),\n      s: Math.min(100, Math.max(0, hsb.s)),\n      b: Math.min(100, Math.max(0, hsb.b))\n    };\n  };\n  ColorPicker.prototype.validateRGB = function (rgb) {\n    return {\n      r: Math.min(255, Math.max(0, rgb.r)),\n      g: Math.min(255, Math.max(0, rgb.g)),\n      b: Math.min(255, Math.max(0, rgb.b))\n    };\n  };\n  ColorPicker.prototype.validateHEX = function (hex) {\n    var len = 6 - hex.length;\n    if (len > 0) {\n      var o = [];\n      for (var i = 0; i < len; i++) {\n        o.push('0');\n      }\n      o.push(hex);\n      hex = o.join('');\n    }\n    return hex;\n  };\n  ColorPicker.prototype.HEXtoRGB = function (hex) {\n    var hexValue = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);\n    return {\n      r: hexValue >> 16,\n      g: (hexValue & 0x00FF00) >> 8,\n      b: hexValue & 0x0000FF\n    };\n  };\n  ColorPicker.prototype.HEXtoHSB = function (hex) {\n    return this.RGBtoHSB(this.HEXtoRGB(hex));\n  };\n  ColorPicker.prototype.RGBtoHSB = function (rgb) {\n    var hsb = {\n      h: 0,\n      s: 0,\n      b: 0\n    };\n    var min = Math.min(rgb.r, rgb.g, rgb.b);\n    var max = Math.max(rgb.r, rgb.g, rgb.b);\n    var delta = max - min;\n    hsb.b = max;\n    if (max != 0) {}\n    hsb.s = max != 0 ? 255 * delta / max : 0;\n    if (hsb.s != 0) {\n      if (rgb.r == max) {\n        hsb.h = (rgb.g - rgb.b) / delta;\n      } else if (rgb.g == max) {\n        hsb.h = 2 + (rgb.b - rgb.r) / delta;\n      } else {\n        hsb.h = 4 + (rgb.r - rgb.g) / delta;\n      }\n    } else {\n      hsb.h = -1;\n    }\n    hsb.h *= 60;\n    if (hsb.h < 0) {\n      hsb.h += 360;\n    }\n    hsb.s *= 100 / 255;\n    hsb.b *= 100 / 255;\n    return hsb;\n  };\n  ColorPicker.prototype.HSBtoRGB = function (hsb) {\n    var rgb = {\n      r: null,\n      g: null,\n      b: null\n    };\n    var h = Math.round(hsb.h);\n    var s = Math.round(hsb.s * 255 / 100);\n    var v = Math.round(hsb.b * 255 / 100);\n    if (s == 0) {\n      rgb = {\n        r: v,\n        g: v,\n        b: v\n      };\n    } else {\n      var t1 = v;\n      var t2 = (255 - s) * v / 255;\n      var t3 = (t1 - t2) * (h % 60) / 60;\n      if (h == 360) h = 0;\n      if (h < 60) {\n        rgb.r = t1;\n        rgb.b = t2;\n        rgb.g = t2 + t3;\n      } else if (h < 120) {\n        rgb.g = t1;\n        rgb.b = t2;\n        rgb.r = t1 - t3;\n      } else if (h < 180) {\n        rgb.g = t1;\n        rgb.r = t2;\n        rgb.b = t2 + t3;\n      } else if (h < 240) {\n        rgb.b = t1;\n        rgb.r = t2;\n        rgb.g = t1 - t3;\n      } else if (h < 300) {\n        rgb.b = t1;\n        rgb.g = t2;\n        rgb.r = t2 + t3;\n      } else if (h < 360) {\n        rgb.r = t1;\n        rgb.g = t2;\n        rgb.b = t1 - t3;\n      } else {\n        rgb.r = 0;\n        rgb.g = 0;\n        rgb.b = 0;\n      }\n    }\n    return {\n      r: Math.round(rgb.r),\n      g: Math.round(rgb.g),\n      b: Math.round(rgb.b)\n    };\n  };\n  ColorPicker.prototype.RGBtoHEX = function (rgb) {\n    var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];\n    for (var key in hex) {\n      if (hex[key].length == 1) {\n        hex[key] = '0' + hex[key];\n      }\n    }\n    return hex.join('');\n  };\n  ColorPicker.prototype.HSBtoHEX = function (hsb) {\n    return this.RGBtoHEX(this.HSBtoRGB(hsb));\n  };\n  ColorPicker.prototype.ngOnDestroy = function () {\n    this.unbindDocumentClickListener();\n  };\n  return ColorPicker;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], ColorPicker.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ColorPicker.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], ColorPicker.prototype, \"inline\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ColorPicker.prototype, \"format\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ColorPicker.prototype, \"appendTo\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], ColorPicker.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ColorPicker.prototype, \"tabindex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ColorPicker.prototype, \"inputId\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], ColorPicker.prototype, \"onChange\", void 0);\n__decorate([core_1.ViewChild('panel'), __metadata(\"design:type\", core_1.ElementRef)], ColorPicker.prototype, \"panelViewChild\", void 0);\n__decorate([core_1.ViewChild('colorSelector'), __metadata(\"design:type\", core_1.ElementRef)], ColorPicker.prototype, \"colorSelectorViewChild\", void 0);\n__decorate([core_1.ViewChild('colorHandle'), __metadata(\"design:type\", core_1.ElementRef)], ColorPicker.prototype, \"colorHandleViewChild\", void 0);\n__decorate([core_1.ViewChild('hue'), __metadata(\"design:type\", core_1.ElementRef)], ColorPicker.prototype, \"hueViewChild\", void 0);\n__decorate([core_1.ViewChild('hueHandle'), __metadata(\"design:type\", core_1.ElementRef)], ColorPicker.prototype, \"hueHandleViewChild\", void 0);\n__decorate([core_1.ViewChild('input'), __metadata(\"design:type\", core_1.ElementRef)], ColorPicker.prototype, \"inputViewChild\", void 0);\nColorPicker = __decorate([core_1.Component({\n  selector: 'p-colorPicker',\n  template: \"\\n        <div [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" [ngClass]=\\\"{'ui-colorpicker ui-widget':true,'ui-colorpicker-overlay':!inline,'ui-colorpicker-dragging':colorDragging||hueDragging}\\\">\\n            <input #input type=\\\"text\\\" *ngIf=\\\"!inline\\\" class=\\\"ui-colorpicker-preview ui-inputtext ui-state-default ui-corner-all\\\" readonly=\\\"readonly\\\" [ngClass]=\\\"{'ui-state-disabled': disabled}\\\"\\n                (focus)=\\\"onInputFocus()\\\" (click)=\\\"onInputClick()\\\" (keydown)=\\\"onInputKeydown($event)\\\" [attr.id]=\\\"inputId\\\" [attr.tabindex]=\\\"tabindex\\\" [disabled]=\\\"disabled\\\"\\n                [style.backgroundColor]=\\\"inputBgColor\\\">\\n            <div #panel [ngClass]=\\\"{'ui-colorpicker-panel ui-corner-all': true, 'ui-colorpicker-overlay-panel ui-shadow':!inline, 'ui-state-disabled': disabled}\\\" (click)=\\\"onPanelClick()\\\"\\n                [@panelState]=\\\"inline ? 'visible' : (panelVisible ? 'visible' : 'hidden')\\\" [style.display]=\\\"inline ? 'block' : (panelVisible ? 'block' : 'none')\\\">\\n                <div class=\\\"ui-colorpicker-content\\\">\\n                    <div #colorSelector class=\\\"ui-colorpicker-color-selector\\\" (mousedown)=\\\"onColorMousedown($event)\\\">\\n                        <div class=\\\"ui-colorpicker-color\\\">\\n                            <div #colorHandle class=\\\"ui-colorpicker-color-handle\\\"></div>\\n                        </div>\\n                    </div>\\n                    <div #hue class=\\\"ui-colorpicker-hue\\\" (mousedown)=\\\"onHueMousedown($event)\\\">\\n                        <div #hueHandle class=\\\"ui-colorpicker-hue-handle\\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    \",\n  animations: [animations_1.trigger('panelState', [animations_1.state('hidden', animations_1.style({\n    opacity: 0\n  })), animations_1.state('visible', animations_1.style({\n    opacity: 1\n  })), animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')), animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))])],\n  providers: [domhandler_1.DomHandler, exports.COLORPICKER_VALUE_ACCESSOR]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2, core_1.ChangeDetectorRef])], ColorPicker);\nexports.ColorPicker = ColorPicker;\nvar ColorPickerModule = function () {\n  function ColorPickerModule() {}\n  return ColorPickerModule;\n}();\nColorPickerModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [ColorPicker],\n  declarations: [ColorPicker]\n})], ColorPickerModule);\nexports.ColorPickerModule = ColorPickerModule;\n//# sourceMappingURL=colorpicker.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}