{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar forms_1 = require(\"@angular/forms\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nexports.INPUTSWITCH_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return InputSwitch;\n  }),\n  multi: true\n};\nvar InputSwitch = function () {\n  function InputSwitch(el, domHandler) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.onLabel = 'On';\n    this.offLabel = 'Off';\n    this.ariaLabelTemplate = \"InputSwitch {0}\";\n    this.onChange = new core_1.EventEmitter();\n    this.checked = false;\n    this.focused = false;\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n    this.initialized = false;\n  }\n  InputSwitch.prototype.ngAfterViewInit = function () {\n    this.container = this.el.nativeElement.children[0];\n    this.handle = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-inputswitch-handle');\n    this.onContainer = this.domHandler.findSingle(this.container, 'div.ui-inputswitch-on');\n    this.offContainer = this.domHandler.findSingle(this.container, 'div.ui-inputswitch-off');\n    this.onLabelChild = this.domHandler.findSingle(this.onContainer, 'span.ui-inputswitch-onlabel');\n    this.offLabelChild = this.domHandler.findSingle(this.offContainer, 'span.ui-inputswitch-offlabel');\n  };\n  InputSwitch.prototype.ngAfterViewChecked = function () {\n    if (this.container && this.container.offsetParent && !this.initialized) {\n      this.render();\n    }\n  };\n  InputSwitch.prototype.render = function () {\n    var onContainerWidth = this.domHandler.width(this.onContainer),\n      offContainerWidth = this.domHandler.width(this.offContainer),\n      spanPadding = this.domHandler.innerWidth(this.offLabelChild) - this.domHandler.width(this.offLabelChild),\n      handleMargins = this.domHandler.getOuterWidth(this.handle) - this.domHandler.innerWidth(this.handle);\n    var containerWidth = onContainerWidth > offContainerWidth ? onContainerWidth : offContainerWidth,\n      handleWidth = containerWidth;\n    this.handle.style.width = handleWidth + 'px';\n    handleWidth = this.domHandler.width(this.handle);\n    containerWidth = containerWidth + handleWidth + 6;\n    var labelWidth = containerWidth - handleWidth - spanPadding - handleMargins;\n    this.container.style.width = containerWidth + 'px';\n    this.onLabelChild.style.width = labelWidth + 'px';\n    this.offLabelChild.style.width = labelWidth + 'px';\n    //position\n    this.offContainer.style.width = this.domHandler.width(this.container) - 5 + 'px';\n    this.offset = this.domHandler.width(this.container) - this.domHandler.getOuterWidth(this.handle);\n    //default value\n    if (this.checked) {\n      this.handle.style.left = this.offset + 'px';\n      this.onContainer.style.width = this.offset + 'px';\n      this.offLabelChild.style.marginRight = -this.offset + 'px';\n    } else {\n      this.onContainer.style.width = 0 + 'px';\n      this.onLabelChild.style.marginLeft = -this.offset + 'px';\n    }\n    this.initialized = true;\n  };\n  InputSwitch.prototype.toggle = function (event, checkbox) {\n    if (!this.disabled) {\n      if (this.checked) {\n        this.checked = false;\n        this.uncheckUI();\n      } else {\n        this.checked = true;\n        this.checkUI();\n      }\n      this.onModelChange(this.checked);\n      this.onChange.emit({\n        originalEvent: event,\n        checked: this.checked\n      });\n      checkbox.focus();\n    }\n  };\n  InputSwitch.prototype.checkUI = function () {\n    this.onContainer.style.width = this.offset + 'px';\n    this.onLabelChild.style.marginLeft = 0 + 'px';\n    this.offLabelChild.style.marginRight = -this.offset + 'px';\n    this.handle.style.left = this.offset + 'px';\n    this.updateAriaLabel();\n  };\n  InputSwitch.prototype.uncheckUI = function () {\n    this.onContainer.style.width = 0 + 'px';\n    this.onLabelChild.style.marginLeft = -this.offset + 'px';\n    this.offLabelChild.style.marginRight = 0 + 'px';\n    this.handle.style.left = 0 + 'px';\n    this.updateAriaLabel();\n  };\n  InputSwitch.prototype.onFocus = function (event) {\n    this.focused = true;\n  };\n  InputSwitch.prototype.onBlur = function (event) {\n    this.focused = false;\n    this.onModelTouched();\n  };\n  InputSwitch.prototype.writeValue = function (checked) {\n    this.checked = checked;\n    if (this.initialized) {\n      if (this.checked === true) this.checkUI();else this.uncheckUI();\n    }\n  };\n  InputSwitch.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  InputSwitch.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  InputSwitch.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  InputSwitch.prototype.updateAriaLabel = function () {\n    var pattern = /{(.*?)}/,\n      value = this.checked ? this.onLabel : this.offLabel;\n    this.ariaLabel = this.ariaLabelTemplate.replace(this.ariaLabelTemplate.match(pattern)[0], value);\n  };\n  return InputSwitch;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputSwitch.prototype, \"onLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputSwitch.prototype, \"offLabel\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], InputSwitch.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], InputSwitch.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputSwitch.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], InputSwitch.prototype, \"tabindex\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputSwitch.prototype, \"inputId\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], InputSwitch.prototype, \"ariaLabelTemplate\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], InputSwitch.prototype, \"onChange\", void 0);\nInputSwitch = __decorate([core_1.Component({\n  selector: 'p-inputSwitch',\n  template: \"\\n        <div [ngClass]=\\\"{'ui-inputswitch ui-widget ui-widget-content ui-corner-all': true,\\n            'ui-state-disabled': disabled,'ui-inputswitch-checked':checked, 'ui-state-focus':focused}\\\" (click)=\\\"toggle($event, in)\\\"\\n            [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <div class=\\\"ui-inputswitch-off\\\">\\n                <span class=\\\"ui-inputswitch-offlabel\\\">{{offLabel}}</span>\\n            </div>\\n            <div class=\\\"ui-inputswitch-on\\\">\\n                <span class=\\\"ui-inputswitch-onlabel\\\">{{onLabel}}</span>\\n            </div>\\n            <div [ngClass]=\\\"{'ui-inputswitch-handle ui-state-default':true, 'ui-state-focus':focused}\\\"></div>\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input #in type=\\\"checkbox\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledBy\\\" aria-live=\\\"polite\\\" [attr.id]=\\\"inputId\\\" (focus)=\\\"onFocus($event)\\\" (blur)=\\\"onBlur($event)\\\" readonly=\\\"readonly\\\" [attr.tabindex]=\\\"tabindex\\\"/>\\n            </div>\\n        </div>\\n    \",\n  providers: [exports.INPUTSWITCH_VALUE_ACCESSOR, domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler])], InputSwitch);\nexports.InputSwitch = InputSwitch;\nvar InputSwitchModule = function () {\n  function InputSwitchModule() {}\n  return InputSwitchModule;\n}();\nInputSwitchModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [InputSwitch],\n  declarations: [InputSwitch]\n})], InputSwitchModule);\nexports.InputSwitchModule = InputSwitchModule;\n//# sourceMappingURL=inputswitch.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}