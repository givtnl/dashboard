{"ast":null,"code":"import { environment } from \"environments/environment\";\nimport * as pkg from '../../../package.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class LoggingService {\n  constructor(dataService, http) {\n    this.dataService = dataService;\n    this.http = http;\n    this.logitUrl = \"https://api.logit.io/v2\";\n  }\n  log(level, message) {\n    let headers = new HttpHeaders();\n    headers.append('ApiKey', environment.logstashApiKey);\n    headers.append('Content-Type', 'application/json');\n    let body = new LogitBody();\n    body.level = LogLevel[level];\n    body.version = pkg[\"version\"];\n    body.browser = navigator.userAgent;\n    body.lang = navigator.language;\n    if (this.dataService.getData(\"CurrentCollectGroup\")) body.guid = JSON.parse(this.dataService.getData(\"CurrentCollectGroup\")).GUID;\n    body.tag = environment.logstashTag;\n    body.message = message;\n    const json = JSON.stringify(body);\n    return this.http.put(this.logitUrl, json, {\n      headers\n    }).toPromise();\n  }\n  error(message) {\n    this.log(LogLevel.Error, message);\n  }\n  info(message) {\n    this.log(LogLevel.Information, message);\n  }\n  warning(message) {\n    this.log(LogLevel.Warning, message);\n  }\n  static #_ = this.ɵfac = function LoggingService_Factory(t) {\n    return new (t || LoggingService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoggingService,\n    factory: LoggingService.ɵfac\n  });\n}\nclass LogitBody {}\nexport var LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Information\"] = 0] = \"Information\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Error\"] = 2] = \"Error\";\n})(LogLevel || (LogLevel = {}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}