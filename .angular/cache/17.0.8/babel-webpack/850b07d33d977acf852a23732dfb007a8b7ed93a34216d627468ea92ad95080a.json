{"ast":null,"code":"import 'rxjs/add/operator/toPromise'; //to support toPromise\nimport { User } from '../models/user';\nimport { EventEmitter } from \"@angular/core\";\nimport { PaymentType } from \"../models/paymentType\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { getApiUrl } from './helpers/api-url.helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data.service\";\nimport * as i2 from \"./api-client.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/router\";\nexport class UserService {\n  constructor(dataService, apiService, http, router) {\n    this.dataService = dataService;\n    this.apiService = apiService;\n    this.http = http;\n    this.router = router;\n    this.collectGroupChanged = new EventEmitter();\n    this.userLoggedOut = new EventEmitter();\n    this.loggedIn = false;\n    this.SiteAdmin = false;\n    this.GivtOperations = false;\n    this.CollectGroups = null;\n    this.CurrentCollectGroup = null;\n    this.user = new User();\n    this.apiLoginiUrl = getApiUrl() + '/oauth2/token';\n    this.apiUrl = getApiUrl();\n    this.loggedIn = !!dataService.getData(\"accessToken\");\n    this.SiteAdmin = dataService.getData(\"SiteAdmin\") == \"True\";\n    this.GivtOperations = dataService.getData(\"GivtOperations\") == \"True\";\n    let d = dataService.getData(\"CollectGroups\");\n    this.CollectGroups = d && d != 'undefined' ? JSON.parse(d) : [];\n    d = dataService.getData(\"CurrentCollectGroup\");\n    this.CurrentCollectGroup = d && d != 'undefined' ? JSON.parse(d) : null;\n  }\n  get currencySymbol() {\n    switch (this.CurrentCollectGroup.PaymentType) {\n      case PaymentType.BACS:\n        return \"£\";\n      case PaymentType.CreditCard:\n        return \"$\";\n      case PaymentType.SEPA:\n      default:\n        return \"€\";\n    }\n  }\n  patchLanguage(userId, language) {\n    return this.http.patch(`${this.apiUrl}/api/v2/users/${userId}/language/${language}`, {});\n  }\n  getCurrentUser() {\n    return this.http.get(`${this.apiUrl}/api/v2/users`);\n  }\n  loginHttpCall(body, headers) {\n    return this.http.post(this.apiLoginiUrl, body, {\n      headers\n    }).toPromise().then(res => {\n      if (res['access_token']) {\n        this.loggedIn = true;\n        this.startTimedLogout(res['expires_in'] * 1000);\n        this.dataService.writeData(\"UserEmail\", res['Email']);\n        this.dataService.writeData(\"accessToken\", res['access_token']);\n        if (res.hasOwnProperty(\"SiteAdmin\")) this.dataService.writeData(\"SiteAdmin\", res['SiteAdmin']);\n        this.SiteAdmin = this.dataService.getData(\"SiteAdmin\") == \"True\";\n        if (res.hasOwnProperty(\"GivtOperations\")) this.dataService.writeData(\"GivtOperations\", res['GivtOperations']);\n        this.GivtOperations = this.dataService.getData(\"GivtOperations\") == \"True\";\n        if (res.hasOwnProperty(\"CollectGroupAdmin\")) {\n          return this.apiService.getData('CollectGroupView/CollectGroup').then(res => {\n            this.dataService.writeData(\"CollectGroups\", JSON.stringify(res));\n            if (!this.CurrentCollectGroup || this.CollectGroups.indexOf(this.CurrentCollectGroup) < 0) this.dataService.writeData(\"CurrentCollectGroup\", JSON.stringify(res[0]));\n            this.CurrentCollectGroup = JSON.parse(this.dataService.getData(\"CurrentCollectGroup\"));\n            this.CollectGroups = JSON.parse(this.dataService.getData(\"CollectGroups\"));\n            return true;\n          }).catch(_ => {\n            err => console.log(err);\n            return false;\n          });\n        } else {\n          this.dataService.removeOne(\"CurrentCollectGroup\");\n          if (!this.GivtOperations && !this.SiteAdmin) return false;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n  loginWithRefreshtoken(access_token, refresh_token) {\n    //Set the headers\n    let headers = new HttpHeaders();\n    headers.append('authorization', 'Bearer ' + access_token);\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    //set the x-www-form-urlencoded parameters\n    let urlSearchParams = new URLSearchParams('');\n    urlSearchParams.append('grant_type', 'refresh_token');\n    urlSearchParams.append('refresh_token', refresh_token);\n    //set to string\n    let body = urlSearchParams.toString();\n    //do the http call\n    return this.loginHttpCall(body, headers);\n  }\n  login(username, password) {\n    let d = this.dataService.getData(\"CurrentCollectGroup\");\n    this.CurrentCollectGroup = typeof d != 'undefined' ? JSON.parse(d) : null;\n    //Set the headers\n    let headers = new HttpHeaders();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    //set the x-www-form-urlencoded parameters\n    let urlSearchParams = new URLSearchParams('');\n    urlSearchParams.append('grant_type', 'password');\n    urlSearchParams.append('userName', username);\n    urlSearchParams.append('password', password);\n    //set to string\n    let body = urlSearchParams.toString();\n    return this.loginHttpCall(body, headers);\n  }\n  startTimedLogout(ms) {\n    setTimeout(() => {\n      this.logout();\n      this.router.navigate(['loggedout']);\n    }, ms);\n  }\n  logout() {\n    this.loggedIn = false;\n    this.SiteAdmin = false;\n    this.dataService.clearAll();\n    this.userLoggedOut.emit(null);\n  }\n  requestNewPass(email) {\n    let headers = new HttpHeaders();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(this.apiUrl + '/api/Users/ForgotPassword?dashboard=true', \"\\\"\" + email + \"\\\"\", {\n      headers\n    }).toPromise().then(res => {\n      return res;\n    });\n  }\n  saveNewPass(email, token, newPass) {\n    let headers = new HttpHeaders();\n    headers.append('Content-Type', 'application/json');\n    var x = {\n      \"userID\": email,\n      \"passwordToken\": token,\n      \"newPassword\": newPass\n    };\n    return this.http.post(this.apiUrl + '/api/Users/ResetPassword', x, {\n      headers\n    }).toPromise().then(res => {\n      return res;\n    });\n  }\n  changeCollectGroup(cg) {\n    if (this.CollectGroups.indexOf(cg) > -1) {\n      this.dataService.writeData(\"CurrentCollectGroup\", JSON.stringify(cg));\n      this.CurrentCollectGroup = cg;\n      this.collectGroupChanged.emit(null);\n    }\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i2.ApiClientService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}