{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar objectutils_1 = require(\"../utils/objectutils\");\nvar forms_1 = require(\"@angular/forms\");\nexports.LISTBOX_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return Listbox;\n  }),\n  multi: true\n};\nvar Listbox = function () {\n  function Listbox(el, domHandler, objectUtils, cd) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.objectUtils = objectUtils;\n    this.cd = cd;\n    this.checkbox = false;\n    this.filter = false;\n    this.filterMode = 'contains';\n    this.metaKeySelection = true;\n    this.showToggleAll = true;\n    this.onChange = new core_1.EventEmitter();\n    this.onDblClick = new core_1.EventEmitter();\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n  }\n  Object.defineProperty(Listbox.prototype, \"options\", {\n    get: function () {\n      return this._options;\n    },\n    set: function (val) {\n      var opts = this.optionLabel ? this.objectUtils.generateSelectItems(val, this.optionLabel) : val;\n      this._options = opts;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Listbox.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    this.templates.forEach(function (item) {\n      switch (item.getType()) {\n        case 'item':\n          _this.itemTemplate = item.template;\n          break;\n        default:\n          _this.itemTemplate = item.template;\n          break;\n      }\n    });\n  };\n  Listbox.prototype.writeValue = function (value) {\n    this.value = value;\n    this.cd.markForCheck();\n  };\n  Listbox.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  Listbox.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  Listbox.prototype.setDisabledState = function (val) {\n    this.disabled = val;\n  };\n  Listbox.prototype.onOptionClick = function (event, option) {\n    if (this.disabled) {\n      return;\n    }\n    if (!this.checkboxClick) {\n      if (this.multiple) this.onOptionClickMultiple(event, option);else this.onOptionClickSingle(event, option);\n    } else {\n      this.checkboxClick = false;\n    }\n    this.optionTouched = false;\n  };\n  Listbox.prototype.onOptionTouchEnd = function (event, option) {\n    if (this.disabled) {\n      return;\n    }\n    this.optionTouched = true;\n  };\n  Listbox.prototype.onOptionClickSingle = function (event, option) {\n    var selected = this.isSelected(option);\n    var valueChanged = false;\n    var metaSelection = this.optionTouched ? false : this.metaKeySelection;\n    if (metaSelection) {\n      var metaKey = event.metaKey || event.ctrlKey;\n      if (selected) {\n        if (metaKey) {\n          this.value = null;\n          valueChanged = true;\n        }\n      } else {\n        this.value = option.value;\n        valueChanged = true;\n      }\n    } else {\n      this.value = selected ? null : option.value;\n      valueChanged = true;\n    }\n    if (valueChanged) {\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n  };\n  Listbox.prototype.onOptionClickMultiple = function (event, option) {\n    var selected = this.isSelected(option);\n    var valueChanged = false;\n    var metaSelection = this.optionTouched ? false : this.metaKeySelection;\n    if (metaSelection) {\n      var metaKey = event.metaKey || event.ctrlKey;\n      if (selected) {\n        if (metaKey) {\n          this.removeOption(option);\n        } else {\n          this.value = [option.value];\n        }\n        valueChanged = true;\n      } else {\n        this.value = metaKey ? this.value || [] : [];\n        this.value = this.value.concat([option.value]);\n        valueChanged = true;\n      }\n    } else {\n      if (selected) {\n        this.removeOption(option);\n      } else {\n        this.value = (this.value || []).concat([option.value]);\n      }\n      valueChanged = true;\n    }\n    if (valueChanged) {\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n  };\n  Listbox.prototype.removeOption = function (option) {\n    var _this = this;\n    this.value = this.value.filter(function (val) {\n      return !_this.objectUtils.equals(val, option.value, _this.dataKey);\n    });\n  };\n  Listbox.prototype.isSelected = function (option) {\n    var selected = false;\n    if (this.multiple) {\n      if (this.value) {\n        for (var _i = 0, _a = this.value; _i < _a.length; _i++) {\n          var val = _a[_i];\n          if (this.objectUtils.equals(val, option.value, this.dataKey)) {\n            selected = true;\n            break;\n          }\n        }\n      }\n    } else {\n      selected = this.objectUtils.equals(this.value, option.value, this.dataKey);\n    }\n    return selected;\n  };\n  Object.defineProperty(Listbox.prototype, \"allChecked\", {\n    get: function () {\n      if (this.filterValue) return this.allFilteredSelected();else return this.value && this.options && this.value.length === this.options.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Listbox.prototype.allFilteredSelected = function () {\n    var allSelected;\n    if (this.value && this.options && this.options.length) {\n      allSelected = true;\n      for (var _i = 0, _a = this.options; _i < _a.length; _i++) {\n        var opt = _a[_i];\n        if (this.isItemVisible(opt)) {\n          if (!this.isSelected(opt)) {\n            allSelected = false;\n            break;\n          }\n        }\n      }\n    }\n    return allSelected;\n  };\n  Listbox.prototype.onFilter = function (event) {\n    var query = event.target.value.trim().toLowerCase();\n    this.filterValue = query.length ? query : null;\n  };\n  Listbox.prototype.toggleAll = function (event, checkbox) {\n    if (this.disabled || !this.options || this.options.length === 0) {\n      return;\n    }\n    if (checkbox.checked) {\n      this.value = [];\n    } else {\n      if (this.options) {\n        this.value = [];\n        for (var i = 0; i < this.options.length; i++) {\n          var opt = this.options[i];\n          if (this.isItemVisible(opt)) {\n            this.value.push(opt.value);\n          }\n        }\n      }\n    }\n    checkbox.checked = !checkbox.checked;\n    this.onModelChange(this.value);\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.value\n    });\n  };\n  Listbox.prototype.isItemVisible = function (option) {\n    if (this.filterValue) {\n      var visible = void 0;\n      switch (this.filterMode) {\n        case 'startsWith':\n          visible = option.label.toLowerCase().indexOf(this.filterValue.toLowerCase()) === 0;\n          break;\n        case 'contains':\n          visible = option.label.toLowerCase().indexOf(this.filterValue.toLowerCase()) > -1;\n          break;\n        default:\n          visible = true;\n      }\n      return visible;\n    } else {\n      return true;\n    }\n  };\n  Listbox.prototype.onDoubleClick = function (event, option) {\n    if (this.disabled) {\n      return;\n    }\n    this.onDblClick.emit({\n      originalEvent: event,\n      value: this.value\n    });\n  };\n  Listbox.prototype.onCheckboxClick = function (event, option) {\n    if (this.disabled) {\n      return;\n    }\n    this.checkboxClick = true;\n    var selected = this.isSelected(option);\n    if (selected) {\n      this.removeOption(option);\n    } else {\n      this.value = this.value ? this.value : [];\n      this.value = this.value.concat([option.value]);\n    }\n    this.onModelChange(this.value);\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.value\n    });\n  };\n  Listbox.prototype.onInputFocus = function (event) {\n    this.focus = true;\n  };\n  Listbox.prototype.onInputBlur = function (event) {\n    this.focus = false;\n  };\n  return Listbox;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Listbox.prototype, \"multiple\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Listbox.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Listbox.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Listbox.prototype, \"listStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Listbox.prototype, \"readonly\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Listbox.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Listbox.prototype, \"checkbox\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Listbox.prototype, \"filter\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Listbox.prototype, \"filterMode\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Listbox.prototype, \"metaKeySelection\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Listbox.prototype, \"dataKey\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Listbox.prototype, \"showToggleAll\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Listbox.prototype, \"optionLabel\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Listbox.prototype, \"onChange\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Listbox.prototype, \"onDblClick\", void 0);\n__decorate([core_1.ContentChild(shared_1.Header), __metadata(\"design:type\", Object)], Listbox.prototype, \"headerFacet\", void 0);\n__decorate([core_1.ContentChild(shared_1.Footer), __metadata(\"design:type\", Object)], Listbox.prototype, \"footerFacet\", void 0);\n__decorate([core_1.ContentChildren(shared_1.PrimeTemplate), __metadata(\"design:type\", core_1.QueryList)], Listbox.prototype, \"templates\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], Listbox.prototype, \"options\", null);\nListbox = __decorate([core_1.Component({\n  selector: 'p-listbox',\n  template: \"\\n    <div [ngClass]=\\\"{'ui-listbox ui-inputtext ui-widget ui-widget-content ui-corner-all':true,'ui-state-disabled':disabled,'ui-state-focus':focus}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n      <div class=\\\"ui-helper-hidden-accessible\\\">\\n        <input type=\\\"text\\\" readonly=\\\"readonly\\\" (focus)=\\\"onInputFocus($event)\\\" (blur)=\\\"onInputBlur($event)\\\">\\n      </div>\\n      <div class=\\\"ui-widget-header ui-corner-all ui-listbox-header ui-helper-clearfix\\\" *ngIf=\\\"headerFacet\\\">\\n        <ng-content select=\\\"p-header\\\"></ng-content>\\n      </div>\\n      <div class=\\\"ui-widget-header ui-corner-all ui-listbox-header ui-helper-clearfix\\\" *ngIf=\\\"(checkbox && multiple) || filter\\\" [ngClass]=\\\"{'ui-listbox-header-w-checkbox': checkbox}\\\">\\n        <div class=\\\"ui-chkbox ui-widget\\\" *ngIf=\\\"checkbox && multiple && showToggleAll\\\">\\n          <div class=\\\"ui-helper-hidden-accessible\\\">\\n            <input #cb type=\\\"checkbox\\\" readonly=\\\"readonly\\\" [checked]=\\\"allChecked\\\">\\n          </div>\\n          <div class=\\\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\\\" [ngClass]=\\\"{'ui-state-active':allChecked}\\\" (click)=\\\"toggleAll($event,cb)\\\">\\n            <span class=\\\"ui-chkbox-icon ui-clickable\\\" [ngClass]=\\\"{'fa fa-check':allChecked}\\\"></span>\\n          </div>\\n        </div>\\n        <div class=\\\"ui-listbox-filter-container\\\" *ngIf=\\\"filter\\\">\\n          <input type=\\\"text\\\" role=\\\"textbox\\\" (input)=\\\"onFilter($event)\\\" class=\\\"ui-inputtext ui-widget ui-state-default ui-corner-all\\\" [disabled]=\\\"disabled\\\">\\n          <span class=\\\"fa fa-search\\\"></span>\\n        </div>\\n      </div>\\n      <div class=\\\"ui-listbox-list-wrapper\\\">\\n        <ul class=\\\"ui-listbox-list\\\" [ngStyle]=\\\"listStyle\\\">\\n          <li *ngFor=\\\"let option of options; let i = index;\\\" [style.display]=\\\"isItemVisible(option) ? 'block' : 'none'\\\"\\n              [ngClass]=\\\"{'ui-listbox-item ui-corner-all':true,'ui-state-highlight':isSelected(option)}\\\"\\n              (click)=\\\"onOptionClick($event,option)\\\" (dblclick)=\\\"onDoubleClick($event,option)\\\" (touchend)=\\\"onOptionTouchEnd($event,option)\\\">\\n            <div class=\\\"ui-chkbox ui-widget\\\" *ngIf=\\\"checkbox && multiple\\\" (click)=\\\"onCheckboxClick($event,option)\\\">\\n              <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input type=\\\"checkbox\\\" [checked]=\\\"isSelected(option)\\\" [disabled]=\\\"disabled\\\">\\n              </div>\\n              <div class=\\\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\\\" [ngClass]=\\\"{'ui-state-active':isSelected(option)}\\\">\\n                <span class=\\\"ui-chkbox-icon ui-clickable\\\" [ngClass]=\\\"{'fa fa-check':isSelected(option)}\\\"></span>\\n              </div>\\n            </div>\\n            <span *ngIf=\\\"!itemTemplate\\\">{{option.label}}</span>\\n            <ng-template *ngIf=\\\"itemTemplate\\\" [pTemplateWrapper]=\\\"itemTemplate\\\" [item]=\\\"option\\\" [index]=\\\"i\\\"></ng-template>\\n          </li>\\n        </ul>\\n      </div>\\n      <div class=\\\"ui-listbox-footer ui-widget-header ui-corner-all\\\" *ngIf=\\\"footerFacet\\\">\\n        <ng-content select=\\\"p-footer\\\"></ng-content>\\n      </div>\\n    </div>\\n  \",\n  providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, exports.LISTBOX_VALUE_ACCESSOR]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, objectutils_1.ObjectUtils, core_1.ChangeDetectorRef])], Listbox);\nexports.Listbox = Listbox;\nvar ListboxModule = function () {\n  function ListboxModule() {}\n  return ListboxModule;\n}();\nListboxModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, shared_1.SharedModule],\n  exports: [Listbox, shared_1.SharedModule],\n  declarations: [Listbox]\n})], ListboxModule);\nexports.ListboxModule = ListboxModule;\n//# sourceMappingURL=listbox.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}