{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar core_2 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar shared_2 = require(\"../common/shared\");\nvar treedragdropservice_1 = require(\"../common/treedragdropservice\");\nvar TreeNodeTemplateLoader = function () {\n  function TreeNodeTemplateLoader(viewContainer) {\n    this.viewContainer = viewContainer;\n  }\n  TreeNodeTemplateLoader.prototype.ngOnInit = function () {\n    this.view = this.viewContainer.createEmbeddedView(this.template, {\n      '\\$implicit': this.node\n    });\n  };\n  TreeNodeTemplateLoader.prototype.ngOnDestroy = function () {\n    this.view.destroy();\n  };\n  return TreeNodeTemplateLoader;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], TreeNodeTemplateLoader.prototype, \"node\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", core_1.TemplateRef)], TreeNodeTemplateLoader.prototype, \"template\", void 0);\nTreeNodeTemplateLoader = __decorate([core_1.Component({\n  selector: 'p-treeNodeTemplateLoader',\n  template: \"\"\n}), __metadata(\"design:paramtypes\", [core_1.ViewContainerRef])], TreeNodeTemplateLoader);\nexports.TreeNodeTemplateLoader = TreeNodeTemplateLoader;\nvar UITreeNode = UITreeNode_1 = function () {\n  function UITreeNode(tree) {\n    this.tree = tree;\n  }\n  UITreeNode.prototype.ngOnInit = function () {\n    this.node.parent = this.parentNode;\n  };\n  UITreeNode.prototype.getIcon = function () {\n    var icon;\n    if (this.node.icon) icon = this.node.icon;else icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;\n    return UITreeNode_1.ICON_CLASS + ' ' + icon;\n  };\n  UITreeNode.prototype.isLeaf = function () {\n    return this.node.leaf == false ? false : !(this.node.children && this.node.children.length);\n  };\n  UITreeNode.prototype.toggle = function (event) {\n    if (this.node.expanded) this.tree.onNodeCollapse.emit({\n      originalEvent: event,\n      node: this.node\n    });else this.tree.onNodeExpand.emit({\n      originalEvent: event,\n      node: this.node\n    });\n    this.node.expanded = !this.node.expanded;\n  };\n  UITreeNode.prototype.onNodeClick = function (event) {\n    this.tree.onNodeClick(event, this.node);\n  };\n  UITreeNode.prototype.onNodeTouchEnd = function () {\n    this.tree.onNodeTouchEnd();\n  };\n  UITreeNode.prototype.onNodeRightClick = function (event) {\n    this.tree.onNodeRightClick(event, this.node);\n  };\n  UITreeNode.prototype.isSelected = function () {\n    return this.tree.isSelected(this.node);\n  };\n  UITreeNode.prototype.onDropPoint = function (event, position) {\n    event.preventDefault();\n    var dragNode = this.tree.dragNode;\n    var dragNodeIndex = this.tree.dragNodeIndex;\n    var dragNodeScope = this.tree.dragNodeScope;\n    var isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? position === 1 || dragNodeIndex !== this.index - 1 : true;\n    if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n      var newNodeList = this.node.parent ? this.node.parent.children : this.tree.value;\n      this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);\n      var dropIndex = this.index;\n      if (position < 0) {\n        dropIndex = this.tree.dragNodeSubNodes === newNodeList ? this.tree.dragNodeIndex > this.index ? this.index : this.index - 1 : this.index;\n        newNodeList.splice(dropIndex, 0, dragNode);\n      } else {\n        dropIndex = newNodeList.length;\n        newNodeList.push(dragNode);\n      }\n      this.tree.dragDropService.stopDrag({\n        node: dragNode,\n        subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n        index: dragNodeIndex\n      });\n      this.tree.onNodeDrop.emit({\n        originalEvent: event,\n        dragNode: dragNode,\n        dropNode: this.node,\n        dropIndex: dropIndex\n      });\n    }\n    this.draghoverPrev = false;\n    this.draghoverNext = false;\n  };\n  UITreeNode.prototype.onDropPointDragOver = function (event) {\n    event.dataTransfer.dropEffect = 'move';\n    event.preventDefault();\n  };\n  UITreeNode.prototype.onDropPointDragEnter = function (event, position) {\n    if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n      if (position < 0) this.draghoverPrev = true;else this.draghoverNext = true;\n    }\n  };\n  UITreeNode.prototype.onDropPointDragLeave = function (event) {\n    this.draghoverPrev = false;\n    this.draghoverNext = false;\n  };\n  UITreeNode.prototype.onDragStart = function (event) {\n    if (this.tree.draggableNodes && this.node.draggable !== false) {\n      event.dataTransfer.setData(\"text\", \"data\");\n      this.tree.dragDropService.startDrag({\n        tree: this,\n        node: this.node,\n        subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n        index: this.index,\n        scope: this.tree.draggableScope\n      });\n    } else {\n      event.preventDefault();\n    }\n  };\n  UITreeNode.prototype.onDragStop = function (event) {\n    this.tree.dragDropService.stopDrag({\n      node: this.node,\n      subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n      index: this.index\n    });\n  };\n  UITreeNode.prototype.onDropNodeDragOver = function (event) {\n    event.dataTransfer.dropEffect = 'move';\n    if (this.tree.droppableNodes) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n  UITreeNode.prototype.onDropNode = function (event) {\n    if (this.tree.droppableNodes && this.node.droppable !== false) {\n      event.preventDefault();\n      event.stopPropagation();\n      var dragNode = this.tree.dragNode;\n      if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\n        var dragNodeIndex = this.tree.dragNodeIndex;\n        this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        if (this.node.children) this.node.children.push(dragNode);else this.node.children = [dragNode];\n        this.tree.dragDropService.stopDrag({\n          node: dragNode,\n          subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n          index: this.tree.dragNodeIndex\n        });\n        this.tree.onNodeDrop.emit({\n          originalEvent: event,\n          dragNode: dragNode,\n          dropNode: this.node,\n          index: this.index\n        });\n      }\n    }\n    this.draghoverNode = false;\n  };\n  UITreeNode.prototype.onDropNodeDragEnter = function (event) {\n    if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n      this.draghoverNode = true;\n    }\n  };\n  UITreeNode.prototype.onDropNodeDragLeave = function (event) {\n    if (this.tree.droppableNodes) {\n      var rect = event.currentTarget.getBoundingClientRect();\n      if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n        this.draghoverNode = false;\n      }\n    }\n  };\n  return UITreeNode;\n}();\nUITreeNode.ICON_CLASS = 'ui-treenode-icon fa fa-fw';\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], UITreeNode.prototype, \"node\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], UITreeNode.prototype, \"parentNode\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], UITreeNode.prototype, \"root\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number)], UITreeNode.prototype, \"index\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], UITreeNode.prototype, \"firstChild\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], UITreeNode.prototype, \"lastChild\", void 0);\nUITreeNode = UITreeNode_1 = __decorate([core_1.Component({\n  selector: 'p-treeNode',\n  template: \"\\n        <ng-template [ngIf]=\\\"node\\\">\\n            <li *ngIf=\\\"tree.droppableNodes\\\" class=\\\"ui-treenode-droppoint\\\" [ngClass]=\\\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverPrev}\\\"\\n            (drop)=\\\"onDropPoint($event,-1)\\\" (dragover)=\\\"onDropPointDragOver($event)\\\" (dragenter)=\\\"onDropPointDragEnter($event,-1)\\\" (dragleave)=\\\"onDropPointDragLeave($event)\\\"></li>\\n            <li *ngIf=\\\"!tree.horizontal\\\" [ngClass]=\\\"['ui-treenode',node.styleClass||'', isLeaf() ? 'ui-treenode-leaf': '']\\\">\\n                <div class=\\\"ui-treenode-content\\\" (click)=\\\"onNodeClick($event)\\\" (contextmenu)=\\\"onNodeRightClick($event)\\\" (touchend)=\\\"onNodeTouchEnd()\\\"\\n                    (drop)=\\\"onDropNode($event)\\\" (dragover)=\\\"onDropNodeDragOver($event)\\\" (dragenter)=\\\"onDropNodeDragEnter($event)\\\" (dragleave)=\\\"onDropNodeDragLeave($event)\\\"\\n                    [ngClass]=\\\"{'ui-treenode-selectable':tree.selectionMode && node.selectable !== false,'ui-treenode-dragover':draghoverNode, 'ui-treenode-content-selected':isSelected()}\\\" [draggable]=\\\"tree.draggableNodes\\\" (dragstart)=\\\"onDragStart($event)\\\" (dragend)=\\\"onDragStop($event)\\\">\\n                    <span class=\\\"ui-tree-toggler  fa fa-fw\\\" [ngClass]=\\\"{'fa-caret-right':!node.expanded,'fa-caret-down':node.expanded}\\\"\\n                            (click)=\\\"toggle($event)\\\"></span\\n                    ><div class=\\\"ui-chkbox\\\" *ngIf=\\\"tree.selectionMode == 'checkbox'\\\"><div class=\\\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\\\">\\n                        <span class=\\\"ui-chkbox-icon ui-clickable fa\\\" \\n                            [ngClass]=\\\"{'fa-check':isSelected(),'fa-minus':node.partialSelected}\\\"></span></div></div\\n                    ><span [class]=\\\"getIcon()\\\" *ngIf=\\\"node.icon||node.expandedIcon||node.collapsedIcon\\\"></span\\n                    ><span class=\\\"ui-treenode-label ui-corner-all\\\" \\n                        [ngClass]=\\\"{'ui-state-highlight':isSelected()}\\\">\\n                            <span *ngIf=\\\"!tree.getTemplateForNode(node)\\\">{{node.label}}</span>\\n                            <span *ngIf=\\\"tree.getTemplateForNode(node)\\\">\\n                                <p-treeNodeTemplateLoader [node]=\\\"node\\\" [template]=\\\"tree.getTemplateForNode(node)\\\"></p-treeNodeTemplateLoader>\\n                            </span>\\n                    </span>\\n                </div>\\n                <ul class=\\\"ui-treenode-children\\\" style=\\\"display: none;\\\" *ngIf=\\\"node.children && node.expanded\\\" [style.display]=\\\"node.expanded ? 'block' : 'none'\\\">\\n                    <p-treeNode *ngFor=\\\"let childNode of node.children;let firstChild=first;let lastChild=last; let index=index\\\" [node]=\\\"childNode\\\" [parentNode]=\\\"node\\\"\\n                        [firstChild]=\\\"firstChild\\\" [lastChild]=\\\"lastChild\\\" [index]=\\\"index\\\"></p-treeNode>\\n                </ul>\\n            </li>\\n            <li *ngIf=\\\"tree.droppableNodes&&lastChild\\\" class=\\\"ui-treenode-droppoint\\\" [ngClass]=\\\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverNext}\\\"\\n            (drop)=\\\"onDropPoint($event,1)\\\" (dragover)=\\\"onDropPointDragOver($event)\\\" (dragenter)=\\\"onDropPointDragEnter($event,1)\\\" (dragleave)=\\\"onDropPointDragLeave($event)\\\"></li>\\n            <table *ngIf=\\\"tree.horizontal\\\" [class]=\\\"node.styleClass\\\">\\n                <tbody>\\n                    <tr>\\n                        <td class=\\\"ui-treenode-connector\\\" *ngIf=\\\"!root\\\">\\n                            <table class=\\\"ui-treenode-connector-table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <td [ngClass]=\\\"{'ui-treenode-connector-line':!firstChild}\\\"></td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td [ngClass]=\\\"{'ui-treenode-connector-line':!lastChild}\\\"></td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </td>\\n                        <td class=\\\"ui-treenode\\\" [ngClass]=\\\"{'ui-treenode-collapsed':!node.expanded}\\\">\\n                            <div class=\\\"ui-treenode-content ui-state-default ui-corner-all\\\" \\n                                [ngClass]=\\\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\\\" (click)=\\\"onNodeClick($event)\\\" (contextmenu)=\\\"onNodeRightClick($event)\\\"\\n                                (touchend)=\\\"onNodeTouchEnd()\\\">\\n                                <span class=\\\"ui-tree-toggler fa fa-fw\\\" [ngClass]=\\\"{'fa-plus':!node.expanded,'fa-minus':node.expanded}\\\" *ngIf=\\\"!isLeaf()\\\"\\n                                        (click)=\\\"toggle($event)\\\"></span\\n                                ><span [class]=\\\"getIcon()\\\" *ngIf=\\\"node.icon||node.expandedIcon||node.collapsedIcon\\\"></span\\n                                ><span class=\\\"ui-treenode-label ui-corner-all\\\">\\n                                        <span *ngIf=\\\"!tree.getTemplateForNode(node)\\\">{{node.label}}</span>\\n                                        <span *ngIf=\\\"tree.getTemplateForNode(node)\\\">\\n                                            <p-treeNodeTemplateLoader [node]=\\\"node\\\" [template]=\\\"tree.getTemplateForNode(node)\\\"></p-treeNodeTemplateLoader>\\n                                        </span>\\n                                </span>\\n                            </div>\\n                        </td>\\n                        <td class=\\\"ui-treenode-children-container\\\" *ngIf=\\\"node.children && node.expanded\\\" [style.display]=\\\"node.expanded ? 'table-cell' : 'none'\\\">\\n                            <div class=\\\"ui-treenode-children\\\">\\n                                <p-treeNode *ngFor=\\\"let childNode of node.children;let firstChild=first;let lastChild=last;\\\" [node]=\\\"childNode\\\" \\n                                        [firstChild]=\\\"firstChild\\\" [lastChild]=\\\"lastChild\\\"></p-treeNode>\\n                            </div>\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </ng-template>\\n    \"\n}), __param(0, core_1.Inject(core_1.forwardRef(function () {\n  return Tree;\n}))), __metadata(\"design:paramtypes\", [Tree])], UITreeNode);\nexports.UITreeNode = UITreeNode;\nvar Tree = function () {\n  function Tree(dragDropService) {\n    this.dragDropService = dragDropService;\n    this.selectionChange = new core_1.EventEmitter();\n    this.onNodeSelect = new core_1.EventEmitter();\n    this.onNodeUnselect = new core_1.EventEmitter();\n    this.onNodeExpand = new core_1.EventEmitter();\n    this.onNodeCollapse = new core_1.EventEmitter();\n    this.onNodeContextMenuSelect = new core_1.EventEmitter();\n    this.onNodeDrop = new core_1.EventEmitter();\n    this.layout = 'vertical';\n    this.metaKeySelection = true;\n    this.propagateSelectionUp = true;\n    this.propagateSelectionDown = true;\n    this.loadingIcon = 'fa-circle-o-notch';\n  }\n  Tree.prototype.ngOnInit = function () {\n    var _this = this;\n    if (this.droppableNodes) {\n      this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(function (event) {\n        _this.dragNodeTree = event.tree;\n        _this.dragNode = event.node;\n        _this.dragNodeSubNodes = event.subNodes;\n        _this.dragNodeIndex = event.index;\n        _this.dragNodeScope = event.scope;\n      });\n      this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(function (event) {\n        _this.dragNodeTree = null;\n        _this.dragNode = null;\n        _this.dragNodeSubNodes = null;\n        _this.dragNodeIndex = null;\n        _this.dragNodeScope = null;\n        _this.dragHover = false;\n      });\n    }\n  };\n  Object.defineProperty(Tree.prototype, \"horizontal\", {\n    get: function () {\n      return this.layout == 'horizontal';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Tree.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    if (this.templates.length) {\n      this.templateMap = {};\n    }\n    this.templates.forEach(function (item) {\n      _this.templateMap[item.name] = item.template;\n    });\n  };\n  Tree.prototype.onNodeClick = function (event, node) {\n    var eventTarget = event.target;\n    if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n      return;\n    } else if (this.selectionMode) {\n      if (node.selectable === false) {\n        return;\n      }\n      var index_1 = this.findIndexInSelection(node);\n      var selected = index_1 >= 0;\n      if (this.isCheckboxSelectionMode()) {\n        if (selected) {\n          if (this.propagateSelectionDown) this.propagateDown(node, false);else this.selection = this.selection.filter(function (val, i) {\n            return i != index_1;\n          });\n          if (this.propagateSelectionUp && node.parent) {\n            this.propagateUp(node.parent, false);\n          }\n          this.selectionChange.emit(this.selection);\n          this.onNodeUnselect.emit({\n            originalEvent: event,\n            node: node\n          });\n        } else {\n          if (this.propagateSelectionDown) this.propagateDown(node, true);else this.selection = (this.selection || []).concat([node]);\n          if (this.propagateSelectionUp && node.parent) {\n            this.propagateUp(node.parent, true);\n          }\n          this.selectionChange.emit(this.selection);\n          this.onNodeSelect.emit({\n            originalEvent: event,\n            node: node\n          });\n        }\n      } else {\n        var metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n        if (metaSelection) {\n          var metaKey = event.metaKey || event.ctrlKey;\n          if (selected && metaKey) {\n            if (this.isSingleSelectionMode()) {\n              this.selectionChange.emit(null);\n            } else {\n              this.selection = this.selection.filter(function (val, i) {\n                return i != index_1;\n              });\n              this.selectionChange.emit(this.selection);\n            }\n            this.onNodeUnselect.emit({\n              originalEvent: event,\n              node: node\n            });\n          } else {\n            if (this.isSingleSelectionMode()) {\n              this.selectionChange.emit(node);\n            } else if (this.isMultipleSelectionMode()) {\n              this.selection = !metaKey ? [] : this.selection || [];\n              this.selection = this.selection.concat([node]);\n              this.selectionChange.emit(this.selection);\n            }\n            this.onNodeSelect.emit({\n              originalEvent: event,\n              node: node\n            });\n          }\n        } else {\n          if (this.isSingleSelectionMode()) {\n            if (selected) {\n              this.selection = null;\n              this.onNodeUnselect.emit({\n                originalEvent: event,\n                node: node\n              });\n            } else {\n              this.selection = node;\n              this.onNodeSelect.emit({\n                originalEvent: event,\n                node: node\n              });\n            }\n          } else {\n            if (selected) {\n              this.selection = this.selection.filter(function (val, i) {\n                return i != index_1;\n              });\n              this.onNodeUnselect.emit({\n                originalEvent: event,\n                node: node\n              });\n            } else {\n              this.selection = (this.selection || []).concat([node]);\n              this.onNodeSelect.emit({\n                originalEvent: event,\n                node: node\n              });\n            }\n          }\n          this.selectionChange.emit(this.selection);\n        }\n      }\n    }\n    this.nodeTouched = false;\n  };\n  Tree.prototype.onNodeTouchEnd = function () {\n    this.nodeTouched = true;\n  };\n  Tree.prototype.onNodeRightClick = function (event, node) {\n    if (this.contextMenu) {\n      var eventTarget = event.target;\n      if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n        return;\n      } else {\n        var index = this.findIndexInSelection(node);\n        var selected = index >= 0;\n        if (!selected) {\n          if (this.isSingleSelectionMode()) this.selectionChange.emit(node);else this.selectionChange.emit([node]);\n        }\n        this.contextMenu.show(event);\n        this.onNodeContextMenuSelect.emit({\n          originalEvent: event,\n          node: node\n        });\n      }\n    }\n  };\n  Tree.prototype.findIndexInSelection = function (node) {\n    var index = -1;\n    if (this.selectionMode && this.selection) {\n      if (this.isSingleSelectionMode()) {\n        index = this.selection == node ? 0 : -1;\n      } else {\n        for (var i = 0; i < this.selection.length; i++) {\n          if (this.selection[i] == node) {\n            index = i;\n            break;\n          }\n        }\n      }\n    }\n    return index;\n  };\n  Tree.prototype.propagateUp = function (node, select) {\n    if (node.children && node.children.length) {\n      var selectedCount = 0;\n      var childPartialSelected = false;\n      for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        if (this.isSelected(child)) {\n          selectedCount++;\n        } else if (child.partialSelected) {\n          childPartialSelected = true;\n        }\n      }\n      if (select && selectedCount == node.children.length) {\n        this.selection = (this.selection || []).concat([node]);\n        node.partialSelected = false;\n      } else {\n        if (!select) {\n          var index_2 = this.findIndexInSelection(node);\n          if (index_2 >= 0) {\n            this.selection = this.selection.filter(function (val, i) {\n              return i != index_2;\n            });\n          }\n        }\n        if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n    }\n    var parent = node.parent;\n    if (parent) {\n      this.propagateUp(parent, select);\n    }\n  };\n  Tree.prototype.propagateDown = function (node, select) {\n    var index = this.findIndexInSelection(node);\n    if (select && index == -1) {\n      this.selection = (this.selection || []).concat([node]);\n    } else if (!select && index > -1) {\n      this.selection = this.selection.filter(function (val, i) {\n        return i != index;\n      });\n    }\n    node.partialSelected = false;\n    if (node.children && node.children.length) {\n      for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        this.propagateDown(child, select);\n      }\n    }\n  };\n  Tree.prototype.isSelected = function (node) {\n    return this.findIndexInSelection(node) != -1;\n  };\n  Tree.prototype.isSingleSelectionMode = function () {\n    return this.selectionMode && this.selectionMode == 'single';\n  };\n  Tree.prototype.isMultipleSelectionMode = function () {\n    return this.selectionMode && this.selectionMode == 'multiple';\n  };\n  Tree.prototype.isCheckboxSelectionMode = function () {\n    return this.selectionMode && this.selectionMode == 'checkbox';\n  };\n  Tree.prototype.getTemplateForNode = function (node) {\n    if (this.templateMap) return node.type ? this.templateMap[node.type] : this.templateMap['default'];else return null;\n  };\n  Tree.prototype.onDragOver = function (event) {\n    if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n      event.dataTransfer.dropEffect = 'move';\n      event.preventDefault();\n    }\n  };\n  Tree.prototype.onDrop = function (event) {\n    if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n      event.preventDefault();\n      var dragNode = this.dragNode;\n      if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n        var dragNodeIndex = this.dragNodeIndex;\n        this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        this.value = this.value || [];\n        this.value.push(dragNode);\n        this.dragDropService.stopDrag({\n          node: dragNode\n        });\n      }\n    }\n  };\n  Tree.prototype.onDragEnter = function (event) {\n    if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n      this.dragHover = true;\n    }\n  };\n  Tree.prototype.onDragLeave = function (event) {\n    if (this.droppableNodes) {\n      var rect = event.currentTarget.getBoundingClientRect();\n      if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n        this.dragHover = false;\n      }\n    }\n  };\n  Tree.prototype.allowDrop = function (dragNode, dropNode, dragNodeScope) {\n    if (this.isValidDragScope(dragNodeScope)) {\n      var allow = true;\n      if (dropNode) {\n        if (dragNode === dropNode) {\n          allow = false;\n        } else {\n          var parent_1 = dropNode.parent;\n          while (parent_1 != null) {\n            if (parent_1 === dragNode) {\n              allow = false;\n              break;\n            }\n            parent_1 = parent_1.parent;\n          }\n        }\n      }\n      return allow;\n    } else {\n      return false;\n    }\n  };\n  Tree.prototype.isValidDragScope = function (dragScope) {\n    var dropScope = this.droppableScope;\n    if (dropScope) {\n      if (typeof dropScope === 'string') {\n        if (typeof dragScope === 'string') return dropScope === dragScope;else if (dragScope instanceof Array) return dragScope.indexOf(dropScope) != -1;\n      } else if (dropScope instanceof Array) {\n        if (typeof dragScope === 'string') {\n          return dropScope.indexOf(dragScope) != -1;\n        } else if (dragScope instanceof Array) {\n          for (var _i = 0, dropScope_1 = dropScope; _i < dropScope_1.length; _i++) {\n            var s = dropScope_1[_i];\n            for (var _a = 0, dragScope_1 = dragScope; _a < dragScope_1.length; _a++) {\n              var ds = dragScope_1[_a];\n              if (s === ds) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  };\n  Tree.prototype.ngOnDestroy = function () {\n    if (this.dragStartSubscription) {\n      this.dragStartSubscription.unsubscribe();\n    }\n    if (this.dragStopSubscription) {\n      this.dragStopSubscription.unsubscribe();\n    }\n  };\n  return Tree;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Array)], Tree.prototype, \"value\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tree.prototype, \"selectionMode\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Tree.prototype, \"selection\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Tree.prototype, \"selectionChange\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Tree.prototype, \"onNodeSelect\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Tree.prototype, \"onNodeUnselect\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Tree.prototype, \"onNodeExpand\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Tree.prototype, \"onNodeCollapse\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Tree.prototype, \"onNodeContextMenuSelect\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Tree.prototype, \"onNodeDrop\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Tree.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tree.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Tree.prototype, \"contextMenu\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tree.prototype, \"layout\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Tree.prototype, \"draggableScope\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Tree.prototype, \"droppableScope\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Tree.prototype, \"draggableNodes\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Tree.prototype, \"droppableNodes\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Tree.prototype, \"metaKeySelection\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Tree.prototype, \"propagateSelectionUp\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Tree.prototype, \"propagateSelectionDown\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Tree.prototype, \"loading\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Tree.prototype, \"loadingIcon\", void 0);\n__decorate([core_1.ContentChildren(shared_2.PrimeTemplate), __metadata(\"design:type\", core_1.QueryList)], Tree.prototype, \"templates\", void 0);\nTree = __decorate([core_1.Component({\n  selector: 'p-tree',\n  template: \"\\n        <div [ngClass]=\\\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode,'ui-treenode-dragover':dragHover,'ui-tree-loading': loading}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" *ngIf=\\\"!horizontal\\\"\\n            (drop)=\\\"onDrop($event)\\\" (dragover)=\\\"onDragOver($event)\\\" (dragenter)=\\\"onDragEnter($event)\\\" (dragleave)=\\\"onDragLeave($event)\\\">\\n            <div class=\\\"ui-tree-loading-mask ui-widget-overlay\\\" *ngIf=\\\"loading\\\"></div>\\n            <div class=\\\"ui-tree-loading-content\\\" *ngIf=\\\"loading\\\">\\n                <i [class]=\\\"'fa fa-spin fa-2x ' + loadingIcon\\\"></i>\\n            </div>\\n            <ul class=\\\"ui-tree-container\\\">\\n                <p-treeNode *ngFor=\\\"let node of value;let firstChild=first;let lastChild=last; let index=index\\\" [node]=\\\"node\\\" \\n                [firstChild]=\\\"firstChild\\\" [lastChild]=\\\"lastChild\\\" [index]=\\\"index\\\"></p-treeNode>\\n            </ul>\\n        </div>\\n        <div [ngClass]=\\\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\\\"  [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" *ngIf=\\\"horizontal\\\">\\n            <div class=\\\"ui-tree-loading ui-widget-overlay\\\" *ngIf=\\\"loading\\\"></div>\\n            <div class=\\\"ui-tree-loading-content\\\" *ngIf=\\\"loading\\\">\\n                <i [class]=\\\"'fa fa-spin fa-2x ' + loadingIcon\\\"></i>\\n            </div>\\n            <table *ngIf=\\\"value&&value[0]\\\">\\n                <p-treeNode [node]=\\\"value[0]\\\" [root]=\\\"true\\\"></p-treeNode>\\n            </table>\\n        </div>\\n    \"\n}), __param(0, core_2.Optional()), __metadata(\"design:paramtypes\", [treedragdropservice_1.TreeDragDropService])], Tree);\nexports.Tree = Tree;\nvar TreeModule = function () {\n  function TreeModule() {}\n  return TreeModule;\n}();\nTreeModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Tree, shared_1.SharedModule],\n  declarations: [Tree, UITreeNode, TreeNodeTemplateLoader]\n})], TreeModule);\nexports.TreeModule = TreeModule;\nvar UITreeNode_1;\n//# sourceMappingURL=tree.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}