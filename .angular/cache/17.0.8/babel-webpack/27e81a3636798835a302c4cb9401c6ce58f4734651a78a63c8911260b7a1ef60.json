{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar common_1 = require(\"@angular/common\");\nvar Button = function () {\n  function Button(el, domHandler) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.iconPos = 'left';\n    this.cornerStyleClass = 'ui-corner-all';\n  }\n  Button.prototype.ngAfterViewInit = function () {\n    this.domHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\n    if (this.icon) {\n      var iconElement = document.createElement(\"span\");\n      var iconPosClass = this.iconPos == 'right' ? 'ui-button-icon-right' : 'ui-button-icon-left';\n      iconElement.className = iconPosClass + ' ui-clickable fa fa-fw ' + this.icon;\n      this.el.nativeElement.appendChild(iconElement);\n    }\n    var labelElement = document.createElement(\"span\");\n    labelElement.className = 'ui-button-text ui-clickable';\n    labelElement.appendChild(document.createTextNode(this.label || 'ui-btn'));\n    this.el.nativeElement.appendChild(labelElement);\n    this.initialized = true;\n  };\n  Button.prototype.getStyleClass = function () {\n    var styleClass = 'ui-button ui-widget ui-state-default ' + this.cornerStyleClass;\n    if (this.icon) {\n      if (this.label != null && this.label != undefined) {\n        if (this.iconPos == 'left') styleClass = styleClass + ' ui-button-text-icon-left';else styleClass = styleClass + ' ui-button-text-icon-right';\n      } else {\n        styleClass = styleClass + ' ui-button-icon-only';\n      }\n    } else {\n      styleClass = styleClass + ' ui-button-text-only';\n    }\n    return styleClass;\n  };\n  Object.defineProperty(Button.prototype, \"label\", {\n    get: function () {\n      return this._label;\n    },\n    set: function (val) {\n      this._label = val;\n      if (this.initialized) {\n        this.domHandler.findSingle(this.el.nativeElement, '.ui-button-text').textContent = this._label;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"icon\", {\n    get: function () {\n      return this._icon;\n    },\n    set: function (val) {\n      this._icon = val;\n      if (this.initialized) {\n        var iconPosClass = this.iconPos == 'right' ? 'ui-button-icon-right' : 'ui-button-icon-left';\n        this.domHandler.findSingle(this.el.nativeElement, '.fa').className = iconPosClass + ' ui-clickable fa fa-fw ' + this.icon;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Button.prototype.ngOnDestroy = function () {\n    while (this.el.nativeElement.hasChildNodes()) {\n      this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);\n    }\n    this.initialized = false;\n  };\n  return Button;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Button.prototype, \"iconPos\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Button.prototype, \"cornerStyleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], Button.prototype, \"label\", null);\n__decorate([core_1.Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], Button.prototype, \"icon\", null);\nButton = __decorate([core_1.Directive({\n  selector: '[pButton]',\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler])], Button);\nexports.Button = Button;\nvar ButtonModule = function () {\n  function ButtonModule() {}\n  return ButtonModule;\n}();\nButtonModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Button],\n  declarations: [Button]\n})], ButtonModule);\nexports.ButtonModule = ButtonModule;\n//# sourceMappingURL=button.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}