{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar DomHandler = function () {\n  function DomHandler() {\n    this.calculatedScrollbarWidth = null;\n  }\n  DomHandler.prototype.addClass = function (element, className) {\n    if (element.classList) element.classList.add(className);else element.className += ' ' + className;\n  };\n  DomHandler.prototype.addMultipleClasses = function (element, className) {\n    if (element.classList) {\n      var styles = className.split(' ');\n      for (var i = 0; i < styles.length; i++) {\n        element.classList.add(styles[i]);\n      }\n    } else {\n      var styles = className.split(' ');\n      for (var i = 0; i < styles.length; i++) {\n        element.className += ' ' + styles[i];\n      }\n    }\n  };\n  DomHandler.prototype.removeClass = function (element, className) {\n    if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n  };\n  DomHandler.prototype.hasClass = function (element, className) {\n    if (element.classList) return element.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n  };\n  DomHandler.prototype.siblings = function (element) {\n    return Array.prototype.filter.call(element.parentNode.children, function (child) {\n      return child !== element;\n    });\n  };\n  DomHandler.prototype.find = function (element, selector) {\n    return element.querySelectorAll(selector);\n  };\n  DomHandler.prototype.findSingle = function (element, selector) {\n    return element.querySelector(selector);\n  };\n  DomHandler.prototype.index = function (element) {\n    var children = element.parentNode.childNodes;\n    var num = 0;\n    for (var i = 0; i < children.length; i++) {\n      if (children[i] == element) return num;\n      if (children[i].nodeType == 1) num++;\n    }\n    return -1;\n  };\n  DomHandler.prototype.relativePosition = function (element, target) {\n    var elementDimensions = element.offsetParent ? {\n      width: element.offsetWidth,\n      height: element.offsetHeight\n    } : this.getHiddenElementDimensions(element);\n    var targetHeight = target.offsetHeight;\n    var targetWidth = target.offsetWidth;\n    var targetOffset = target.getBoundingClientRect();\n    var windowScrollTop = this.getWindowScrollTop();\n    var viewport = this.getViewport();\n    var top, left;\n    if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {\n      top = -1 * elementDimensions.height;\n      if (targetOffset.top + top < 0) {\n        top = 0;\n      }\n    } else {\n      top = targetHeight;\n    }\n    if (targetOffset.left + elementDimensions.width > viewport.width) left = targetWidth - elementDimensions.width;else left = 0;\n    element.style.top = top + 'px';\n    element.style.left = left + 'px';\n  };\n  DomHandler.prototype.absolutePosition = function (element, target) {\n    var elementDimensions = element.offsetParent ? {\n      width: element.offsetWidth,\n      height: element.offsetHeight\n    } : this.getHiddenElementDimensions(element);\n    var elementOuterHeight = elementDimensions.height;\n    var elementOuterWidth = elementDimensions.width;\n    var targetOuterHeight = target.offsetHeight;\n    var targetOuterWidth = target.offsetWidth;\n    var targetOffset = target.getBoundingClientRect();\n    var windowScrollTop = this.getWindowScrollTop();\n    var windowScrollLeft = this.getWindowScrollLeft();\n    var viewport = this.getViewport();\n    var top, left;\n    if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\n      top = targetOffset.top + windowScrollTop - elementOuterHeight;\n      if (top < 0) {\n        top = 0 + windowScrollTop;\n      }\n    } else {\n      top = targetOuterHeight + targetOffset.top + windowScrollTop;\n    }\n    if (targetOffset.left + targetOuterWidth + elementOuterWidth > viewport.width) left = targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth;else left = targetOffset.left + windowScrollLeft;\n    element.style.top = top + 'px';\n    element.style.left = left + 'px';\n  };\n  DomHandler.prototype.getHiddenElementOuterHeight = function (element) {\n    element.style.visibility = 'hidden';\n    element.style.display = 'block';\n    var elementHeight = element.offsetHeight;\n    element.style.display = 'none';\n    element.style.visibility = 'visible';\n    return elementHeight;\n  };\n  DomHandler.prototype.getHiddenElementOuterWidth = function (element) {\n    element.style.visibility = 'hidden';\n    element.style.display = 'block';\n    var elementWidth = element.offsetWidth;\n    element.style.display = 'none';\n    element.style.visibility = 'visible';\n    return elementWidth;\n  };\n  DomHandler.prototype.getHiddenElementDimensions = function (element) {\n    var dimensions = {};\n    element.style.visibility = 'hidden';\n    element.style.display = 'block';\n    dimensions.width = element.offsetWidth;\n    dimensions.height = element.offsetHeight;\n    element.style.display = 'none';\n    element.style.visibility = 'visible';\n    return dimensions;\n  };\n  DomHandler.prototype.scrollInView = function (container, item) {\n    var borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');\n    var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;\n    var paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');\n    var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;\n    var containerRect = container.getBoundingClientRect();\n    var itemRect = item.getBoundingClientRect();\n    var offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;\n    var scroll = container.scrollTop;\n    var elementHeight = container.clientHeight;\n    var itemHeight = this.getOuterHeight(item);\n    if (offset < 0) {\n      container.scrollTop = scroll + offset;\n    } else if (offset + itemHeight > elementHeight) {\n      container.scrollTop = scroll + offset - elementHeight + itemHeight;\n    }\n  };\n  DomHandler.prototype.fadeIn = function (element, duration) {\n    element.style.opacity = 0;\n    var last = +new Date();\n    var opacity = 0;\n    var tick = function () {\n      opacity = +element.style.opacity + (new Date().getTime() - last) / duration;\n      element.style.opacity = opacity;\n      last = +new Date();\n      if (+opacity < 1) {\n        window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);\n      }\n    };\n    tick();\n  };\n  DomHandler.prototype.fadeOut = function (element, ms) {\n    var opacity = 1,\n      interval = 50,\n      duration = ms,\n      gap = interval / duration;\n    var fading = setInterval(function () {\n      opacity = opacity - gap;\n      if (opacity <= 0) {\n        opacity = 0;\n        clearInterval(fading);\n      }\n      element.style.opacity = opacity;\n    }, interval);\n  };\n  DomHandler.prototype.getWindowScrollTop = function () {\n    var doc = document.documentElement;\n    return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n  };\n  DomHandler.prototype.getWindowScrollLeft = function () {\n    var doc = document.documentElement;\n    return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n  };\n  DomHandler.prototype.matches = function (element, selector) {\n    var p = Element.prototype;\n    var f = p['matches'] || p.webkitMatchesSelector || p['mozMatchesSelector'] || p.msMatchesSelector || function (s) {\n      return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n    };\n    return f.call(element, selector);\n  };\n  DomHandler.prototype.getOuterWidth = function (el, margin) {\n    var width = el.offsetWidth;\n    if (margin) {\n      var style = getComputedStyle(el);\n      width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n    }\n    return width;\n  };\n  DomHandler.prototype.getHorizontalPadding = function (el) {\n    var style = getComputedStyle(el);\n    return parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n  };\n  DomHandler.prototype.getHorizontalMargin = function (el) {\n    var style = getComputedStyle(el);\n    return parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n  };\n  DomHandler.prototype.innerWidth = function (el) {\n    var width = el.offsetWidth;\n    var style = getComputedStyle(el);\n    width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n    return width;\n  };\n  DomHandler.prototype.width = function (el) {\n    var width = el.offsetWidth;\n    var style = getComputedStyle(el);\n    width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n    return width;\n  };\n  DomHandler.prototype.getInnerHeight = function (el) {\n    var height = el.offsetHeight;\n    var style = getComputedStyle(el);\n    height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);\n    return height;\n  };\n  DomHandler.prototype.getOuterHeight = function (el, margin) {\n    var height = el.offsetHeight;\n    if (margin) {\n      var style = getComputedStyle(el);\n      height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n    }\n    return height;\n  };\n  DomHandler.prototype.getHeight = function (el) {\n    var height = el.offsetHeight;\n    var style = getComputedStyle(el);\n    height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);\n    return height;\n  };\n  DomHandler.prototype.getWidth = function (el) {\n    var width = el.offsetWidth;\n    var style = getComputedStyle(el);\n    width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);\n    return width;\n  };\n  DomHandler.prototype.getViewport = function () {\n    var win = window,\n      d = document,\n      e = d.documentElement,\n      g = d.getElementsByTagName('body')[0],\n      w = win.innerWidth || e.clientWidth || g.clientWidth,\n      h = win.innerHeight || e.clientHeight || g.clientHeight;\n    return {\n      width: w,\n      height: h\n    };\n  };\n  DomHandler.prototype.getOffset = function (el) {\n    var rect = el.getBoundingClientRect();\n    return {\n      top: rect.top + document.body.scrollTop,\n      left: rect.left + document.body.scrollLeft\n    };\n  };\n  DomHandler.prototype.getUserAgent = function () {\n    return navigator.userAgent;\n  };\n  DomHandler.prototype.isIE = function () {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf('MSIE ');\n    if (msie > 0) {\n      // IE 10 or older => return version number\n      return true;\n    }\n    var trident = ua.indexOf('Trident/');\n    if (trident > 0) {\n      // IE 11 => return version number\n      var rv = ua.indexOf('rv:');\n      return true;\n    }\n    var edge = ua.indexOf('Edge/');\n    if (edge > 0) {\n      // Edge (IE 12+) => return version number\n      return true;\n    }\n    // other browser\n    return false;\n  };\n  DomHandler.prototype.appendChild = function (element, target) {\n    if (this.isElement(target)) target.appendChild(element);else if (target.el && target.el.nativeElement) target.el.nativeElement.appendChild(element);else throw 'Cannot append ' + target + ' to ' + element;\n  };\n  DomHandler.prototype.removeChild = function (element, target) {\n    if (this.isElement(target)) target.removeChild(element);else if (target.el && target.el.nativeElement) target.el.nativeElement.removeChild(element);else throw 'Cannot remove ' + element + ' from ' + target;\n  };\n  DomHandler.prototype.isElement = function (obj) {\n    return typeof HTMLElement === \"object\" ? obj instanceof HTMLElement : obj && typeof obj === \"object\" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === \"string\";\n  };\n  DomHandler.prototype.calculateScrollbarWidth = function () {\n    if (this.calculatedScrollbarWidth !== null) return this.calculatedScrollbarWidth;\n    var scrollDiv = document.createElement(\"div\");\n    scrollDiv.className = \"ui-scrollbar-measure\";\n    document.body.appendChild(scrollDiv);\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    this.calculatedScrollbarWidth = scrollbarWidth;\n    return scrollbarWidth;\n  };\n  DomHandler.prototype.invokeElementMethod = function (element, methodName, args) {\n    element[methodName].apply(element, args);\n  };\n  DomHandler.prototype.clearSelection = function () {\n    if (window.getSelection) {\n      if (window.getSelection().empty) {\n        window.getSelection().empty();\n      } else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {\n        window.getSelection().removeAllRanges();\n      }\n    } else if (document['selection'] && document['selection'].empty) {\n      try {\n        document['selection'].empty();\n      } catch (error) {\n        //ignore IE bug\n      }\n    }\n  };\n  return DomHandler;\n}();\nDomHandler.zindex = 1000;\nDomHandler = __decorate([core_1.Injectable()], DomHandler);\nexports.DomHandler = DomHandler;\n//# sourceMappingURL=domhandler.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}