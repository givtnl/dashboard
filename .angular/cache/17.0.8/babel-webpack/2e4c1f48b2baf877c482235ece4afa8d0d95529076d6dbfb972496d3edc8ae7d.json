{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar Fieldset = function () {\n  function Fieldset(el) {\n    this.el = el;\n    this.collapsed = false;\n    this.onBeforeToggle = new core_1.EventEmitter();\n    this.onAfterToggle = new core_1.EventEmitter();\n  }\n  Fieldset.prototype.toggle = function (event) {\n    if (this.toggleable) {\n      if (this.animating) {\n        return false;\n      }\n      this.animating = true;\n      this.onBeforeToggle.emit({\n        originalEvent: event,\n        collapsed: this.collapsed\n      });\n      if (this.collapsed) this.expand(event);else this.collapse(event);\n      this.onAfterToggle.emit({\n        originalEvent: event,\n        collapsed: this.collapsed\n      });\n    }\n  };\n  Fieldset.prototype.expand = function (event) {\n    this.collapsed = false;\n  };\n  Fieldset.prototype.collapse = function (event) {\n    this.collapsed = true;\n  };\n  Fieldset.prototype.getBlockableElement = function () {\n    return this.el.nativeElement.children[0];\n  };\n  Fieldset.prototype.onToggleDone = function (event) {\n    this.animating = false;\n  };\n  return Fieldset;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Fieldset.prototype, \"legend\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Fieldset.prototype, \"toggleable\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], Fieldset.prototype, \"collapsed\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Fieldset.prototype, \"onBeforeToggle\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Fieldset.prototype, \"onAfterToggle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Fieldset.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Fieldset.prototype, \"styleClass\", void 0);\nFieldset = __decorate([core_1.Component({\n  selector: 'p-fieldset',\n  template: \"\\n        <fieldset [ngClass]=\\\"{'ui-fieldset ui-widget ui-widget-content ui-corner-all': true, 'ui-fieldset-toggleable': toggleable}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <legend class=\\\"ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text\\\" (click)=\\\"toggle($event)\\\">\\n                <span *ngIf=\\\"toggleable\\\" class=\\\"ui-fieldset-toggler fa fa-w\\\" [ngClass]=\\\"{'fa-minus': !collapsed,'fa-plus':collapsed}\\\"></span>\\n                {{legend}}\\n                <ng-content select=\\\"p-header\\\"></ng-content>\\n            </legend>\\n            <div class=\\\"ui-fieldset-content-wrapper\\\" [@fieldsetContent]=\\\"collapsed ? 'hidden' : 'visible'\\\" \\n                        [ngClass]=\\\"{'ui-fieldset-content-wrapper-overflown': collapsed||animating}\\\"\\n                         (@fieldsetContent.done)=\\\"onToggleDone($event)\\\">\\n                <div class=\\\"ui-fieldset-content\\\">\\n                    <ng-content></ng-content>\\n                </div>\\n            </div>\\n        </fieldset>\\n    \",\n  animations: [animations_1.trigger('fieldsetContent', [animations_1.state('hidden', animations_1.style({\n    height: '0px'\n  })), animations_1.state('visible', animations_1.style({\n    height: '*'\n  })), animations_1.transition('visible => hidden', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')), animations_1.transition('hidden => visible', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))])]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef])], Fieldset);\nexports.Fieldset = Fieldset;\nvar FieldsetModule = function () {\n  function FieldsetModule() {}\n  return FieldsetModule;\n}();\nFieldsetModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Fieldset, shared_1.SharedModule],\n  declarations: [Fieldset]\n})], FieldsetModule);\nexports.FieldsetModule = FieldsetModule;\n//# sourceMappingURL=fieldset.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}