{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar TabViewNav = function () {\n  function TabViewNav() {\n    this.orientation = 'top';\n    this.onTabClick = new core_1.EventEmitter();\n    this.onTabCloseClick = new core_1.EventEmitter();\n  }\n  TabViewNav.prototype.getDefaultHeaderClass = function (tab) {\n    var styleClass = 'ui-state-default ui-corner-' + this.orientation;\n    if (tab.headerStyleClass) {\n      styleClass = styleClass + \" \" + tab.headerStyleClass;\n    }\n    return styleClass;\n  };\n  TabViewNav.prototype.clickTab = function (event, tab) {\n    this.onTabClick.emit({\n      originalEvent: event,\n      tab: tab\n    });\n  };\n  TabViewNav.prototype.clickClose = function (event, tab) {\n    this.onTabCloseClick.emit({\n      originalEvent: event,\n      tab: tab\n    });\n  };\n  return TabViewNav;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Array)], TabViewNav.prototype, \"tabs\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TabViewNav.prototype, \"orientation\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TabViewNav.prototype, \"onTabClick\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TabViewNav.prototype, \"onTabCloseClick\", void 0);\nTabViewNav = __decorate([core_1.Component({\n  selector: '[p-tabViewNav]',\n  host: {\n    '[class.ui-tabview-nav]': 'true',\n    '[class.ui-helper-reset]': 'true',\n    '[class.ui-helper-clearfix]': 'true',\n    '[class.ui-widget-header]': 'true',\n    '[class.ui-corner-all]': 'true'\n  },\n  template: \"\\n        <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\">\\n            <li [class]=\\\"getDefaultHeaderClass(tab)\\\" [ngStyle]=\\\"tab.headerStyle\\\" role=\\\"tab\\\"\\n                [ngClass]=\\\"{'ui-tabview-selected ui-state-active': tab.selected, 'ui-state-disabled': tab.disabled}\\\"\\n                (click)=\\\"clickTab($event,tab)\\\" *ngIf=\\\"!tab.closed\\\"\\n                [attr.aria-expanded]=\\\"tab.selected\\\" [attr.aria-selected]=\\\"tab.selected\\\">\\n                <a href=\\\"#\\\">\\n                    <span class=\\\"ui-tabview-left-icon fa\\\" [ngClass]=\\\"tab.leftIcon\\\" *ngIf=\\\"tab.leftIcon\\\"></span>\\n                    <span class=\\\"ui-tabview-title\\\">{{tab.header}}</span>\\n                    <span class=\\\"ui-tabview-right-icon fa\\\" [ngClass]=\\\"tab.rightIcon\\\" *ngIf=\\\"tab.rightIcon\\\"></span>\\n                </a>\\n                <span *ngIf=\\\"tab.closable\\\" class=\\\"ui-tabview-close fa fa-close\\\" (click)=\\\"clickClose($event,tab)\\\"></span>\\n            </li>\\n        </ng-template>\\n    \"\n})], TabViewNav);\nexports.TabViewNav = TabViewNav;\nvar TabPanel = function () {\n  function TabPanel(viewContainer) {\n    this.viewContainer = viewContainer;\n    this.cache = true;\n  }\n  TabPanel.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    this.templates.forEach(function (item) {\n      switch (item.getType()) {\n        case 'content':\n          _this.contentTemplate = item.template;\n          break;\n        default:\n          _this.contentTemplate = item.template;\n          break;\n      }\n    });\n  };\n  Object.defineProperty(TabPanel.prototype, \"selected\", {\n    get: function () {\n      return this._selected;\n    },\n    set: function (val) {\n      this._selected = val;\n      this.loaded = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TabPanel.prototype.ngOnDestroy = function () {\n    this.view = null;\n  };\n  return TabPanel;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TabPanel.prototype, \"header\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], TabPanel.prototype, \"disabled\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], TabPanel.prototype, \"closable\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], TabPanel.prototype, \"headerStyle\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TabPanel.prototype, \"headerStyleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TabPanel.prototype, \"leftIcon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TabPanel.prototype, \"rightIcon\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], TabPanel.prototype, \"cache\", void 0);\n__decorate([core_1.ContentChildren(shared_1.PrimeTemplate), __metadata(\"design:type\", core_1.QueryList)], TabPanel.prototype, \"templates\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], TabPanel.prototype, \"selected\", null);\nTabPanel = __decorate([core_1.Component({\n  selector: 'p-tabPanel',\n  template: \"\\n        <div class=\\\"ui-tabview-panel ui-widget-content\\\" [style.display]=\\\"selected ? 'block' : 'none'\\\" \\n            role=\\\"tabpanel\\\" [attr.aria-hidden]=\\\"!selected\\\" *ngIf=\\\"!closed\\\">\\n            <ng-content></ng-content>\\n            <p-templateLoader [template]=\\\"contentTemplate\\\" *ngIf=\\\"contentTemplate&&(cache ? loaded : selected)\\\"></p-templateLoader>\\n        </div>\\n    \"\n}), __metadata(\"design:paramtypes\", [core_1.ViewContainerRef])], TabPanel);\nexports.TabPanel = TabPanel;\nvar TabView = function () {\n  function TabView(el) {\n    this.el = el;\n    this.orientation = 'top';\n    this.onChange = new core_1.EventEmitter();\n    this.onClose = new core_1.EventEmitter();\n  }\n  Object.defineProperty(TabView.prototype, \"lazy\", {\n    get: function () {\n      return this._lazy;\n    },\n    set: function (val) {\n      this._lazy = val;\n      console.log('Lazy property of TabView is deprecated, use an ngTemplate inside a TabPanel instead for Lazy Loading');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TabView.prototype.ngAfterContentInit = function () {\n    var _this = this;\n    this.initTabs();\n    this.tabPanels.changes.subscribe(function (_) {\n      _this.initTabs();\n    });\n  };\n  TabView.prototype.initTabs = function () {\n    this.tabs = this.tabPanels.toArray();\n    var selectedTab = this.findSelectedTab();\n    if (!selectedTab && this.tabs.length) {\n      if (this.activeIndex != null && this.tabs.length > this.activeIndex) this.tabs[this.activeIndex].selected = true;else this.tabs[0].selected = true;\n    }\n  };\n  TabView.prototype.open = function (event, tab) {\n    if (tab.disabled) {\n      if (event) {\n        event.preventDefault();\n      }\n      return;\n    }\n    if (!tab.selected) {\n      var selectedTab = this.findSelectedTab();\n      if (selectedTab) {\n        selectedTab.selected = false;\n      }\n      tab.selected = true;\n      this.onChange.emit({\n        originalEvent: event,\n        index: this.findTabIndex(tab)\n      });\n    }\n    if (event) {\n      event.preventDefault();\n    }\n  };\n  TabView.prototype.close = function (event, tab) {\n    var _this = this;\n    if (this.controlClose) {\n      this.onClose.emit({\n        originalEvent: event,\n        index: this.findTabIndex(tab),\n        close: function () {\n          _this.closeTab(tab);\n        }\n      });\n    } else {\n      this.closeTab(tab);\n      this.onClose.emit({\n        originalEvent: event,\n        index: this.findTabIndex(tab)\n      });\n    }\n    event.stopPropagation();\n  };\n  TabView.prototype.closeTab = function (tab) {\n    if (tab.selected) {\n      tab.selected = false;\n      for (var i = 0; i < this.tabs.length; i++) {\n        var tabPanel = this.tabs[i];\n        if (!tabPanel.closed && !tab.disabled) {\n          tabPanel.selected = true;\n          break;\n        }\n      }\n    }\n    tab.closed = true;\n  };\n  TabView.prototype.findSelectedTab = function () {\n    for (var i = 0; i < this.tabs.length; i++) {\n      if (this.tabs[i].selected) {\n        return this.tabs[i];\n      }\n    }\n    return null;\n  };\n  TabView.prototype.findTabIndex = function (tab) {\n    var index = -1;\n    for (var i = 0; i < this.tabs.length; i++) {\n      if (this.tabs[i] == tab) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  };\n  TabView.prototype.getBlockableElement = function () {\n    return this.el.nativeElement.children[0];\n  };\n  Object.defineProperty(TabView.prototype, \"activeIndex\", {\n    get: function () {\n      return this._activeIndex;\n    },\n    set: function (val) {\n      this._activeIndex = val;\n      if (this.tabs && this.tabs.length && this._activeIndex != null && this.tabs.length > this._activeIndex) {\n        this.findSelectedTab().selected = false;\n        this.tabs[this._activeIndex].selected = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return TabView;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TabView.prototype, \"orientation\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], TabView.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], TabView.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], TabView.prototype, \"controlClose\", void 0);\n__decorate([core_1.ContentChildren(TabPanel), __metadata(\"design:type\", core_1.QueryList)], TabView.prototype, \"tabPanels\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TabView.prototype, \"onChange\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], TabView.prototype, \"onClose\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], TabView.prototype, \"lazy\", null);\n__decorate([core_1.Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], TabView.prototype, \"activeIndex\", null);\nTabView = __decorate([core_1.Component({\n  selector: 'p-tabView',\n  template: \"\\n        <div [ngClass]=\\\"'ui-tabview ui-widget ui-widget-content ui-corner-all ui-tabview-' + orientation\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <ul p-tabViewNav role=\\\"tablist\\\" *ngIf=\\\"orientation!='bottom'\\\" [tabs]=\\\"tabs\\\" [orientation]=\\\"orientation\\\" \\n                (onTabClick)=\\\"open($event.originalEvent, $event.tab)\\\" (onTabCloseClick)=\\\"close($event.originalEvent, $event.tab)\\\"></ul>\\n            <div class=\\\"ui-tabview-panels\\\">\\n                <ng-content></ng-content>\\n            </div>\\n            <ul p-tabViewNav role=\\\"tablist\\\" *ngIf=\\\"orientation=='bottom'\\\" [tabs]=\\\"tabs\\\" [orientation]=\\\"orientation\\\"\\n                (onTabClick)=\\\"open($event.originalEvent, $event.tab)\\\" (onTabCloseClick)=\\\"close($event.originalEvent, $event.tab)\\\"></ul>\\n        </div>\\n    \"\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef])], TabView);\nexports.TabView = TabView;\nvar TabViewModule = function () {\n  function TabViewModule() {}\n  return TabViewModule;\n}();\nTabViewModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, shared_1.SharedModule],\n  exports: [TabView, TabPanel, TabViewNav, shared_1.SharedModule],\n  declarations: [TabView, TabPanel, TabViewNav]\n})], TabViewModule);\nexports.TabViewModule = TabViewModule;\n//# sourceMappingURL=tabview.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}