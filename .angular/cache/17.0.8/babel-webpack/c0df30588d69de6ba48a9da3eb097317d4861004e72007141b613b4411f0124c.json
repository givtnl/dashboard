{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar Lightbox = function () {\n  function Lightbox(el, domHandler, renderer) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n    this.type = 'image';\n    this.effectDuration = '500ms';\n  }\n  Lightbox.prototype.onImageClick = function (event, image, i, content) {\n    this.index = i;\n    this.loading = true;\n    content.style.width = 32 + 'px';\n    content.style.height = 32 + 'px';\n    this.show();\n    this.displayImage(image);\n    this.preventDocumentClickListener = true;\n    event.preventDefault();\n  };\n  Lightbox.prototype.ngAfterViewInit = function () {\n    var _this = this;\n    this.panel = this.domHandler.findSingle(this.el.nativeElement, '.ui-lightbox ');\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.panel);else this.domHandler.appendChild(this.panel, this.appendTo);\n    }\n    this.documentClickListener = this.renderer.listen('document', 'click', function (event) {\n      if (!_this.preventDocumentClickListener && _this.visible) {\n        _this.hide(event);\n      }\n      _this.preventDocumentClickListener = false;\n    });\n  };\n  Lightbox.prototype.onLinkClick = function (event, content) {\n    this.show();\n    this.preventDocumentClickListener = true;\n    event.preventDefault();\n  };\n  Lightbox.prototype.displayImage = function (image) {\n    var _this = this;\n    setTimeout(function () {\n      _this.currentImage = image;\n      _this.captionText = image.title;\n      _this.center();\n    }, 1000);\n  };\n  Lightbox.prototype.show = function () {\n    this.mask = document.createElement('div');\n    this.mask.style.zIndex = ++domhandler_1.DomHandler.zindex;\n    this.domHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-dialog-mask');\n    document.body.appendChild(this.mask);\n    this.zindex = ++domhandler_1.DomHandler.zindex;\n    this.center();\n    this.visible = true;\n  };\n  Lightbox.prototype.hide = function (event) {\n    this.captionText = null;\n    this.index = null;\n    this.currentImage = null;\n    this.visible = false;\n    this.panel.style.left = 'auto';\n    this.panel.style.top = 'auto';\n    if (this.mask) {\n      document.body.removeChild(this.mask);\n      this.mask = null;\n    }\n    event.preventDefault();\n  };\n  Lightbox.prototype.center = function () {\n    var elementWidth = this.domHandler.getOuterWidth(this.panel);\n    var elementHeight = this.domHandler.getOuterHeight(this.panel);\n    if (elementWidth == 0 && elementHeight == 0) {\n      this.panel.style.visibility = 'hidden';\n      this.panel.style.display = 'block';\n      elementWidth = this.domHandler.getOuterWidth(this.panel);\n      elementHeight = this.domHandler.getOuterHeight(this.panel);\n      this.panel.style.display = 'none';\n      this.panel.style.visibility = 'visible';\n    }\n    var viewport = this.domHandler.getViewport();\n    var x = (viewport.width - elementWidth) / 2;\n    var y = (viewport.height - elementHeight) / 2;\n    this.panel.style.left = x + 'px';\n    this.panel.style.top = y + 'px';\n  };\n  Lightbox.prototype.onImageLoad = function (event, content) {\n    var _this = this;\n    var image = event.target;\n    image.style.visibility = 'hidden';\n    image.style.display = 'block';\n    var imageWidth = this.domHandler.getOuterWidth(image);\n    var imageHeight = this.domHandler.getOuterHeight(image);\n    image.style.display = 'none';\n    image.style.visibility = 'visible';\n    content.style.width = imageWidth + 'px';\n    content.style.height = imageHeight + 'px';\n    this.panel.style.left = parseInt(this.panel.style.left) + (this.domHandler.getOuterWidth(this.panel) - imageWidth) / 2 + 'px';\n    this.panel.style.top = parseInt(this.panel.style.top) + (this.domHandler.getOuterHeight(this.panel) - imageHeight) / 2 + 'px';\n    setTimeout(function () {\n      _this.domHandler.fadeIn(image, 500);\n      image.style.display = 'block';\n      //this.captionText = this.currentImage.title;\n      _this.loading = false;\n    }, parseInt(this.effectDuration));\n  };\n  Lightbox.prototype.prev = function (placeholder) {\n    this.captionText = null;\n    this.loading = true;\n    placeholder.style.display = 'none';\n    if (this.index > 0) {\n      this.displayImage(this.images[--this.index]);\n    }\n  };\n  Lightbox.prototype.next = function (placeholder) {\n    this.captionText = null;\n    this.loading = true;\n    placeholder.style.display = 'none';\n    if (this.index <= this.images.length - 1) {\n      this.displayImage(this.images[++this.index]);\n    }\n  };\n  Object.defineProperty(Lightbox.prototype, \"leftVisible\", {\n    get: function () {\n      return this.images && this.images.length && this.index != 0 && !this.loading;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Lightbox.prototype, \"rightVisible\", {\n    get: function () {\n      return this.images && this.images.length && this.index < this.images.length - 1 && !this.loading;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Lightbox.prototype.ngOnDestroy = function () {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n    }\n    if (this.appendTo) {\n      this.el.nativeElement.appendChild(this.panel);\n    }\n  };\n  return Lightbox;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Array)], Lightbox.prototype, \"images\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Lightbox.prototype, \"type\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Lightbox.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Lightbox.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Lightbox.prototype, \"appendTo\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Lightbox.prototype, \"easing\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Lightbox.prototype, \"effectDuration\", void 0);\nLightbox = __decorate([core_1.Component({\n  selector: 'p-lightbox',\n  template: \"\\n        <div [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" *ngIf=\\\"(type == 'image')\\\">\\n            <a *ngFor=\\\"let image of images; let i = index;\\\" [href]=\\\"image.source\\\" (click)=\\\"onImageClick($event,image,i,content)\\\">\\n                <img [src]=\\\"image.thumbnail\\\" [title]=\\\"image.title\\\" [alt]=\\\"image.alt\\\">\\n            </a>\\n        </div>\\n        <span [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" *ngIf=\\\"(type == 'content')\\\" (click)=\\\"onLinkClick($event,content)\\\">\\n            <ng-content select=\\\"a\\\"></ng-content>\\n        </span>\\n        <div class=\\\"ui-lightbox ui-widget ui-corner-all ui-shadow\\\" [style.display]=\\\"visible ? 'block' : 'none'\\\" [style.zIndex]=\\\"zindex\\\"\\n            [ngClass]=\\\"{'ui-lightbox-loading': loading}\\\"\\n            [style.transitionProperty]=\\\"'all'\\\" [style.transitionDuration]=\\\"effectDuration\\\" [style.transitionTimingFunction]=\\\"easing\\\" (click)=\\\"preventDocumentClickListener=true\\\">\\n           <div class=\\\"ui-lightbox-content-wrapper\\\">\\n              <a class=\\\"ui-state-default ui-lightbox-nav-left ui-corner-right\\\" [style.zIndex]=\\\"zindex + 1\\\" (click)=\\\"prev(img)\\\"\\n                [ngClass]=\\\"{'ui-helper-hidden':!leftVisible}\\\"><span class=\\\"fa fa-fw fa-caret-left\\\"></span></a>\\n              <div #content class=\\\"ui-lightbox-content ui-corner-all\\\" \\n                [style.transitionProperty]=\\\"'width,height'\\\" [style.transitionDuration]=\\\"effectDuration\\\" [style.transitionTimingFunction]=\\\"easing\\\">\\n                <img #img [src]=\\\"currentImage ? currentImage.source||'' : ''\\\" (load)=\\\"onImageLoad($event,content)\\\" style=\\\"display:none\\\">\\n                <ng-content></ng-content>\\n              </div>\\n              <a class=\\\"ui-state-default ui-lightbox-nav-right ui-corner-left ui-helper-hidden\\\" [style.zIndex]=\\\"zindex + 1\\\" (click)=\\\"next(img)\\\"\\n                [ngClass]=\\\"{'ui-helper-hidden':!rightVisible}\\\"><span class=\\\"fa fa-fw fa-caret-right\\\"></span></a>\\n           </div>\\n           <div class=\\\"ui-lightbox-caption ui-widget-header\\\" [style.display]=\\\"captionText ? 'block' : 'none'\\\">\\n              <span class=\\\"ui-lightbox-caption-text\\\">{{captionText}}</span><a class=\\\"ui-lightbox-close ui-corner-all\\\" href=\\\"#\\\" (click)=\\\"hide($event)\\\"><span class=\\\"fa fa-fw fa-close\\\"></span></a>\\n              <div style=\\\"clear:both\\\"></div>\\n           </div>\\n        </div>\\n    \",\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])], Lightbox);\nexports.Lightbox = Lightbox;\nvar LightboxModule = function () {\n  function LightboxModule() {}\n  return LightboxModule;\n}();\nLightboxModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Lightbox],\n  declarations: [Lightbox]\n})], LightboxModule);\nexports.LightboxModule = LightboxModule;\n//# sourceMappingURL=lightbox.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}