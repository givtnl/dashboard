{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar router_1 = require(\"@angular/router\");\nvar ContextMenuSub = function () {\n  function ContextMenuSub(domHandler, contextMenu) {\n    this.domHandler = domHandler;\n    this.contextMenu = contextMenu;\n  }\n  ContextMenuSub.prototype.onItemMouseEnter = function (event, item, menuitem) {\n    if (menuitem.disabled) {\n      return;\n    }\n    this.activeItem = item;\n    var nextElement = item.children[0].nextElementSibling;\n    if (nextElement) {\n      var sublist = nextElement.children[0];\n      sublist.style.zIndex = ++domhandler_1.DomHandler.zindex;\n      this.position(sublist, item);\n    }\n  };\n  ContextMenuSub.prototype.onItemMouseLeave = function (event, link) {\n    this.activeItem = null;\n  };\n  ContextMenuSub.prototype.itemClick = function (event, item) {\n    if (item.disabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!item.url) {\n      event.preventDefault();\n    }\n    if (item.command) {\n      item.command({\n        originalEvent: event,\n        item: item\n      });\n    }\n  };\n  ContextMenuSub.prototype.listClick = function (event) {\n    this.activeItem = null;\n  };\n  ContextMenuSub.prototype.position = function (sublist, item) {\n    this.containerLeft = this.domHandler.getOffset(item.parentElement);\n    var viewport = this.domHandler.getViewport();\n    var sublistWidth = sublist.offsetParent ? sublist.offsetWidth : this.domHandler.getHiddenElementOuterWidth(sublist);\n    var itemOuterWidth = this.domHandler.getOuterWidth(item.children[0]);\n    sublist.style.top = '0px';\n    if (parseInt(this.containerLeft.left) + itemOuterWidth + sublistWidth > viewport.width - this.calculateScrollbarWidth()) {\n      sublist.style.left = -sublistWidth + 'px';\n    } else {\n      sublist.style.left = itemOuterWidth + 'px';\n    }\n  };\n  ContextMenuSub.prototype.calculateScrollbarWidth = function () {\n    var scrollDiv = document.createElement(\"div\");\n    scrollDiv.className = \"ui-scrollbar-measure\";\n    document.body.appendChild(scrollDiv);\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n  };\n  return ContextMenuSub;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], ContextMenuSub.prototype, \"item\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], ContextMenuSub.prototype, \"root\", void 0);\nContextMenuSub = __decorate([core_1.Component({\n  selector: 'p-contextMenuSub',\n  template: \"\\n        <ul [ngClass]=\\\"{'ui-helper-reset':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow':!root}\\\" class=\\\"ui-menu-list\\\"\\n            (click)=\\\"listClick($event)\\\">\\n            <ng-template ngFor let-child [ngForOf]=\\\"(root ? item : item.items)\\\">\\n                <li *ngIf=\\\"child.separator\\\" class=\\\"ui-menu-separator ui-widget-content\\\">\\n                <li *ngIf=\\\"!child.separator\\\" #item [ngClass]=\\\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-menuitem-active':item==activeItem}\\\"\\n                    (mouseenter)=\\\"onItemMouseEnter($event,item,child)\\\" (mouseleave)=\\\"onItemMouseLeave($event,item)\\\" [style.display]=\\\"child.visible === false ? 'none' : 'block'\\\">\\n                    <a *ngIf=\\\"!child.routerLink\\\" [href]=\\\"child.url||'#'\\\" [attr.target]=\\\"child.target\\\" [attr.title]=\\\"child.title\\\" (click)=\\\"itemClick($event, child)\\\"\\n                        [ngClass]=\\\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\\\" [ngStyle]=\\\"child.style\\\" [class]=\\\"child.styleClass\\\">\\n                        <span class=\\\"ui-submenu-icon fa fa-fw fa-caret-right\\\" *ngIf=\\\"child.items\\\"></span>\\n                        <span class=\\\"ui-menuitem-icon fa fa-fw\\\" *ngIf=\\\"child.icon\\\" [ngClass]=\\\"child.icon\\\"></span>\\n                        <span class=\\\"ui-menuitem-text\\\">{{child.label}}</span>\\n                    </a>\\n                    <a *ngIf=\\\"child.routerLink\\\" [routerLink]=\\\"child.routerLink\\\" [queryParams]=\\\"child.queryParams\\\" [routerLinkActive]=\\\"'ui-state-active'\\\" \\n                        [routerLinkActiveOptions]=\\\"child.routerLinkActiveOptions||{exact:false}\\\" [attr.target]=\\\"child.target\\\" [attr.title]=\\\"child.title\\\"\\n                        (click)=\\\"itemClick($event, child)\\\" [ngClass]=\\\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\\\" \\n                        [ngStyle]=\\\"child.style\\\" [class]=\\\"child.styleClass\\\">\\n                        <span class=\\\"ui-submenu-icon fa fa-fw fa-caret-right\\\" *ngIf=\\\"child.items\\\"></span>\\n                        <span class=\\\"ui-menuitem-icon fa fa-fw\\\" *ngIf=\\\"child.icon\\\" [ngClass]=\\\"child.icon\\\"></span>\\n                        <span class=\\\"ui-menuitem-text\\\">{{child.label}}</span>\\n                    </a>\\n                    <p-contextMenuSub class=\\\"ui-submenu\\\" [item]=\\\"child\\\" *ngIf=\\\"child.items\\\"></p-contextMenuSub>\\n                </li>\\n            </ng-template>\\n        </ul>\\n    \",\n  providers: [domhandler_1.DomHandler]\n}), __param(1, core_1.Inject(core_1.forwardRef(function () {\n  return ContextMenu;\n}))), __metadata(\"design:paramtypes\", [domhandler_1.DomHandler, ContextMenu])], ContextMenuSub);\nexports.ContextMenuSub = ContextMenuSub;\nvar ContextMenu = function () {\n  function ContextMenu(el, domHandler, renderer) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.renderer = renderer;\n  }\n  ContextMenu.prototype.ngAfterViewInit = function () {\n    var _this = this;\n    this.container = this.containerViewChild.nativeElement;\n    if (this.global) {\n      this.rightClickListener = this.renderer.listen('document', 'contextmenu', function (event) {\n        _this.show(event);\n        event.preventDefault();\n      });\n    } else if (this.target) {\n      this.rightClickListener = this.renderer.listen(this.target, 'contextmenu', function (event) {\n        _this.show(event);\n        event.preventDefault();\n        event.stopPropagation();\n      });\n    }\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.container);else this.domHandler.appendChild(this.container, this.appendTo);\n    }\n  };\n  ContextMenu.prototype.show = function (event) {\n    this.position(event);\n    this.visible = true;\n    this.domHandler.fadeIn(this.container, 250);\n    this.bindDocumentClickListener();\n    if (event) {\n      event.preventDefault();\n    }\n  };\n  ContextMenu.prototype.hide = function () {\n    this.visible = false;\n    this.unbindDocumentClickListener();\n  };\n  ContextMenu.prototype.toggle = function (event) {\n    if (this.visible) this.hide();else this.show(event);\n  };\n  ContextMenu.prototype.position = function (event) {\n    if (event) {\n      var left = event.pageX + 1;\n      var top_1 = event.pageY + 1;\n      var width = this.container.offsetParent ? this.container.offsetWidth : this.domHandler.getHiddenElementOuterWidth(this.container);\n      var height = this.container.offsetParent ? this.container.offsetHeight : this.domHandler.getHiddenElementOuterHeight(this.container);\n      var viewport = this.domHandler.getViewport();\n      //flip\n      if (left + width - document.body.scrollLeft > viewport.width) {\n        left -= width;\n      }\n      //flip\n      if (top_1 + height - document.body.scrollTop > viewport.height) {\n        top_1 -= height;\n      }\n      //fit\n      if (left < document.body.scrollLeft) {\n        left = document.body.scrollLeft;\n      }\n      //fit\n      if (top_1 < document.body.scrollTop) {\n        top_1 = document.body.scrollTop;\n      }\n      this.container.style.left = left + 'px';\n      this.container.style.top = top_1 + 'px';\n    }\n  };\n  ContextMenu.prototype.bindDocumentClickListener = function () {\n    var _this = this;\n    if (!this.documentClickListener) {\n      this.documentClickListener = this.renderer.listen('document', 'click', function (event) {\n        if (_this.visible && event.button !== 2) {\n          _this.hide();\n        }\n      });\n    }\n  };\n  ContextMenu.prototype.unbindDocumentClickListener = function () {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n      this.documentClickListener = null;\n    }\n  };\n  ContextMenu.prototype.ngOnDestroy = function () {\n    this.unbindDocumentClickListener();\n    if (this.rightClickListener) {\n      this.rightClickListener();\n    }\n    if (this.appendTo) {\n      this.el.nativeElement.appendChild(this.container);\n    }\n  };\n  return ContextMenu;\n}();\n__decorate([core_1.Input(), __metadata(\"design:type\", Array)], ContextMenu.prototype, \"model\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], ContextMenu.prototype, \"global\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], ContextMenu.prototype, \"target\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], ContextMenu.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], ContextMenu.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], ContextMenu.prototype, \"appendTo\", void 0);\n__decorate([core_1.ViewChild('container'), __metadata(\"design:type\", core_1.ElementRef)], ContextMenu.prototype, \"containerViewChild\", void 0);\nContextMenu = __decorate([core_1.Component({\n  selector: 'p-contextMenu',\n  template: \"\\n        <div #container [ngClass]=\\\"'ui-contextmenu ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-dynamic ui-shadow'\\\" \\n            [class]=\\\"styleClass\\\" [ngStyle]=\\\"style\\\" [style.display]=\\\"visible ? 'block' : 'none'\\\">\\n            <p-contextMenuSub [item]=\\\"model\\\" root=\\\"root\\\"></p-contextMenuSub>\\n        </div>\\n    \",\n  providers: [domhandler_1.DomHandler]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer2])], ContextMenu);\nexports.ContextMenu = ContextMenu;\nvar ContextMenuModule = function () {\n  function ContextMenuModule() {}\n  return ContextMenuModule;\n}();\nContextMenuModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule, router_1.RouterModule],\n  exports: [ContextMenu, router_1.RouterModule],\n  declarations: [ContextMenu, ContextMenuSub]\n})], ContextMenuModule);\nexports.ContextMenuModule = ContextMenuModule;\n//# sourceMappingURL=contextmenu.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}