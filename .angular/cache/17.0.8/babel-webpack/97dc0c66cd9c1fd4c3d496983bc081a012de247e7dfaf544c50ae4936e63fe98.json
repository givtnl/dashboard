{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar forms_1 = require(\"@angular/forms\");\nexports.EDITOR_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return Editor;\n  }),\n  multi: true\n};\nvar Editor = function () {\n  function Editor(el, domHandler) {\n    this.el = el;\n    this.domHandler = domHandler;\n    this.onTextChange = new core_1.EventEmitter();\n    this.onSelectionChange = new core_1.EventEmitter();\n    this.onInit = new core_1.EventEmitter();\n    this.onModelChange = function () {};\n    this.onModelTouched = function () {};\n  }\n  Editor.prototype.ngAfterViewInit = function () {\n    var _this = this;\n    var editorElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-editor-content');\n    var toolbarElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-editor-toolbar');\n    this.quill = new Quill(editorElement, {\n      modules: {\n        toolbar: toolbarElement\n      },\n      placeholder: this.placeholder,\n      readOnly: this.readonly,\n      theme: 'snow',\n      formats: this.formats\n    });\n    if (this.value) {\n      this.quill.pasteHTML(this.value);\n    }\n    this.quill.on('text-change', function (delta, oldContents, source) {\n      var html = editorElement.children[0].innerHTML;\n      var text = _this.quill.getText();\n      if (html == '<p><br></p>') {\n        html = null;\n      }\n      _this.onTextChange.emit({\n        htmlValue: html,\n        textValue: text,\n        delta: delta,\n        source: source\n      });\n      _this.onModelChange(html);\n      if (source === 'user') {\n        _this.onModelTouched();\n      }\n    });\n    this.quill.on('selection-change', function (range, oldRange, source) {\n      _this.onSelectionChange.emit({\n        range: range,\n        oldRange: oldRange,\n        source: source\n      });\n    });\n    this.onInit.emit({\n      editor: this.quill\n    });\n  };\n  Editor.prototype.writeValue = function (value) {\n    this.value = value;\n    if (this.quill) {\n      if (value) this.quill.pasteHTML(value);else this.quill.setText('');\n    }\n  };\n  Editor.prototype.registerOnChange = function (fn) {\n    this.onModelChange = fn;\n  };\n  Editor.prototype.registerOnTouched = function (fn) {\n    this.onModelTouched = fn;\n  };\n  Editor.prototype.getQuill = function () {\n    return this.quill;\n  };\n  Object.defineProperty(Editor.prototype, \"readonly\", {\n    get: function () {\n      return this._readonly;\n    },\n    set: function (val) {\n      this._readonly = val;\n      if (this.quill) {\n        if (this._readonly) this.quill.disable();else this.quill.enable();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Editor;\n}();\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Editor.prototype, \"onTextChange\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Editor.prototype, \"onSelectionChange\", void 0);\n__decorate([core_1.ContentChild(shared_1.Header), __metadata(\"design:type\", Object)], Editor.prototype, \"toolbar\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], Editor.prototype, \"style\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Editor.prototype, \"styleClass\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], Editor.prototype, \"placeholder\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Array)], Editor.prototype, \"formats\", void 0);\n__decorate([core_1.Output(), __metadata(\"design:type\", core_1.EventEmitter)], Editor.prototype, \"onInit\", void 0);\n__decorate([core_1.Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], Editor.prototype, \"readonly\", null);\nEditor = __decorate([core_1.Component({\n  selector: 'p-editor',\n  template: \"\\n        <div [ngClass]=\\\"'ui-widget ui-editor-container ui-corner-all'\\\" [class]=\\\"styleClass\\\">\\n            <div class=\\\"ui-editor-toolbar ui-widget-header ui-corner-top\\\" *ngIf=\\\"toolbar\\\">\\n                <ng-content select=\\\"p-header\\\"></ng-content>\\n            </div>\\n            <div class=\\\"ui-editor-toolbar ui-widget-header ui-corner-top\\\" *ngIf=\\\"!toolbar\\\">\\n                <span class=\\\"ql-formats\\\">\\n                    <select class=\\\"ql-header\\\">\\n                      <option value=\\\"1\\\">Heading</option>\\n                      <option value=\\\"2\\\">Subheading</option>\\n                      <option selected>Normal</option>\\n                    </select>\\n                    <select class=\\\"ql-font\\\">\\n                      <option selected>Sans Serif</option>\\n                      <option value=\\\"serif\\\">Serif</option>\\n                      <option value=\\\"monospace\\\">Monospace</option>\\n                    </select>\\n                </span>\\n                <span class=\\\"ql-formats\\\">\\n                    <button class=\\\"ql-bold\\\" aria-label=\\\"Bold\\\"></button>\\n                    <button class=\\\"ql-italic\\\" aria-label=\\\"Italic\\\"></button>\\n                    <button class=\\\"ql-underline\\\" aria-label=\\\"Underline\\\"></button>\\n                </span>\\n                <span class=\\\"ql-formats\\\">\\n                    <select class=\\\"ql-color\\\"></select>\\n                    <select class=\\\"ql-background\\\"></select>\\n                </span>\\n                <span class=\\\"ql-formats\\\">\\n                    <button class=\\\"ql-list\\\" value=\\\"ordered\\\" aria-label=\\\"Ordered List\\\"></button>\\n                    <button class=\\\"ql-list\\\" value=\\\"bullet\\\" aria-label=\\\"Unordered List\\\"></button>\\n                    <select class=\\\"ql-align\\\">\\n                        <option selected></option>\\n                        <option value=\\\"center\\\"></option>\\n                        <option value=\\\"right\\\"></option>\\n                        <option value=\\\"justify\\\"></option>\\n                    </select>\\n                </span>\\n                <span class=\\\"ql-formats\\\">\\n                    <button class=\\\"ql-link\\\" aria-label=\\\"Insert Link\\\"></button>\\n                    <button class=\\\"ql-image\\\" aria-label=\\\"Insert Image\\\"></button>\\n                    <button class=\\\"ql-code-block\\\" aria-label=\\\"Insert Code Block\\\"></button>\\n                </span>\\n                <span class=\\\"ql-formats\\\">\\n                    <button class=\\\"ql-clean\\\" aria-label=\\\"Remove Styles\\\"></button>\\n                </span>\\n            </div>\\n            <div class=\\\"ui-editor-content\\\" [ngStyle]=\\\"style\\\"></div>\\n        </div>\\n    \",\n  providers: [domhandler_1.DomHandler, exports.EDITOR_VALUE_ACCESSOR]\n}), __metadata(\"design:paramtypes\", [core_1.ElementRef, domhandler_1.DomHandler])], Editor);\nexports.Editor = Editor;\nvar EditorModule = function () {\n  function EditorModule() {}\n  return EditorModule;\n}();\nEditorModule = __decorate([core_1.NgModule({\n  imports: [common_1.CommonModule],\n  exports: [Editor, shared_1.SharedModule],\n  declarations: [Editor]\n})], EditorModule);\nexports.EditorModule = EditorModule;\n//# sourceMappingURL=editor.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}